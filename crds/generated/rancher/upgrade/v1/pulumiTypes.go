// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PlanType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *PlanSpec          `pulumi:"spec"`
	Status     *PlanStatus        `pulumi:"status"`
}

// PlanTypeInput is an input type that accepts PlanTypeArgs and PlanTypeOutput values.
// You can construct a concrete instance of `PlanTypeInput` via:
//
//	PlanTypeArgs{...}
type PlanTypeInput interface {
	pulumi.Input

	ToPlanTypeOutput() PlanTypeOutput
	ToPlanTypeOutputWithContext(context.Context) PlanTypeOutput
}

type PlanTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       PlanSpecPtrInput          `pulumi:"spec"`
	Status     PlanStatusPtrInput        `pulumi:"status"`
}

func (PlanTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanType)(nil)).Elem()
}

func (i PlanTypeArgs) ToPlanTypeOutput() PlanTypeOutput {
	return i.ToPlanTypeOutputWithContext(context.Background())
}

func (i PlanTypeArgs) ToPlanTypeOutputWithContext(ctx context.Context) PlanTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanTypeOutput)
}

type PlanTypeOutput struct{ *pulumi.OutputState }

func (PlanTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanType)(nil)).Elem()
}

func (o PlanTypeOutput) ToPlanTypeOutput() PlanTypeOutput {
	return o
}

func (o PlanTypeOutput) ToPlanTypeOutputWithContext(ctx context.Context) PlanTypeOutput {
	return o
}

func (o PlanTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PlanTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PlanTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PlanType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PlanTypeOutput) Spec() PlanSpecPtrOutput {
	return o.ApplyT(func(v PlanType) *PlanSpec { return v.Spec }).(PlanSpecPtrOutput)
}

func (o PlanTypeOutput) Status() PlanStatusPtrOutput {
	return o.ApplyT(func(v PlanType) *PlanStatus { return v.Status }).(PlanStatusPtrOutput)
}

type PlanSpec struct {
	Channel            *string               `pulumi:"channel"`
	Concurrency        *int                  `pulumi:"concurrency"`
	Cordon             *bool                 `pulumi:"cordon"`
	Drain              *PlanSpecDrain        `pulumi:"drain"`
	NodeSelector       *PlanSpecNodeSelector `pulumi:"nodeSelector"`
	Prepare            *PlanSpecPrepare      `pulumi:"prepare"`
	Secrets            []PlanSpecSecrets     `pulumi:"secrets"`
	ServiceAccountName *string               `pulumi:"serviceAccountName"`
	Tolerations        []PlanSpecTolerations `pulumi:"tolerations"`
	Upgrade            PlanSpecUpgrade       `pulumi:"upgrade"`
	Version            *string               `pulumi:"version"`
}

// PlanSpecInput is an input type that accepts PlanSpecArgs and PlanSpecOutput values.
// You can construct a concrete instance of `PlanSpecInput` via:
//
//	PlanSpecArgs{...}
type PlanSpecInput interface {
	pulumi.Input

	ToPlanSpecOutput() PlanSpecOutput
	ToPlanSpecOutputWithContext(context.Context) PlanSpecOutput
}

type PlanSpecArgs struct {
	Channel            pulumi.StringPtrInput         `pulumi:"channel"`
	Concurrency        pulumi.IntPtrInput            `pulumi:"concurrency"`
	Cordon             pulumi.BoolPtrInput           `pulumi:"cordon"`
	Drain              PlanSpecDrainPtrInput         `pulumi:"drain"`
	NodeSelector       PlanSpecNodeSelectorPtrInput  `pulumi:"nodeSelector"`
	Prepare            PlanSpecPreparePtrInput       `pulumi:"prepare"`
	Secrets            PlanSpecSecretsArrayInput     `pulumi:"secrets"`
	ServiceAccountName pulumi.StringPtrInput         `pulumi:"serviceAccountName"`
	Tolerations        PlanSpecTolerationsArrayInput `pulumi:"tolerations"`
	Upgrade            PlanSpecUpgradeInput          `pulumi:"upgrade"`
	Version            pulumi.StringPtrInput         `pulumi:"version"`
}

func (PlanSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpec)(nil)).Elem()
}

func (i PlanSpecArgs) ToPlanSpecOutput() PlanSpecOutput {
	return i.ToPlanSpecOutputWithContext(context.Background())
}

func (i PlanSpecArgs) ToPlanSpecOutputWithContext(ctx context.Context) PlanSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecOutput)
}

func (i PlanSpecArgs) ToPlanSpecPtrOutput() PlanSpecPtrOutput {
	return i.ToPlanSpecPtrOutputWithContext(context.Background())
}

func (i PlanSpecArgs) ToPlanSpecPtrOutputWithContext(ctx context.Context) PlanSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecOutput).ToPlanSpecPtrOutputWithContext(ctx)
}

// PlanSpecPtrInput is an input type that accepts PlanSpecArgs, PlanSpecPtr and PlanSpecPtrOutput values.
// You can construct a concrete instance of `PlanSpecPtrInput` via:
//
//	        PlanSpecArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPtrInput interface {
	pulumi.Input

	ToPlanSpecPtrOutput() PlanSpecPtrOutput
	ToPlanSpecPtrOutputWithContext(context.Context) PlanSpecPtrOutput
}

type planSpecPtrType PlanSpecArgs

func PlanSpecPtr(v *PlanSpecArgs) PlanSpecPtrInput {
	return (*planSpecPtrType)(v)
}

func (*planSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpec)(nil)).Elem()
}

func (i *planSpecPtrType) ToPlanSpecPtrOutput() PlanSpecPtrOutput {
	return i.ToPlanSpecPtrOutputWithContext(context.Background())
}

func (i *planSpecPtrType) ToPlanSpecPtrOutputWithContext(ctx context.Context) PlanSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPtrOutput)
}

type PlanSpecOutput struct{ *pulumi.OutputState }

func (PlanSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpec)(nil)).Elem()
}

func (o PlanSpecOutput) ToPlanSpecOutput() PlanSpecOutput {
	return o
}

func (o PlanSpecOutput) ToPlanSpecOutputWithContext(ctx context.Context) PlanSpecOutput {
	return o
}

func (o PlanSpecOutput) ToPlanSpecPtrOutput() PlanSpecPtrOutput {
	return o.ToPlanSpecPtrOutputWithContext(context.Background())
}

func (o PlanSpecOutput) ToPlanSpecPtrOutputWithContext(ctx context.Context) PlanSpecPtrOutput {
	return o.ApplyT(func(v PlanSpec) *PlanSpec {
		return &v
	}).(PlanSpecPtrOutput)
}
func (o PlanSpecOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpec) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o PlanSpecOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanSpec) *int { return v.Concurrency }).(pulumi.IntPtrOutput)
}

func (o PlanSpecOutput) Cordon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpec) *bool { return v.Cordon }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecOutput) Drain() PlanSpecDrainPtrOutput {
	return o.ApplyT(func(v PlanSpec) *PlanSpecDrain { return v.Drain }).(PlanSpecDrainPtrOutput)
}

func (o PlanSpecOutput) NodeSelector() PlanSpecNodeSelectorPtrOutput {
	return o.ApplyT(func(v PlanSpec) *PlanSpecNodeSelector { return v.NodeSelector }).(PlanSpecNodeSelectorPtrOutput)
}

func (o PlanSpecOutput) Prepare() PlanSpecPreparePtrOutput {
	return o.ApplyT(func(v PlanSpec) *PlanSpecPrepare { return v.Prepare }).(PlanSpecPreparePtrOutput)
}

func (o PlanSpecOutput) Secrets() PlanSpecSecretsArrayOutput {
	return o.ApplyT(func(v PlanSpec) []PlanSpecSecrets { return v.Secrets }).(PlanSpecSecretsArrayOutput)
}

func (o PlanSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o PlanSpecOutput) Tolerations() PlanSpecTolerationsArrayOutput {
	return o.ApplyT(func(v PlanSpec) []PlanSpecTolerations { return v.Tolerations }).(PlanSpecTolerationsArrayOutput)
}

func (o PlanSpecOutput) Upgrade() PlanSpecUpgradeOutput {
	return o.ApplyT(func(v PlanSpec) PlanSpecUpgrade { return v.Upgrade }).(PlanSpecUpgradeOutput)
}

func (o PlanSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanSpecPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpec)(nil)).Elem()
}

func (o PlanSpecPtrOutput) ToPlanSpecPtrOutput() PlanSpecPtrOutput {
	return o
}

func (o PlanSpecPtrOutput) ToPlanSpecPtrOutputWithContext(ctx context.Context) PlanSpecPtrOutput {
	return o
}

func (o PlanSpecPtrOutput) Elem() PlanSpecOutput {
	return o.ApplyT(func(v *PlanSpec) PlanSpec { return *v }).(PlanSpecOutput)
}

func (o PlanSpecPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPtrOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *int {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(pulumi.IntPtrOutput)
}

func (o PlanSpecPtrOutput) Cordon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Cordon
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecPtrOutput) Drain() PlanSpecDrainPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *PlanSpecDrain {
		if v == nil {
			return nil
		}
		return v.Drain
	}).(PlanSpecDrainPtrOutput)
}

func (o PlanSpecPtrOutput) NodeSelector() PlanSpecNodeSelectorPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *PlanSpecNodeSelector {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(PlanSpecNodeSelectorPtrOutput)
}

func (o PlanSpecPtrOutput) Prepare() PlanSpecPreparePtrOutput {
	return o.ApplyT(func(v *PlanSpec) *PlanSpecPrepare {
		if v == nil {
			return nil
		}
		return v.Prepare
	}).(PlanSpecPreparePtrOutput)
}

func (o PlanSpecPtrOutput) Secrets() PlanSpecSecretsArrayOutput {
	return o.ApplyT(func(v *PlanSpec) []PlanSpecSecrets {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(PlanSpecSecretsArrayOutput)
}

func (o PlanSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPtrOutput) Tolerations() PlanSpecTolerationsArrayOutput {
	return o.ApplyT(func(v *PlanSpec) []PlanSpecTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(PlanSpecTolerationsArrayOutput)
}

func (o PlanSpecPtrOutput) Upgrade() PlanSpecUpgradePtrOutput {
	return o.ApplyT(func(v *PlanSpec) *PlanSpecUpgrade {
		if v == nil {
			return nil
		}
		return &v.Upgrade
	}).(PlanSpecUpgradePtrOutput)
}

func (o PlanSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type PlanSpecDrain struct {
	DeleteEmptydirData       *bool                     `pulumi:"deleteEmptydirData"`
	DeleteLocalData          *bool                     `pulumi:"deleteLocalData"`
	DisableEviction          *bool                     `pulumi:"disableEviction"`
	Force                    *bool                     `pulumi:"force"`
	GracePeriod              *int                      `pulumi:"gracePeriod"`
	IgnoreDaemonSets         *bool                     `pulumi:"ignoreDaemonSets"`
	PodSelector              *PlanSpecDrainPodSelector `pulumi:"podSelector"`
	SkipWaitForDeleteTimeout *int                      `pulumi:"skipWaitForDeleteTimeout"`
	Timeout                  *int                      `pulumi:"timeout"`
}

// PlanSpecDrainInput is an input type that accepts PlanSpecDrainArgs and PlanSpecDrainOutput values.
// You can construct a concrete instance of `PlanSpecDrainInput` via:
//
//	PlanSpecDrainArgs{...}
type PlanSpecDrainInput interface {
	pulumi.Input

	ToPlanSpecDrainOutput() PlanSpecDrainOutput
	ToPlanSpecDrainOutputWithContext(context.Context) PlanSpecDrainOutput
}

type PlanSpecDrainArgs struct {
	DeleteEmptydirData       pulumi.BoolPtrInput              `pulumi:"deleteEmptydirData"`
	DeleteLocalData          pulumi.BoolPtrInput              `pulumi:"deleteLocalData"`
	DisableEviction          pulumi.BoolPtrInput              `pulumi:"disableEviction"`
	Force                    pulumi.BoolPtrInput              `pulumi:"force"`
	GracePeriod              pulumi.IntPtrInput               `pulumi:"gracePeriod"`
	IgnoreDaemonSets         pulumi.BoolPtrInput              `pulumi:"ignoreDaemonSets"`
	PodSelector              PlanSpecDrainPodSelectorPtrInput `pulumi:"podSelector"`
	SkipWaitForDeleteTimeout pulumi.IntPtrInput               `pulumi:"skipWaitForDeleteTimeout"`
	Timeout                  pulumi.IntPtrInput               `pulumi:"timeout"`
}

func (PlanSpecDrainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrain)(nil)).Elem()
}

func (i PlanSpecDrainArgs) ToPlanSpecDrainOutput() PlanSpecDrainOutput {
	return i.ToPlanSpecDrainOutputWithContext(context.Background())
}

func (i PlanSpecDrainArgs) ToPlanSpecDrainOutputWithContext(ctx context.Context) PlanSpecDrainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainOutput)
}

func (i PlanSpecDrainArgs) ToPlanSpecDrainPtrOutput() PlanSpecDrainPtrOutput {
	return i.ToPlanSpecDrainPtrOutputWithContext(context.Background())
}

func (i PlanSpecDrainArgs) ToPlanSpecDrainPtrOutputWithContext(ctx context.Context) PlanSpecDrainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainOutput).ToPlanSpecDrainPtrOutputWithContext(ctx)
}

// PlanSpecDrainPtrInput is an input type that accepts PlanSpecDrainArgs, PlanSpecDrainPtr and PlanSpecDrainPtrOutput values.
// You can construct a concrete instance of `PlanSpecDrainPtrInput` via:
//
//	        PlanSpecDrainArgs{...}
//
//	or:
//
//	        nil
type PlanSpecDrainPtrInput interface {
	pulumi.Input

	ToPlanSpecDrainPtrOutput() PlanSpecDrainPtrOutput
	ToPlanSpecDrainPtrOutputWithContext(context.Context) PlanSpecDrainPtrOutput
}

type planSpecDrainPtrType PlanSpecDrainArgs

func PlanSpecDrainPtr(v *PlanSpecDrainArgs) PlanSpecDrainPtrInput {
	return (*planSpecDrainPtrType)(v)
}

func (*planSpecDrainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecDrain)(nil)).Elem()
}

func (i *planSpecDrainPtrType) ToPlanSpecDrainPtrOutput() PlanSpecDrainPtrOutput {
	return i.ToPlanSpecDrainPtrOutputWithContext(context.Background())
}

func (i *planSpecDrainPtrType) ToPlanSpecDrainPtrOutputWithContext(ctx context.Context) PlanSpecDrainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPtrOutput)
}

type PlanSpecDrainOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrain)(nil)).Elem()
}

func (o PlanSpecDrainOutput) ToPlanSpecDrainOutput() PlanSpecDrainOutput {
	return o
}

func (o PlanSpecDrainOutput) ToPlanSpecDrainOutputWithContext(ctx context.Context) PlanSpecDrainOutput {
	return o
}

func (o PlanSpecDrainOutput) ToPlanSpecDrainPtrOutput() PlanSpecDrainPtrOutput {
	return o.ToPlanSpecDrainPtrOutputWithContext(context.Background())
}

func (o PlanSpecDrainOutput) ToPlanSpecDrainPtrOutputWithContext(ctx context.Context) PlanSpecDrainPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *PlanSpecDrain {
		return &v
	}).(PlanSpecDrainPtrOutput)
}
func (o PlanSpecDrainOutput) DeleteEmptydirData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *bool { return v.DeleteEmptydirData }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainOutput) DeleteLocalData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *bool { return v.DeleteLocalData }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainOutput) DisableEviction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *bool { return v.DisableEviction }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *int { return v.GracePeriod }).(pulumi.IntPtrOutput)
}

func (o PlanSpecDrainOutput) IgnoreDaemonSets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *bool { return v.IgnoreDaemonSets }).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainOutput) PodSelector() PlanSpecDrainPodSelectorPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *PlanSpecDrainPodSelector { return v.PodSelector }).(PlanSpecDrainPodSelectorPtrOutput)
}

func (o PlanSpecDrainOutput) SkipWaitForDeleteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *int { return v.SkipWaitForDeleteTimeout }).(pulumi.IntPtrOutput)
}

func (o PlanSpecDrainOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanSpecDrain) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type PlanSpecDrainPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecDrain)(nil)).Elem()
}

func (o PlanSpecDrainPtrOutput) ToPlanSpecDrainPtrOutput() PlanSpecDrainPtrOutput {
	return o
}

func (o PlanSpecDrainPtrOutput) ToPlanSpecDrainPtrOutputWithContext(ctx context.Context) PlanSpecDrainPtrOutput {
	return o
}

func (o PlanSpecDrainPtrOutput) Elem() PlanSpecDrainOutput {
	return o.ApplyT(func(v *PlanSpecDrain) PlanSpecDrain { return *v }).(PlanSpecDrainOutput)
}

func (o PlanSpecDrainPtrOutput) DeleteEmptydirData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteEmptydirData
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainPtrOutput) DeleteLocalData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteLocalData
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainPtrOutput) DisableEviction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *bool {
		if v == nil {
			return nil
		}
		return v.DisableEviction
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainPtrOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *int {
		if v == nil {
			return nil
		}
		return v.GracePeriod
	}).(pulumi.IntPtrOutput)
}

func (o PlanSpecDrainPtrOutput) IgnoreDaemonSets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreDaemonSets
	}).(pulumi.BoolPtrOutput)
}

func (o PlanSpecDrainPtrOutput) PodSelector() PlanSpecDrainPodSelectorPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *PlanSpecDrainPodSelector {
		if v == nil {
			return nil
		}
		return v.PodSelector
	}).(PlanSpecDrainPodSelectorPtrOutput)
}

func (o PlanSpecDrainPtrOutput) SkipWaitForDeleteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *int {
		if v == nil {
			return nil
		}
		return v.SkipWaitForDeleteTimeout
	}).(pulumi.IntPtrOutput)
}

func (o PlanSpecDrainPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlanSpecDrain) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type PlanSpecDrainPodSelector struct {
	MatchExpressions []PlanSpecDrainPodSelectorMatchExpressions `pulumi:"matchExpressions"`
	MatchLabels      map[string]string                          `pulumi:"matchLabels"`
}

// PlanSpecDrainPodSelectorInput is an input type that accepts PlanSpecDrainPodSelectorArgs and PlanSpecDrainPodSelectorOutput values.
// You can construct a concrete instance of `PlanSpecDrainPodSelectorInput` via:
//
//	PlanSpecDrainPodSelectorArgs{...}
type PlanSpecDrainPodSelectorInput interface {
	pulumi.Input

	ToPlanSpecDrainPodSelectorOutput() PlanSpecDrainPodSelectorOutput
	ToPlanSpecDrainPodSelectorOutputWithContext(context.Context) PlanSpecDrainPodSelectorOutput
}

type PlanSpecDrainPodSelectorArgs struct {
	MatchExpressions PlanSpecDrainPodSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	MatchLabels      pulumi.StringMapInput                              `pulumi:"matchLabels"`
}

func (PlanSpecDrainPodSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelector)(nil)).Elem()
}

func (i PlanSpecDrainPodSelectorArgs) ToPlanSpecDrainPodSelectorOutput() PlanSpecDrainPodSelectorOutput {
	return i.ToPlanSpecDrainPodSelectorOutputWithContext(context.Background())
}

func (i PlanSpecDrainPodSelectorArgs) ToPlanSpecDrainPodSelectorOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorOutput)
}

func (i PlanSpecDrainPodSelectorArgs) ToPlanSpecDrainPodSelectorPtrOutput() PlanSpecDrainPodSelectorPtrOutput {
	return i.ToPlanSpecDrainPodSelectorPtrOutputWithContext(context.Background())
}

func (i PlanSpecDrainPodSelectorArgs) ToPlanSpecDrainPodSelectorPtrOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorOutput).ToPlanSpecDrainPodSelectorPtrOutputWithContext(ctx)
}

// PlanSpecDrainPodSelectorPtrInput is an input type that accepts PlanSpecDrainPodSelectorArgs, PlanSpecDrainPodSelectorPtr and PlanSpecDrainPodSelectorPtrOutput values.
// You can construct a concrete instance of `PlanSpecDrainPodSelectorPtrInput` via:
//
//	        PlanSpecDrainPodSelectorArgs{...}
//
//	or:
//
//	        nil
type PlanSpecDrainPodSelectorPtrInput interface {
	pulumi.Input

	ToPlanSpecDrainPodSelectorPtrOutput() PlanSpecDrainPodSelectorPtrOutput
	ToPlanSpecDrainPodSelectorPtrOutputWithContext(context.Context) PlanSpecDrainPodSelectorPtrOutput
}

type planSpecDrainPodSelectorPtrType PlanSpecDrainPodSelectorArgs

func PlanSpecDrainPodSelectorPtr(v *PlanSpecDrainPodSelectorArgs) PlanSpecDrainPodSelectorPtrInput {
	return (*planSpecDrainPodSelectorPtrType)(v)
}

func (*planSpecDrainPodSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecDrainPodSelector)(nil)).Elem()
}

func (i *planSpecDrainPodSelectorPtrType) ToPlanSpecDrainPodSelectorPtrOutput() PlanSpecDrainPodSelectorPtrOutput {
	return i.ToPlanSpecDrainPodSelectorPtrOutputWithContext(context.Background())
}

func (i *planSpecDrainPodSelectorPtrType) ToPlanSpecDrainPodSelectorPtrOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorPtrOutput)
}

type PlanSpecDrainPodSelectorOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPodSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelector)(nil)).Elem()
}

func (o PlanSpecDrainPodSelectorOutput) ToPlanSpecDrainPodSelectorOutput() PlanSpecDrainPodSelectorOutput {
	return o
}

func (o PlanSpecDrainPodSelectorOutput) ToPlanSpecDrainPodSelectorOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorOutput {
	return o
}

func (o PlanSpecDrainPodSelectorOutput) ToPlanSpecDrainPodSelectorPtrOutput() PlanSpecDrainPodSelectorPtrOutput {
	return o.ToPlanSpecDrainPodSelectorPtrOutputWithContext(context.Background())
}

func (o PlanSpecDrainPodSelectorOutput) ToPlanSpecDrainPodSelectorPtrOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorPtrOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelector) *PlanSpecDrainPodSelector {
		return &v
	}).(PlanSpecDrainPodSelectorPtrOutput)
}
func (o PlanSpecDrainPodSelectorOutput) MatchExpressions() PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelector) []PlanSpecDrainPodSelectorMatchExpressions { return v.MatchExpressions }).(PlanSpecDrainPodSelectorMatchExpressionsArrayOutput)
}

func (o PlanSpecDrainPodSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type PlanSpecDrainPodSelectorPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPodSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecDrainPodSelector)(nil)).Elem()
}

func (o PlanSpecDrainPodSelectorPtrOutput) ToPlanSpecDrainPodSelectorPtrOutput() PlanSpecDrainPodSelectorPtrOutput {
	return o
}

func (o PlanSpecDrainPodSelectorPtrOutput) ToPlanSpecDrainPodSelectorPtrOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorPtrOutput {
	return o
}

func (o PlanSpecDrainPodSelectorPtrOutput) Elem() PlanSpecDrainPodSelectorOutput {
	return o.ApplyT(func(v *PlanSpecDrainPodSelector) PlanSpecDrainPodSelector { return *v }).(PlanSpecDrainPodSelectorOutput)
}

func (o PlanSpecDrainPodSelectorPtrOutput) MatchExpressions() PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PlanSpecDrainPodSelector) []PlanSpecDrainPodSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PlanSpecDrainPodSelectorMatchExpressionsArrayOutput)
}

func (o PlanSpecDrainPodSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlanSpecDrainPodSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PlanSpecDrainPodSelectorMatchExpressions struct {
	Key      *string  `pulumi:"key"`
	Operator *string  `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// PlanSpecDrainPodSelectorMatchExpressionsInput is an input type that accepts PlanSpecDrainPodSelectorMatchExpressionsArgs and PlanSpecDrainPodSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PlanSpecDrainPodSelectorMatchExpressionsInput` via:
//
//	PlanSpecDrainPodSelectorMatchExpressionsArgs{...}
type PlanSpecDrainPodSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPlanSpecDrainPodSelectorMatchExpressionsOutput() PlanSpecDrainPodSelectorMatchExpressionsOutput
	ToPlanSpecDrainPodSelectorMatchExpressionsOutputWithContext(context.Context) PlanSpecDrainPodSelectorMatchExpressionsOutput
}

type PlanSpecDrainPodSelectorMatchExpressionsArgs struct {
	Key      pulumi.StringPtrInput   `pulumi:"key"`
	Operator pulumi.StringPtrInput   `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (PlanSpecDrainPodSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelectorMatchExpressions)(nil)).Elem()
}

func (i PlanSpecDrainPodSelectorMatchExpressionsArgs) ToPlanSpecDrainPodSelectorMatchExpressionsOutput() PlanSpecDrainPodSelectorMatchExpressionsOutput {
	return i.ToPlanSpecDrainPodSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PlanSpecDrainPodSelectorMatchExpressionsArgs) ToPlanSpecDrainPodSelectorMatchExpressionsOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorMatchExpressionsOutput)
}

// PlanSpecDrainPodSelectorMatchExpressionsArrayInput is an input type that accepts PlanSpecDrainPodSelectorMatchExpressionsArray and PlanSpecDrainPodSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PlanSpecDrainPodSelectorMatchExpressionsArrayInput` via:
//
//	PlanSpecDrainPodSelectorMatchExpressionsArray{ PlanSpecDrainPodSelectorMatchExpressionsArgs{...} }
type PlanSpecDrainPodSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutput() PlanSpecDrainPodSelectorMatchExpressionsArrayOutput
	ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutputWithContext(context.Context) PlanSpecDrainPodSelectorMatchExpressionsArrayOutput
}

type PlanSpecDrainPodSelectorMatchExpressionsArray []PlanSpecDrainPodSelectorMatchExpressionsInput

func (PlanSpecDrainPodSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecDrainPodSelectorMatchExpressions)(nil)).Elem()
}

func (i PlanSpecDrainPodSelectorMatchExpressionsArray) ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutput() PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return i.ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PlanSpecDrainPodSelectorMatchExpressionsArray) ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorMatchExpressionsArrayOutput)
}

type PlanSpecDrainPodSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPodSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelectorMatchExpressions)(nil)).Elem()
}

func (o PlanSpecDrainPodSelectorMatchExpressionsOutput) ToPlanSpecDrainPodSelectorMatchExpressionsOutput() PlanSpecDrainPodSelectorMatchExpressionsOutput {
	return o
}

func (o PlanSpecDrainPodSelectorMatchExpressionsOutput) ToPlanSpecDrainPodSelectorMatchExpressionsOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchExpressionsOutput {
	return o
}

func (o PlanSpecDrainPodSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecDrainPodSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o PlanSpecDrainPodSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecDrainPodSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PlanSpecDrainPodSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPodSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecDrainPodSelectorMatchExpressions)(nil)).Elem()
}

func (o PlanSpecDrainPodSelectorMatchExpressionsArrayOutput) ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutput() PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PlanSpecDrainPodSelectorMatchExpressionsArrayOutput) ToPlanSpecDrainPodSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PlanSpecDrainPodSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PlanSpecDrainPodSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecDrainPodSelectorMatchExpressions {
		return vs[0].([]PlanSpecDrainPodSelectorMatchExpressions)[vs[1].(int)]
	}).(PlanSpecDrainPodSelectorMatchExpressionsOutput)
}

type PlanSpecDrainPodSelectorMatchLabels struct {
}

// PlanSpecDrainPodSelectorMatchLabelsInput is an input type that accepts PlanSpecDrainPodSelectorMatchLabelsArgs and PlanSpecDrainPodSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `PlanSpecDrainPodSelectorMatchLabelsInput` via:
//
//	PlanSpecDrainPodSelectorMatchLabelsArgs{...}
type PlanSpecDrainPodSelectorMatchLabelsInput interface {
	pulumi.Input

	ToPlanSpecDrainPodSelectorMatchLabelsOutput() PlanSpecDrainPodSelectorMatchLabelsOutput
	ToPlanSpecDrainPodSelectorMatchLabelsOutputWithContext(context.Context) PlanSpecDrainPodSelectorMatchLabelsOutput
}

type PlanSpecDrainPodSelectorMatchLabelsArgs struct {
}

func (PlanSpecDrainPodSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelectorMatchLabels)(nil)).Elem()
}

func (i PlanSpecDrainPodSelectorMatchLabelsArgs) ToPlanSpecDrainPodSelectorMatchLabelsOutput() PlanSpecDrainPodSelectorMatchLabelsOutput {
	return i.ToPlanSpecDrainPodSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i PlanSpecDrainPodSelectorMatchLabelsArgs) ToPlanSpecDrainPodSelectorMatchLabelsOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecDrainPodSelectorMatchLabelsOutput)
}

type PlanSpecDrainPodSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (PlanSpecDrainPodSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecDrainPodSelectorMatchLabels)(nil)).Elem()
}

func (o PlanSpecDrainPodSelectorMatchLabelsOutput) ToPlanSpecDrainPodSelectorMatchLabelsOutput() PlanSpecDrainPodSelectorMatchLabelsOutput {
	return o
}

func (o PlanSpecDrainPodSelectorMatchLabelsOutput) ToPlanSpecDrainPodSelectorMatchLabelsOutputWithContext(ctx context.Context) PlanSpecDrainPodSelectorMatchLabelsOutput {
	return o
}

type PlanSpecNodeSelector struct {
	MatchExpressions []PlanSpecNodeSelectorMatchExpressions `pulumi:"matchExpressions"`
	MatchLabels      map[string]string                      `pulumi:"matchLabels"`
}

// PlanSpecNodeSelectorInput is an input type that accepts PlanSpecNodeSelectorArgs and PlanSpecNodeSelectorOutput values.
// You can construct a concrete instance of `PlanSpecNodeSelectorInput` via:
//
//	PlanSpecNodeSelectorArgs{...}
type PlanSpecNodeSelectorInput interface {
	pulumi.Input

	ToPlanSpecNodeSelectorOutput() PlanSpecNodeSelectorOutput
	ToPlanSpecNodeSelectorOutputWithContext(context.Context) PlanSpecNodeSelectorOutput
}

type PlanSpecNodeSelectorArgs struct {
	MatchExpressions PlanSpecNodeSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	MatchLabels      pulumi.StringMapInput                          `pulumi:"matchLabels"`
}

func (PlanSpecNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelector)(nil)).Elem()
}

func (i PlanSpecNodeSelectorArgs) ToPlanSpecNodeSelectorOutput() PlanSpecNodeSelectorOutput {
	return i.ToPlanSpecNodeSelectorOutputWithContext(context.Background())
}

func (i PlanSpecNodeSelectorArgs) ToPlanSpecNodeSelectorOutputWithContext(ctx context.Context) PlanSpecNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorOutput)
}

func (i PlanSpecNodeSelectorArgs) ToPlanSpecNodeSelectorPtrOutput() PlanSpecNodeSelectorPtrOutput {
	return i.ToPlanSpecNodeSelectorPtrOutputWithContext(context.Background())
}

func (i PlanSpecNodeSelectorArgs) ToPlanSpecNodeSelectorPtrOutputWithContext(ctx context.Context) PlanSpecNodeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorOutput).ToPlanSpecNodeSelectorPtrOutputWithContext(ctx)
}

// PlanSpecNodeSelectorPtrInput is an input type that accepts PlanSpecNodeSelectorArgs, PlanSpecNodeSelectorPtr and PlanSpecNodeSelectorPtrOutput values.
// You can construct a concrete instance of `PlanSpecNodeSelectorPtrInput` via:
//
//	        PlanSpecNodeSelectorArgs{...}
//
//	or:
//
//	        nil
type PlanSpecNodeSelectorPtrInput interface {
	pulumi.Input

	ToPlanSpecNodeSelectorPtrOutput() PlanSpecNodeSelectorPtrOutput
	ToPlanSpecNodeSelectorPtrOutputWithContext(context.Context) PlanSpecNodeSelectorPtrOutput
}

type planSpecNodeSelectorPtrType PlanSpecNodeSelectorArgs

func PlanSpecNodeSelectorPtr(v *PlanSpecNodeSelectorArgs) PlanSpecNodeSelectorPtrInput {
	return (*planSpecNodeSelectorPtrType)(v)
}

func (*planSpecNodeSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecNodeSelector)(nil)).Elem()
}

func (i *planSpecNodeSelectorPtrType) ToPlanSpecNodeSelectorPtrOutput() PlanSpecNodeSelectorPtrOutput {
	return i.ToPlanSpecNodeSelectorPtrOutputWithContext(context.Background())
}

func (i *planSpecNodeSelectorPtrType) ToPlanSpecNodeSelectorPtrOutputWithContext(ctx context.Context) PlanSpecNodeSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorPtrOutput)
}

type PlanSpecNodeSelectorOutput struct{ *pulumi.OutputState }

func (PlanSpecNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelector)(nil)).Elem()
}

func (o PlanSpecNodeSelectorOutput) ToPlanSpecNodeSelectorOutput() PlanSpecNodeSelectorOutput {
	return o
}

func (o PlanSpecNodeSelectorOutput) ToPlanSpecNodeSelectorOutputWithContext(ctx context.Context) PlanSpecNodeSelectorOutput {
	return o
}

func (o PlanSpecNodeSelectorOutput) ToPlanSpecNodeSelectorPtrOutput() PlanSpecNodeSelectorPtrOutput {
	return o.ToPlanSpecNodeSelectorPtrOutputWithContext(context.Background())
}

func (o PlanSpecNodeSelectorOutput) ToPlanSpecNodeSelectorPtrOutputWithContext(ctx context.Context) PlanSpecNodeSelectorPtrOutput {
	return o.ApplyT(func(v PlanSpecNodeSelector) *PlanSpecNodeSelector {
		return &v
	}).(PlanSpecNodeSelectorPtrOutput)
}
func (o PlanSpecNodeSelectorOutput) MatchExpressions() PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v PlanSpecNodeSelector) []PlanSpecNodeSelectorMatchExpressions { return v.MatchExpressions }).(PlanSpecNodeSelectorMatchExpressionsArrayOutput)
}

func (o PlanSpecNodeSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PlanSpecNodeSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type PlanSpecNodeSelectorPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecNodeSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecNodeSelector)(nil)).Elem()
}

func (o PlanSpecNodeSelectorPtrOutput) ToPlanSpecNodeSelectorPtrOutput() PlanSpecNodeSelectorPtrOutput {
	return o
}

func (o PlanSpecNodeSelectorPtrOutput) ToPlanSpecNodeSelectorPtrOutputWithContext(ctx context.Context) PlanSpecNodeSelectorPtrOutput {
	return o
}

func (o PlanSpecNodeSelectorPtrOutput) Elem() PlanSpecNodeSelectorOutput {
	return o.ApplyT(func(v *PlanSpecNodeSelector) PlanSpecNodeSelector { return *v }).(PlanSpecNodeSelectorOutput)
}

func (o PlanSpecNodeSelectorPtrOutput) MatchExpressions() PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *PlanSpecNodeSelector) []PlanSpecNodeSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(PlanSpecNodeSelectorMatchExpressionsArrayOutput)
}

func (o PlanSpecNodeSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlanSpecNodeSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type PlanSpecNodeSelectorMatchExpressions struct {
	Key      *string  `pulumi:"key"`
	Operator *string  `pulumi:"operator"`
	Values   []string `pulumi:"values"`
}

// PlanSpecNodeSelectorMatchExpressionsInput is an input type that accepts PlanSpecNodeSelectorMatchExpressionsArgs and PlanSpecNodeSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `PlanSpecNodeSelectorMatchExpressionsInput` via:
//
//	PlanSpecNodeSelectorMatchExpressionsArgs{...}
type PlanSpecNodeSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToPlanSpecNodeSelectorMatchExpressionsOutput() PlanSpecNodeSelectorMatchExpressionsOutput
	ToPlanSpecNodeSelectorMatchExpressionsOutputWithContext(context.Context) PlanSpecNodeSelectorMatchExpressionsOutput
}

type PlanSpecNodeSelectorMatchExpressionsArgs struct {
	Key      pulumi.StringPtrInput   `pulumi:"key"`
	Operator pulumi.StringPtrInput   `pulumi:"operator"`
	Values   pulumi.StringArrayInput `pulumi:"values"`
}

func (PlanSpecNodeSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelectorMatchExpressions)(nil)).Elem()
}

func (i PlanSpecNodeSelectorMatchExpressionsArgs) ToPlanSpecNodeSelectorMatchExpressionsOutput() PlanSpecNodeSelectorMatchExpressionsOutput {
	return i.ToPlanSpecNodeSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i PlanSpecNodeSelectorMatchExpressionsArgs) ToPlanSpecNodeSelectorMatchExpressionsOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorMatchExpressionsOutput)
}

// PlanSpecNodeSelectorMatchExpressionsArrayInput is an input type that accepts PlanSpecNodeSelectorMatchExpressionsArray and PlanSpecNodeSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `PlanSpecNodeSelectorMatchExpressionsArrayInput` via:
//
//	PlanSpecNodeSelectorMatchExpressionsArray{ PlanSpecNodeSelectorMatchExpressionsArgs{...} }
type PlanSpecNodeSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToPlanSpecNodeSelectorMatchExpressionsArrayOutput() PlanSpecNodeSelectorMatchExpressionsArrayOutput
	ToPlanSpecNodeSelectorMatchExpressionsArrayOutputWithContext(context.Context) PlanSpecNodeSelectorMatchExpressionsArrayOutput
}

type PlanSpecNodeSelectorMatchExpressionsArray []PlanSpecNodeSelectorMatchExpressionsInput

func (PlanSpecNodeSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecNodeSelectorMatchExpressions)(nil)).Elem()
}

func (i PlanSpecNodeSelectorMatchExpressionsArray) ToPlanSpecNodeSelectorMatchExpressionsArrayOutput() PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return i.ToPlanSpecNodeSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i PlanSpecNodeSelectorMatchExpressionsArray) ToPlanSpecNodeSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorMatchExpressionsArrayOutput)
}

type PlanSpecNodeSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (PlanSpecNodeSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelectorMatchExpressions)(nil)).Elem()
}

func (o PlanSpecNodeSelectorMatchExpressionsOutput) ToPlanSpecNodeSelectorMatchExpressionsOutput() PlanSpecNodeSelectorMatchExpressionsOutput {
	return o
}

func (o PlanSpecNodeSelectorMatchExpressionsOutput) ToPlanSpecNodeSelectorMatchExpressionsOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchExpressionsOutput {
	return o
}

func (o PlanSpecNodeSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecNodeSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecNodeSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecNodeSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o PlanSpecNodeSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecNodeSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PlanSpecNodeSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecNodeSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecNodeSelectorMatchExpressions)(nil)).Elem()
}

func (o PlanSpecNodeSelectorMatchExpressionsArrayOutput) ToPlanSpecNodeSelectorMatchExpressionsArrayOutput() PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PlanSpecNodeSelectorMatchExpressionsArrayOutput) ToPlanSpecNodeSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchExpressionsArrayOutput {
	return o
}

func (o PlanSpecNodeSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) PlanSpecNodeSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecNodeSelectorMatchExpressions {
		return vs[0].([]PlanSpecNodeSelectorMatchExpressions)[vs[1].(int)]
	}).(PlanSpecNodeSelectorMatchExpressionsOutput)
}

type PlanSpecNodeSelectorMatchLabels struct {
}

// PlanSpecNodeSelectorMatchLabelsInput is an input type that accepts PlanSpecNodeSelectorMatchLabelsArgs and PlanSpecNodeSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `PlanSpecNodeSelectorMatchLabelsInput` via:
//
//	PlanSpecNodeSelectorMatchLabelsArgs{...}
type PlanSpecNodeSelectorMatchLabelsInput interface {
	pulumi.Input

	ToPlanSpecNodeSelectorMatchLabelsOutput() PlanSpecNodeSelectorMatchLabelsOutput
	ToPlanSpecNodeSelectorMatchLabelsOutputWithContext(context.Context) PlanSpecNodeSelectorMatchLabelsOutput
}

type PlanSpecNodeSelectorMatchLabelsArgs struct {
}

func (PlanSpecNodeSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelectorMatchLabels)(nil)).Elem()
}

func (i PlanSpecNodeSelectorMatchLabelsArgs) ToPlanSpecNodeSelectorMatchLabelsOutput() PlanSpecNodeSelectorMatchLabelsOutput {
	return i.ToPlanSpecNodeSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i PlanSpecNodeSelectorMatchLabelsArgs) ToPlanSpecNodeSelectorMatchLabelsOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecNodeSelectorMatchLabelsOutput)
}

type PlanSpecNodeSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (PlanSpecNodeSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecNodeSelectorMatchLabels)(nil)).Elem()
}

func (o PlanSpecNodeSelectorMatchLabelsOutput) ToPlanSpecNodeSelectorMatchLabelsOutput() PlanSpecNodeSelectorMatchLabelsOutput {
	return o
}

func (o PlanSpecNodeSelectorMatchLabelsOutput) ToPlanSpecNodeSelectorMatchLabelsOutputWithContext(ctx context.Context) PlanSpecNodeSelectorMatchLabelsOutput {
	return o
}

type PlanSpecPrepare struct {
	Args    []string                 `pulumi:"args"`
	Command []string                 `pulumi:"command"`
	EnvFrom []PlanSpecPrepareEnvFrom `pulumi:"envFrom"`
	Envs    []PlanSpecPrepareEnvs    `pulumi:"envs"`
	Image   *string                  `pulumi:"image"`
	Volumes []PlanSpecPrepareVolumes `pulumi:"volumes"`
}

// PlanSpecPrepareInput is an input type that accepts PlanSpecPrepareArgs and PlanSpecPrepareOutput values.
// You can construct a concrete instance of `PlanSpecPrepareInput` via:
//
//	PlanSpecPrepareArgs{...}
type PlanSpecPrepareInput interface {
	pulumi.Input

	ToPlanSpecPrepareOutput() PlanSpecPrepareOutput
	ToPlanSpecPrepareOutputWithContext(context.Context) PlanSpecPrepareOutput
}

type PlanSpecPrepareArgs struct {
	Args    pulumi.StringArrayInput          `pulumi:"args"`
	Command pulumi.StringArrayInput          `pulumi:"command"`
	EnvFrom PlanSpecPrepareEnvFromArrayInput `pulumi:"envFrom"`
	Envs    PlanSpecPrepareEnvsArrayInput    `pulumi:"envs"`
	Image   pulumi.StringPtrInput            `pulumi:"image"`
	Volumes PlanSpecPrepareVolumesArrayInput `pulumi:"volumes"`
}

func (PlanSpecPrepareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepare)(nil)).Elem()
}

func (i PlanSpecPrepareArgs) ToPlanSpecPrepareOutput() PlanSpecPrepareOutput {
	return i.ToPlanSpecPrepareOutputWithContext(context.Background())
}

func (i PlanSpecPrepareArgs) ToPlanSpecPrepareOutputWithContext(ctx context.Context) PlanSpecPrepareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareOutput)
}

func (i PlanSpecPrepareArgs) ToPlanSpecPreparePtrOutput() PlanSpecPreparePtrOutput {
	return i.ToPlanSpecPreparePtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareArgs) ToPlanSpecPreparePtrOutputWithContext(ctx context.Context) PlanSpecPreparePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareOutput).ToPlanSpecPreparePtrOutputWithContext(ctx)
}

// PlanSpecPreparePtrInput is an input type that accepts PlanSpecPrepareArgs, PlanSpecPreparePtr and PlanSpecPreparePtrOutput values.
// You can construct a concrete instance of `PlanSpecPreparePtrInput` via:
//
//	        PlanSpecPrepareArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPreparePtrInput interface {
	pulumi.Input

	ToPlanSpecPreparePtrOutput() PlanSpecPreparePtrOutput
	ToPlanSpecPreparePtrOutputWithContext(context.Context) PlanSpecPreparePtrOutput
}

type planSpecPreparePtrType PlanSpecPrepareArgs

func PlanSpecPreparePtr(v *PlanSpecPrepareArgs) PlanSpecPreparePtrInput {
	return (*planSpecPreparePtrType)(v)
}

func (*planSpecPreparePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepare)(nil)).Elem()
}

func (i *planSpecPreparePtrType) ToPlanSpecPreparePtrOutput() PlanSpecPreparePtrOutput {
	return i.ToPlanSpecPreparePtrOutputWithContext(context.Background())
}

func (i *planSpecPreparePtrType) ToPlanSpecPreparePtrOutputWithContext(ctx context.Context) PlanSpecPreparePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPreparePtrOutput)
}

type PlanSpecPrepareOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepare)(nil)).Elem()
}

func (o PlanSpecPrepareOutput) ToPlanSpecPrepareOutput() PlanSpecPrepareOutput {
	return o
}

func (o PlanSpecPrepareOutput) ToPlanSpecPrepareOutputWithContext(ctx context.Context) PlanSpecPrepareOutput {
	return o
}

func (o PlanSpecPrepareOutput) ToPlanSpecPreparePtrOutput() PlanSpecPreparePtrOutput {
	return o.ToPlanSpecPreparePtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareOutput) ToPlanSpecPreparePtrOutputWithContext(ctx context.Context) PlanSpecPreparePtrOutput {
	return o.ApplyT(func(v PlanSpecPrepare) *PlanSpecPrepare {
		return &v
	}).(PlanSpecPreparePtrOutput)
}
func (o PlanSpecPrepareOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecPrepare) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o PlanSpecPrepareOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecPrepare) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o PlanSpecPrepareOutput) EnvFrom() PlanSpecPrepareEnvFromArrayOutput {
	return o.ApplyT(func(v PlanSpecPrepare) []PlanSpecPrepareEnvFrom { return v.EnvFrom }).(PlanSpecPrepareEnvFromArrayOutput)
}

func (o PlanSpecPrepareOutput) Envs() PlanSpecPrepareEnvsArrayOutput {
	return o.ApplyT(func(v PlanSpecPrepare) []PlanSpecPrepareEnvs { return v.Envs }).(PlanSpecPrepareEnvsArrayOutput)
}

func (o PlanSpecPrepareOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepare) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareOutput) Volumes() PlanSpecPrepareVolumesArrayOutput {
	return o.ApplyT(func(v PlanSpecPrepare) []PlanSpecPrepareVolumes { return v.Volumes }).(PlanSpecPrepareVolumesArrayOutput)
}

type PlanSpecPreparePtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPreparePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepare)(nil)).Elem()
}

func (o PlanSpecPreparePtrOutput) ToPlanSpecPreparePtrOutput() PlanSpecPreparePtrOutput {
	return o
}

func (o PlanSpecPreparePtrOutput) ToPlanSpecPreparePtrOutputWithContext(ctx context.Context) PlanSpecPreparePtrOutput {
	return o
}

func (o PlanSpecPreparePtrOutput) Elem() PlanSpecPrepareOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) PlanSpecPrepare { return *v }).(PlanSpecPrepareOutput)
}

func (o PlanSpecPreparePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o PlanSpecPreparePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o PlanSpecPreparePtrOutput) EnvFrom() PlanSpecPrepareEnvFromArrayOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) []PlanSpecPrepareEnvFrom {
		if v == nil {
			return nil
		}
		return v.EnvFrom
	}).(PlanSpecPrepareEnvFromArrayOutput)
}

func (o PlanSpecPreparePtrOutput) Envs() PlanSpecPrepareEnvsArrayOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) []PlanSpecPrepareEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(PlanSpecPrepareEnvsArrayOutput)
}

func (o PlanSpecPreparePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPreparePtrOutput) Volumes() PlanSpecPrepareVolumesArrayOutput {
	return o.ApplyT(func(v *PlanSpecPrepare) []PlanSpecPrepareVolumes {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(PlanSpecPrepareVolumesArrayOutput)
}

type PlanSpecPrepareEnvFrom struct {
	ConfigMapRef *PlanSpecPrepareEnvFromConfigMapRef `pulumi:"configMapRef"`
	Prefix       *string                             `pulumi:"prefix"`
	SecretRef    *PlanSpecPrepareEnvFromSecretRef    `pulumi:"secretRef"`
}

// PlanSpecPrepareEnvFromInput is an input type that accepts PlanSpecPrepareEnvFromArgs and PlanSpecPrepareEnvFromOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromInput` via:
//
//	PlanSpecPrepareEnvFromArgs{...}
type PlanSpecPrepareEnvFromInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromOutput() PlanSpecPrepareEnvFromOutput
	ToPlanSpecPrepareEnvFromOutputWithContext(context.Context) PlanSpecPrepareEnvFromOutput
}

type PlanSpecPrepareEnvFromArgs struct {
	ConfigMapRef PlanSpecPrepareEnvFromConfigMapRefPtrInput `pulumi:"configMapRef"`
	Prefix       pulumi.StringPtrInput                      `pulumi:"prefix"`
	SecretRef    PlanSpecPrepareEnvFromSecretRefPtrInput    `pulumi:"secretRef"`
}

func (PlanSpecPrepareEnvFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFrom)(nil)).Elem()
}

func (i PlanSpecPrepareEnvFromArgs) ToPlanSpecPrepareEnvFromOutput() PlanSpecPrepareEnvFromOutput {
	return i.ToPlanSpecPrepareEnvFromOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromArgs) ToPlanSpecPrepareEnvFromOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromOutput)
}

// PlanSpecPrepareEnvFromArrayInput is an input type that accepts PlanSpecPrepareEnvFromArray and PlanSpecPrepareEnvFromArrayOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromArrayInput` via:
//
//	PlanSpecPrepareEnvFromArray{ PlanSpecPrepareEnvFromArgs{...} }
type PlanSpecPrepareEnvFromArrayInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromArrayOutput() PlanSpecPrepareEnvFromArrayOutput
	ToPlanSpecPrepareEnvFromArrayOutputWithContext(context.Context) PlanSpecPrepareEnvFromArrayOutput
}

type PlanSpecPrepareEnvFromArray []PlanSpecPrepareEnvFromInput

func (PlanSpecPrepareEnvFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareEnvFrom)(nil)).Elem()
}

func (i PlanSpecPrepareEnvFromArray) ToPlanSpecPrepareEnvFromArrayOutput() PlanSpecPrepareEnvFromArrayOutput {
	return i.ToPlanSpecPrepareEnvFromArrayOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromArray) ToPlanSpecPrepareEnvFromArrayOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromArrayOutput)
}

type PlanSpecPrepareEnvFromOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFrom)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromOutput) ToPlanSpecPrepareEnvFromOutput() PlanSpecPrepareEnvFromOutput {
	return o
}

func (o PlanSpecPrepareEnvFromOutput) ToPlanSpecPrepareEnvFromOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromOutput {
	return o
}

func (o PlanSpecPrepareEnvFromOutput) ConfigMapRef() PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFrom) *PlanSpecPrepareEnvFromConfigMapRef { return v.ConfigMapRef }).(PlanSpecPrepareEnvFromConfigMapRefPtrOutput)
}

func (o PlanSpecPrepareEnvFromOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFrom) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvFromOutput) SecretRef() PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFrom) *PlanSpecPrepareEnvFromSecretRef { return v.SecretRef }).(PlanSpecPrepareEnvFromSecretRefPtrOutput)
}

type PlanSpecPrepareEnvFromArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareEnvFrom)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromArrayOutput) ToPlanSpecPrepareEnvFromArrayOutput() PlanSpecPrepareEnvFromArrayOutput {
	return o
}

func (o PlanSpecPrepareEnvFromArrayOutput) ToPlanSpecPrepareEnvFromArrayOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromArrayOutput {
	return o
}

func (o PlanSpecPrepareEnvFromArrayOutput) Index(i pulumi.IntInput) PlanSpecPrepareEnvFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecPrepareEnvFrom {
		return vs[0].([]PlanSpecPrepareEnvFrom)[vs[1].(int)]
	}).(PlanSpecPrepareEnvFromOutput)
}

type PlanSpecPrepareEnvFromConfigMapRef struct {
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecPrepareEnvFromConfigMapRefInput is an input type that accepts PlanSpecPrepareEnvFromConfigMapRefArgs and PlanSpecPrepareEnvFromConfigMapRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromConfigMapRefInput` via:
//
//	PlanSpecPrepareEnvFromConfigMapRefArgs{...}
type PlanSpecPrepareEnvFromConfigMapRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromConfigMapRefOutput() PlanSpecPrepareEnvFromConfigMapRefOutput
	ToPlanSpecPrepareEnvFromConfigMapRefOutputWithContext(context.Context) PlanSpecPrepareEnvFromConfigMapRefOutput
}

type PlanSpecPrepareEnvFromConfigMapRefArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecPrepareEnvFromConfigMapRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFromConfigMapRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvFromConfigMapRefArgs) ToPlanSpecPrepareEnvFromConfigMapRefOutput() PlanSpecPrepareEnvFromConfigMapRefOutput {
	return i.ToPlanSpecPrepareEnvFromConfigMapRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromConfigMapRefArgs) ToPlanSpecPrepareEnvFromConfigMapRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromConfigMapRefOutput)
}

func (i PlanSpecPrepareEnvFromConfigMapRefArgs) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutput() PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return i.ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromConfigMapRefArgs) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromConfigMapRefOutput).ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvFromConfigMapRefPtrInput is an input type that accepts PlanSpecPrepareEnvFromConfigMapRefArgs, PlanSpecPrepareEnvFromConfigMapRefPtr and PlanSpecPrepareEnvFromConfigMapRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromConfigMapRefPtrInput` via:
//
//	        PlanSpecPrepareEnvFromConfigMapRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvFromConfigMapRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromConfigMapRefPtrOutput() PlanSpecPrepareEnvFromConfigMapRefPtrOutput
	ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvFromConfigMapRefPtrOutput
}

type planSpecPrepareEnvFromConfigMapRefPtrType PlanSpecPrepareEnvFromConfigMapRefArgs

func PlanSpecPrepareEnvFromConfigMapRefPtr(v *PlanSpecPrepareEnvFromConfigMapRefArgs) PlanSpecPrepareEnvFromConfigMapRefPtrInput {
	return (*planSpecPrepareEnvFromConfigMapRefPtrType)(v)
}

func (*planSpecPrepareEnvFromConfigMapRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvFromConfigMapRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvFromConfigMapRefPtrType) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutput() PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return i.ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvFromConfigMapRefPtrType) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromConfigMapRefPtrOutput)
}

type PlanSpecPrepareEnvFromConfigMapRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromConfigMapRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFromConfigMapRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromConfigMapRefOutput) ToPlanSpecPrepareEnvFromConfigMapRefOutput() PlanSpecPrepareEnvFromConfigMapRefOutput {
	return o
}

func (o PlanSpecPrepareEnvFromConfigMapRefOutput) ToPlanSpecPrepareEnvFromConfigMapRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefOutput {
	return o
}

func (o PlanSpecPrepareEnvFromConfigMapRefOutput) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutput() PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return o.ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvFromConfigMapRefOutput) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromConfigMapRef) *PlanSpecPrepareEnvFromConfigMapRef {
		return &v
	}).(PlanSpecPrepareEnvFromConfigMapRefPtrOutput)
}
func (o PlanSpecPrepareEnvFromConfigMapRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromConfigMapRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvFromConfigMapRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromConfigMapRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvFromConfigMapRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromConfigMapRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvFromConfigMapRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromConfigMapRefPtrOutput) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutput() PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvFromConfigMapRefPtrOutput) ToPlanSpecPrepareEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromConfigMapRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvFromConfigMapRefPtrOutput) Elem() PlanSpecPrepareEnvFromConfigMapRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromConfigMapRef) PlanSpecPrepareEnvFromConfigMapRef { return *v }).(PlanSpecPrepareEnvFromConfigMapRefOutput)
}

func (o PlanSpecPrepareEnvFromConfigMapRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromConfigMapRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvFromConfigMapRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromConfigMapRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvFromSecretRef struct {
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecPrepareEnvFromSecretRefInput is an input type that accepts PlanSpecPrepareEnvFromSecretRefArgs and PlanSpecPrepareEnvFromSecretRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromSecretRefInput` via:
//
//	PlanSpecPrepareEnvFromSecretRefArgs{...}
type PlanSpecPrepareEnvFromSecretRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromSecretRefOutput() PlanSpecPrepareEnvFromSecretRefOutput
	ToPlanSpecPrepareEnvFromSecretRefOutputWithContext(context.Context) PlanSpecPrepareEnvFromSecretRefOutput
}

type PlanSpecPrepareEnvFromSecretRefArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecPrepareEnvFromSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFromSecretRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvFromSecretRefArgs) ToPlanSpecPrepareEnvFromSecretRefOutput() PlanSpecPrepareEnvFromSecretRefOutput {
	return i.ToPlanSpecPrepareEnvFromSecretRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromSecretRefArgs) ToPlanSpecPrepareEnvFromSecretRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromSecretRefOutput)
}

func (i PlanSpecPrepareEnvFromSecretRefArgs) ToPlanSpecPrepareEnvFromSecretRefPtrOutput() PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return i.ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvFromSecretRefArgs) ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromSecretRefOutput).ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvFromSecretRefPtrInput is an input type that accepts PlanSpecPrepareEnvFromSecretRefArgs, PlanSpecPrepareEnvFromSecretRefPtr and PlanSpecPrepareEnvFromSecretRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvFromSecretRefPtrInput` via:
//
//	        PlanSpecPrepareEnvFromSecretRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvFromSecretRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvFromSecretRefPtrOutput() PlanSpecPrepareEnvFromSecretRefPtrOutput
	ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvFromSecretRefPtrOutput
}

type planSpecPrepareEnvFromSecretRefPtrType PlanSpecPrepareEnvFromSecretRefArgs

func PlanSpecPrepareEnvFromSecretRefPtr(v *PlanSpecPrepareEnvFromSecretRefArgs) PlanSpecPrepareEnvFromSecretRefPtrInput {
	return (*planSpecPrepareEnvFromSecretRefPtrType)(v)
}

func (*planSpecPrepareEnvFromSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvFromSecretRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvFromSecretRefPtrType) ToPlanSpecPrepareEnvFromSecretRefPtrOutput() PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return i.ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvFromSecretRefPtrType) ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvFromSecretRefPtrOutput)
}

type PlanSpecPrepareEnvFromSecretRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvFromSecretRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromSecretRefOutput) ToPlanSpecPrepareEnvFromSecretRefOutput() PlanSpecPrepareEnvFromSecretRefOutput {
	return o
}

func (o PlanSpecPrepareEnvFromSecretRefOutput) ToPlanSpecPrepareEnvFromSecretRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefOutput {
	return o
}

func (o PlanSpecPrepareEnvFromSecretRefOutput) ToPlanSpecPrepareEnvFromSecretRefPtrOutput() PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return o.ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvFromSecretRefOutput) ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromSecretRef) *PlanSpecPrepareEnvFromSecretRef {
		return &v
	}).(PlanSpecPrepareEnvFromSecretRefPtrOutput)
}
func (o PlanSpecPrepareEnvFromSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvFromSecretRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvFromSecretRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvFromSecretRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvFromSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvFromSecretRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvFromSecretRefPtrOutput) ToPlanSpecPrepareEnvFromSecretRefPtrOutput() PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvFromSecretRefPtrOutput) ToPlanSpecPrepareEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvFromSecretRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvFromSecretRefPtrOutput) Elem() PlanSpecPrepareEnvFromSecretRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromSecretRef) PlanSpecPrepareEnvFromSecretRef { return *v }).(PlanSpecPrepareEnvFromSecretRefOutput)
}

func (o PlanSpecPrepareEnvFromSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvFromSecretRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvFromSecretRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvs struct {
	Name      *string                       `pulumi:"name"`
	Value     *string                       `pulumi:"value"`
	ValueFrom *PlanSpecPrepareEnvsValueFrom `pulumi:"valueFrom"`
}

// PlanSpecPrepareEnvsInput is an input type that accepts PlanSpecPrepareEnvsArgs and PlanSpecPrepareEnvsOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsInput` via:
//
//	PlanSpecPrepareEnvsArgs{...}
type PlanSpecPrepareEnvsInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsOutput() PlanSpecPrepareEnvsOutput
	ToPlanSpecPrepareEnvsOutputWithContext(context.Context) PlanSpecPrepareEnvsOutput
}

type PlanSpecPrepareEnvsArgs struct {
	Name      pulumi.StringPtrInput                `pulumi:"name"`
	Value     pulumi.StringPtrInput                `pulumi:"value"`
	ValueFrom PlanSpecPrepareEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (PlanSpecPrepareEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvs)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsArgs) ToPlanSpecPrepareEnvsOutput() PlanSpecPrepareEnvsOutput {
	return i.ToPlanSpecPrepareEnvsOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsArgs) ToPlanSpecPrepareEnvsOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsOutput)
}

// PlanSpecPrepareEnvsArrayInput is an input type that accepts PlanSpecPrepareEnvsArray and PlanSpecPrepareEnvsArrayOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsArrayInput` via:
//
//	PlanSpecPrepareEnvsArray{ PlanSpecPrepareEnvsArgs{...} }
type PlanSpecPrepareEnvsArrayInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsArrayOutput() PlanSpecPrepareEnvsArrayOutput
	ToPlanSpecPrepareEnvsArrayOutputWithContext(context.Context) PlanSpecPrepareEnvsArrayOutput
}

type PlanSpecPrepareEnvsArray []PlanSpecPrepareEnvsInput

func (PlanSpecPrepareEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareEnvs)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsArray) ToPlanSpecPrepareEnvsArrayOutput() PlanSpecPrepareEnvsArrayOutput {
	return i.ToPlanSpecPrepareEnvsArrayOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsArray) ToPlanSpecPrepareEnvsArrayOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsArrayOutput)
}

type PlanSpecPrepareEnvsOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvs)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsOutput) ToPlanSpecPrepareEnvsOutput() PlanSpecPrepareEnvsOutput {
	return o
}

func (o PlanSpecPrepareEnvsOutput) ToPlanSpecPrepareEnvsOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsOutput {
	return o
}

func (o PlanSpecPrepareEnvsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsOutput) ValueFrom() PlanSpecPrepareEnvsValueFromPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvs) *PlanSpecPrepareEnvsValueFrom { return v.ValueFrom }).(PlanSpecPrepareEnvsValueFromPtrOutput)
}

type PlanSpecPrepareEnvsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareEnvs)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsArrayOutput) ToPlanSpecPrepareEnvsArrayOutput() PlanSpecPrepareEnvsArrayOutput {
	return o
}

func (o PlanSpecPrepareEnvsArrayOutput) ToPlanSpecPrepareEnvsArrayOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsArrayOutput {
	return o
}

func (o PlanSpecPrepareEnvsArrayOutput) Index(i pulumi.IntInput) PlanSpecPrepareEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecPrepareEnvs {
		return vs[0].([]PlanSpecPrepareEnvs)[vs[1].(int)]
	}).(PlanSpecPrepareEnvsOutput)
}

type PlanSpecPrepareEnvsValueFrom struct {
	ConfigMapKeyRef  *PlanSpecPrepareEnvsValueFromConfigMapKeyRef  `pulumi:"configMapKeyRef"`
	FieldRef         *PlanSpecPrepareEnvsValueFromFieldRef         `pulumi:"fieldRef"`
	ResourceFieldRef *PlanSpecPrepareEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	SecretKeyRef     *PlanSpecPrepareEnvsValueFromSecretKeyRef     `pulumi:"secretKeyRef"`
}

// PlanSpecPrepareEnvsValueFromInput is an input type that accepts PlanSpecPrepareEnvsValueFromArgs and PlanSpecPrepareEnvsValueFromOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromInput` via:
//
//	PlanSpecPrepareEnvsValueFromArgs{...}
type PlanSpecPrepareEnvsValueFromInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromOutput() PlanSpecPrepareEnvsValueFromOutput
	ToPlanSpecPrepareEnvsValueFromOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromOutput
}

type PlanSpecPrepareEnvsValueFromArgs struct {
	ConfigMapKeyRef  PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrInput  `pulumi:"configMapKeyRef"`
	FieldRef         PlanSpecPrepareEnvsValueFromFieldRefPtrInput         `pulumi:"fieldRef"`
	ResourceFieldRef PlanSpecPrepareEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	SecretKeyRef     PlanSpecPrepareEnvsValueFromSecretKeyRefPtrInput     `pulumi:"secretKeyRef"`
}

func (PlanSpecPrepareEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFrom)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsValueFromArgs) ToPlanSpecPrepareEnvsValueFromOutput() PlanSpecPrepareEnvsValueFromOutput {
	return i.ToPlanSpecPrepareEnvsValueFromOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromArgs) ToPlanSpecPrepareEnvsValueFromOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromOutput)
}

func (i PlanSpecPrepareEnvsValueFromArgs) ToPlanSpecPrepareEnvsValueFromPtrOutput() PlanSpecPrepareEnvsValueFromPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromArgs) ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromOutput).ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvsValueFromPtrInput is an input type that accepts PlanSpecPrepareEnvsValueFromArgs, PlanSpecPrepareEnvsValueFromPtr and PlanSpecPrepareEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromPtrInput` via:
//
//	        PlanSpecPrepareEnvsValueFromArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvsValueFromPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromPtrOutput() PlanSpecPrepareEnvsValueFromPtrOutput
	ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromPtrOutput
}

type planSpecPrepareEnvsValueFromPtrType PlanSpecPrepareEnvsValueFromArgs

func PlanSpecPrepareEnvsValueFromPtr(v *PlanSpecPrepareEnvsValueFromArgs) PlanSpecPrepareEnvsValueFromPtrInput {
	return (*planSpecPrepareEnvsValueFromPtrType)(v)
}

func (*planSpecPrepareEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFrom)(nil)).Elem()
}

func (i *planSpecPrepareEnvsValueFromPtrType) ToPlanSpecPrepareEnvsValueFromPtrOutput() PlanSpecPrepareEnvsValueFromPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvsValueFromPtrType) ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromPtrOutput)
}

type PlanSpecPrepareEnvsValueFromOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFrom)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromOutput) ToPlanSpecPrepareEnvsValueFromOutput() PlanSpecPrepareEnvsValueFromOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromOutput) ToPlanSpecPrepareEnvsValueFromOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromOutput) ToPlanSpecPrepareEnvsValueFromPtrOutput() PlanSpecPrepareEnvsValueFromPtrOutput {
	return o.ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvsValueFromOutput) ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFrom {
		return &v
	}).(PlanSpecPrepareEnvsValueFromPtrOutput)
}
func (o PlanSpecPrepareEnvsValueFromOutput) ConfigMapKeyRef() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromOutput) FieldRef() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromFieldRef { return v.FieldRef }).(PlanSpecPrepareEnvsValueFromFieldRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromOutput) ResourceFieldRef() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromOutput) SecretKeyRef() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromSecretKeyRef { return v.SecretKeyRef }).(PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFrom)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) ToPlanSpecPrepareEnvsValueFromPtrOutput() PlanSpecPrepareEnvsValueFromPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) ToPlanSpecPrepareEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) Elem() PlanSpecPrepareEnvsValueFromOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFrom) PlanSpecPrepareEnvsValueFrom { return *v }).(PlanSpecPrepareEnvsValueFromOutput)
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) ConfigMapKeyRef() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) FieldRef() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(PlanSpecPrepareEnvsValueFromFieldRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) ResourceFieldRef() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromPtrOutput) SecretKeyRef() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFrom) *PlanSpecPrepareEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromConfigMapKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecPrepareEnvsValueFromConfigMapKeyRefInput is an input type that accepts PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs and PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromConfigMapKeyRefInput` via:
//
//	PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs{...}
type PlanSpecPrepareEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput
	ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput
}

type PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput {
	return i.ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput)
}

func (i PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput).ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs, PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtr and PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//	        PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput
	ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput
}

type planSpecPrepareEnvsValueFromConfigMapKeyRefPtrType PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs

func PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtr(v *PlanSpecPrepareEnvsValueFromConfigMapKeyRefArgs) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrInput {
	return (*planSpecPrepareEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*planSpecPrepareEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvsValueFromConfigMapKeyRefPtrType) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvsValueFromConfigMapKeyRefPtrType) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *PlanSpecPrepareEnvsValueFromConfigMapKeyRef {
		return &v
	}).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput)
}
func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) ToPlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) Elem() PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromConfigMapKeyRef) PlanSpecPrepareEnvsValueFromConfigMapKeyRef {
		return *v
	}).(PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput)
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvsValueFromFieldRef struct {
	ApiVersion *string `pulumi:"apiVersion"`
	FieldPath  *string `pulumi:"fieldPath"`
}

// PlanSpecPrepareEnvsValueFromFieldRefInput is an input type that accepts PlanSpecPrepareEnvsValueFromFieldRefArgs and PlanSpecPrepareEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromFieldRefInput` via:
//
//	PlanSpecPrepareEnvsValueFromFieldRefArgs{...}
type PlanSpecPrepareEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromFieldRefOutput() PlanSpecPrepareEnvsValueFromFieldRefOutput
	ToPlanSpecPrepareEnvsValueFromFieldRefOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromFieldRefOutput
}

type PlanSpecPrepareEnvsValueFromFieldRefArgs struct {
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	FieldPath  pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (PlanSpecPrepareEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromFieldRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsValueFromFieldRefArgs) ToPlanSpecPrepareEnvsValueFromFieldRefOutput() PlanSpecPrepareEnvsValueFromFieldRefOutput {
	return i.ToPlanSpecPrepareEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromFieldRefArgs) ToPlanSpecPrepareEnvsValueFromFieldRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromFieldRefOutput)
}

func (i PlanSpecPrepareEnvsValueFromFieldRefArgs) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromFieldRefArgs) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromFieldRefOutput).ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvsValueFromFieldRefPtrInput is an input type that accepts PlanSpecPrepareEnvsValueFromFieldRefArgs, PlanSpecPrepareEnvsValueFromFieldRefPtr and PlanSpecPrepareEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromFieldRefPtrInput` via:
//
//	        PlanSpecPrepareEnvsValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput
	ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromFieldRefPtrOutput
}

type planSpecPrepareEnvsValueFromFieldRefPtrType PlanSpecPrepareEnvsValueFromFieldRefArgs

func PlanSpecPrepareEnvsValueFromFieldRefPtr(v *PlanSpecPrepareEnvsValueFromFieldRefArgs) PlanSpecPrepareEnvsValueFromFieldRefPtrInput {
	return (*planSpecPrepareEnvsValueFromFieldRefPtrType)(v)
}

func (*planSpecPrepareEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvsValueFromFieldRefPtrType) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvsValueFromFieldRefPtrType) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromFieldRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromFieldRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) ToPlanSpecPrepareEnvsValueFromFieldRefOutput() PlanSpecPrepareEnvsValueFromFieldRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) ToPlanSpecPrepareEnvsValueFromFieldRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o.ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromFieldRef) *PlanSpecPrepareEnvsValueFromFieldRef {
		return &v
	}).(PlanSpecPrepareEnvsValueFromFieldRefPtrOutput)
}
func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type PlanSpecPrepareEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromFieldRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) ToPlanSpecPrepareEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) Elem() PlanSpecPrepareEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromFieldRef) PlanSpecPrepareEnvsValueFromFieldRef { return *v }).(PlanSpecPrepareEnvsValueFromFieldRefOutput)
}

func (o PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

type PlanSpecPrepareEnvsValueFromResourceFieldRef struct {
	ContainerName *string `pulumi:"containerName"`
	Divisor       *string `pulumi:"divisor"`
	Resource      *string `pulumi:"resource"`
}

// PlanSpecPrepareEnvsValueFromResourceFieldRefInput is an input type that accepts PlanSpecPrepareEnvsValueFromResourceFieldRefArgs and PlanSpecPrepareEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromResourceFieldRefInput` via:
//
//	PlanSpecPrepareEnvsValueFromResourceFieldRefArgs{...}
type PlanSpecPrepareEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefOutput
	ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefOutput
}

type PlanSpecPrepareEnvsValueFromResourceFieldRefArgs struct {
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	Divisor       pulumi.StringPtrInput `pulumi:"divisor"`
	Resource      pulumi.StringPtrInput `pulumi:"resource"`
}

func (PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefOutput {
	return i.ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromResourceFieldRefOutput)
}

func (i PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromResourceFieldRefOutput).ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvsValueFromResourceFieldRefPtrInput is an input type that accepts PlanSpecPrepareEnvsValueFromResourceFieldRefArgs, PlanSpecPrepareEnvsValueFromResourceFieldRefPtr and PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromResourceFieldRefPtrInput` via:
//
//	        PlanSpecPrepareEnvsValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput
	ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput
}

type planSpecPrepareEnvsValueFromResourceFieldRefPtrType PlanSpecPrepareEnvsValueFromResourceFieldRefArgs

func PlanSpecPrepareEnvsValueFromResourceFieldRefPtr(v *PlanSpecPrepareEnvsValueFromResourceFieldRefArgs) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrInput {
	return (*planSpecPrepareEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*planSpecPrepareEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvsValueFromResourceFieldRefPtrType) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvsValueFromResourceFieldRefPtrType) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromResourceFieldRef) *PlanSpecPrepareEnvsValueFromResourceFieldRef {
		return &v
	}).(PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput)
}
func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromResourceFieldRef) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput() PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) ToPlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) Elem() PlanSpecPrepareEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromResourceFieldRef) PlanSpecPrepareEnvsValueFromResourceFieldRef {
		return *v
	}).(PlanSpecPrepareEnvsValueFromResourceFieldRefOutput)
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type PlanSpecPrepareEnvsValueFromSecretKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecPrepareEnvsValueFromSecretKeyRefInput is an input type that accepts PlanSpecPrepareEnvsValueFromSecretKeyRefArgs and PlanSpecPrepareEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromSecretKeyRefInput` via:
//
//	PlanSpecPrepareEnvsValueFromSecretKeyRefArgs{...}
type PlanSpecPrepareEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefOutput
	ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefOutput
}

type PlanSpecPrepareEnvsValueFromSecretKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefOutput {
	return i.ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromSecretKeyRefOutput)
}

func (i PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromSecretKeyRefOutput).ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// PlanSpecPrepareEnvsValueFromSecretKeyRefPtrInput is an input type that accepts PlanSpecPrepareEnvsValueFromSecretKeyRefArgs, PlanSpecPrepareEnvsValueFromSecretKeyRefPtr and PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecPrepareEnvsValueFromSecretKeyRefPtrInput` via:
//
//	        PlanSpecPrepareEnvsValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecPrepareEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput
	ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput
}

type planSpecPrepareEnvsValueFromSecretKeyRefPtrType PlanSpecPrepareEnvsValueFromSecretKeyRefArgs

func PlanSpecPrepareEnvsValueFromSecretKeyRefPtr(v *PlanSpecPrepareEnvsValueFromSecretKeyRefArgs) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrInput {
	return (*planSpecPrepareEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*planSpecPrepareEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *planSpecPrepareEnvsValueFromSecretKeyRefPtrType) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *planSpecPrepareEnvsValueFromSecretKeyRefPtrType) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecPrepareEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromSecretKeyRef) *PlanSpecPrepareEnvsValueFromSecretKeyRef {
		return &v
	}).(PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput)
}
func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromSecretKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecPrepareEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput() PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) ToPlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) Elem() PlanSpecPrepareEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromSecretKeyRef) PlanSpecPrepareEnvsValueFromSecretKeyRef { return *v }).(PlanSpecPrepareEnvsValueFromSecretKeyRefOutput)
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecPrepareEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecPrepareVolumes struct {
	Destination *string `pulumi:"destination"`
	Name        *string `pulumi:"name"`
	Source      *string `pulumi:"source"`
}

// PlanSpecPrepareVolumesInput is an input type that accepts PlanSpecPrepareVolumesArgs and PlanSpecPrepareVolumesOutput values.
// You can construct a concrete instance of `PlanSpecPrepareVolumesInput` via:
//
//	PlanSpecPrepareVolumesArgs{...}
type PlanSpecPrepareVolumesInput interface {
	pulumi.Input

	ToPlanSpecPrepareVolumesOutput() PlanSpecPrepareVolumesOutput
	ToPlanSpecPrepareVolumesOutputWithContext(context.Context) PlanSpecPrepareVolumesOutput
}

type PlanSpecPrepareVolumesArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
	Source      pulumi.StringPtrInput `pulumi:"source"`
}

func (PlanSpecPrepareVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareVolumes)(nil)).Elem()
}

func (i PlanSpecPrepareVolumesArgs) ToPlanSpecPrepareVolumesOutput() PlanSpecPrepareVolumesOutput {
	return i.ToPlanSpecPrepareVolumesOutputWithContext(context.Background())
}

func (i PlanSpecPrepareVolumesArgs) ToPlanSpecPrepareVolumesOutputWithContext(ctx context.Context) PlanSpecPrepareVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareVolumesOutput)
}

// PlanSpecPrepareVolumesArrayInput is an input type that accepts PlanSpecPrepareVolumesArray and PlanSpecPrepareVolumesArrayOutput values.
// You can construct a concrete instance of `PlanSpecPrepareVolumesArrayInput` via:
//
//	PlanSpecPrepareVolumesArray{ PlanSpecPrepareVolumesArgs{...} }
type PlanSpecPrepareVolumesArrayInput interface {
	pulumi.Input

	ToPlanSpecPrepareVolumesArrayOutput() PlanSpecPrepareVolumesArrayOutput
	ToPlanSpecPrepareVolumesArrayOutputWithContext(context.Context) PlanSpecPrepareVolumesArrayOutput
}

type PlanSpecPrepareVolumesArray []PlanSpecPrepareVolumesInput

func (PlanSpecPrepareVolumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareVolumes)(nil)).Elem()
}

func (i PlanSpecPrepareVolumesArray) ToPlanSpecPrepareVolumesArrayOutput() PlanSpecPrepareVolumesArrayOutput {
	return i.ToPlanSpecPrepareVolumesArrayOutputWithContext(context.Background())
}

func (i PlanSpecPrepareVolumesArray) ToPlanSpecPrepareVolumesArrayOutputWithContext(ctx context.Context) PlanSpecPrepareVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecPrepareVolumesArrayOutput)
}

type PlanSpecPrepareVolumesOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecPrepareVolumes)(nil)).Elem()
}

func (o PlanSpecPrepareVolumesOutput) ToPlanSpecPrepareVolumesOutput() PlanSpecPrepareVolumesOutput {
	return o
}

func (o PlanSpecPrepareVolumesOutput) ToPlanSpecPrepareVolumesOutputWithContext(ctx context.Context) PlanSpecPrepareVolumesOutput {
	return o
}

func (o PlanSpecPrepareVolumesOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareVolumes) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareVolumesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareVolumes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecPrepareVolumesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecPrepareVolumes) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type PlanSpecPrepareVolumesArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecPrepareVolumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecPrepareVolumes)(nil)).Elem()
}

func (o PlanSpecPrepareVolumesArrayOutput) ToPlanSpecPrepareVolumesArrayOutput() PlanSpecPrepareVolumesArrayOutput {
	return o
}

func (o PlanSpecPrepareVolumesArrayOutput) ToPlanSpecPrepareVolumesArrayOutputWithContext(ctx context.Context) PlanSpecPrepareVolumesArrayOutput {
	return o
}

func (o PlanSpecPrepareVolumesArrayOutput) Index(i pulumi.IntInput) PlanSpecPrepareVolumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecPrepareVolumes {
		return vs[0].([]PlanSpecPrepareVolumes)[vs[1].(int)]
	}).(PlanSpecPrepareVolumesOutput)
}

type PlanSpecSecrets struct {
	Name *string `pulumi:"name"`
	Path *string `pulumi:"path"`
}

// PlanSpecSecretsInput is an input type that accepts PlanSpecSecretsArgs and PlanSpecSecretsOutput values.
// You can construct a concrete instance of `PlanSpecSecretsInput` via:
//
//	PlanSpecSecretsArgs{...}
type PlanSpecSecretsInput interface {
	pulumi.Input

	ToPlanSpecSecretsOutput() PlanSpecSecretsOutput
	ToPlanSpecSecretsOutputWithContext(context.Context) PlanSpecSecretsOutput
}

type PlanSpecSecretsArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (PlanSpecSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecSecrets)(nil)).Elem()
}

func (i PlanSpecSecretsArgs) ToPlanSpecSecretsOutput() PlanSpecSecretsOutput {
	return i.ToPlanSpecSecretsOutputWithContext(context.Background())
}

func (i PlanSpecSecretsArgs) ToPlanSpecSecretsOutputWithContext(ctx context.Context) PlanSpecSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecSecretsOutput)
}

// PlanSpecSecretsArrayInput is an input type that accepts PlanSpecSecretsArray and PlanSpecSecretsArrayOutput values.
// You can construct a concrete instance of `PlanSpecSecretsArrayInput` via:
//
//	PlanSpecSecretsArray{ PlanSpecSecretsArgs{...} }
type PlanSpecSecretsArrayInput interface {
	pulumi.Input

	ToPlanSpecSecretsArrayOutput() PlanSpecSecretsArrayOutput
	ToPlanSpecSecretsArrayOutputWithContext(context.Context) PlanSpecSecretsArrayOutput
}

type PlanSpecSecretsArray []PlanSpecSecretsInput

func (PlanSpecSecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecSecrets)(nil)).Elem()
}

func (i PlanSpecSecretsArray) ToPlanSpecSecretsArrayOutput() PlanSpecSecretsArrayOutput {
	return i.ToPlanSpecSecretsArrayOutputWithContext(context.Background())
}

func (i PlanSpecSecretsArray) ToPlanSpecSecretsArrayOutputWithContext(ctx context.Context) PlanSpecSecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecSecretsArrayOutput)
}

type PlanSpecSecretsOutput struct{ *pulumi.OutputState }

func (PlanSpecSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecSecrets)(nil)).Elem()
}

func (o PlanSpecSecretsOutput) ToPlanSpecSecretsOutput() PlanSpecSecretsOutput {
	return o
}

func (o PlanSpecSecretsOutput) ToPlanSpecSecretsOutputWithContext(ctx context.Context) PlanSpecSecretsOutput {
	return o
}

func (o PlanSpecSecretsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecSecrets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecSecretsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecSecrets) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type PlanSpecSecretsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecSecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecSecrets)(nil)).Elem()
}

func (o PlanSpecSecretsArrayOutput) ToPlanSpecSecretsArrayOutput() PlanSpecSecretsArrayOutput {
	return o
}

func (o PlanSpecSecretsArrayOutput) ToPlanSpecSecretsArrayOutputWithContext(ctx context.Context) PlanSpecSecretsArrayOutput {
	return o
}

func (o PlanSpecSecretsArrayOutput) Index(i pulumi.IntInput) PlanSpecSecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecSecrets {
		return vs[0].([]PlanSpecSecrets)[vs[1].(int)]
	}).(PlanSpecSecretsOutput)
}

type PlanSpecTolerations struct {
	Effect            *string `pulumi:"effect"`
	Key               *string `pulumi:"key"`
	Operator          *string `pulumi:"operator"`
	TolerationSeconds *int    `pulumi:"tolerationSeconds"`
	Value             *string `pulumi:"value"`
}

// PlanSpecTolerationsInput is an input type that accepts PlanSpecTolerationsArgs and PlanSpecTolerationsOutput values.
// You can construct a concrete instance of `PlanSpecTolerationsInput` via:
//
//	PlanSpecTolerationsArgs{...}
type PlanSpecTolerationsInput interface {
	pulumi.Input

	ToPlanSpecTolerationsOutput() PlanSpecTolerationsOutput
	ToPlanSpecTolerationsOutputWithContext(context.Context) PlanSpecTolerationsOutput
}

type PlanSpecTolerationsArgs struct {
	Effect            pulumi.StringPtrInput `pulumi:"effect"`
	Key               pulumi.StringPtrInput `pulumi:"key"`
	Operator          pulumi.StringPtrInput `pulumi:"operator"`
	TolerationSeconds pulumi.IntPtrInput    `pulumi:"tolerationSeconds"`
	Value             pulumi.StringPtrInput `pulumi:"value"`
}

func (PlanSpecTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecTolerations)(nil)).Elem()
}

func (i PlanSpecTolerationsArgs) ToPlanSpecTolerationsOutput() PlanSpecTolerationsOutput {
	return i.ToPlanSpecTolerationsOutputWithContext(context.Background())
}

func (i PlanSpecTolerationsArgs) ToPlanSpecTolerationsOutputWithContext(ctx context.Context) PlanSpecTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecTolerationsOutput)
}

// PlanSpecTolerationsArrayInput is an input type that accepts PlanSpecTolerationsArray and PlanSpecTolerationsArrayOutput values.
// You can construct a concrete instance of `PlanSpecTolerationsArrayInput` via:
//
//	PlanSpecTolerationsArray{ PlanSpecTolerationsArgs{...} }
type PlanSpecTolerationsArrayInput interface {
	pulumi.Input

	ToPlanSpecTolerationsArrayOutput() PlanSpecTolerationsArrayOutput
	ToPlanSpecTolerationsArrayOutputWithContext(context.Context) PlanSpecTolerationsArrayOutput
}

type PlanSpecTolerationsArray []PlanSpecTolerationsInput

func (PlanSpecTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecTolerations)(nil)).Elem()
}

func (i PlanSpecTolerationsArray) ToPlanSpecTolerationsArrayOutput() PlanSpecTolerationsArrayOutput {
	return i.ToPlanSpecTolerationsArrayOutputWithContext(context.Background())
}

func (i PlanSpecTolerationsArray) ToPlanSpecTolerationsArrayOutputWithContext(ctx context.Context) PlanSpecTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecTolerationsArrayOutput)
}

type PlanSpecTolerationsOutput struct{ *pulumi.OutputState }

func (PlanSpecTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecTolerations)(nil)).Elem()
}

func (o PlanSpecTolerationsOutput) ToPlanSpecTolerationsOutput() PlanSpecTolerationsOutput {
	return o
}

func (o PlanSpecTolerationsOutput) ToPlanSpecTolerationsOutputWithContext(ctx context.Context) PlanSpecTolerationsOutput {
	return o
}

func (o PlanSpecTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

func (o PlanSpecTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o PlanSpecTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlanSpecTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

func (o PlanSpecTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlanSpecTolerationsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecTolerations)(nil)).Elem()
}

func (o PlanSpecTolerationsArrayOutput) ToPlanSpecTolerationsArrayOutput() PlanSpecTolerationsArrayOutput {
	return o
}

func (o PlanSpecTolerationsArrayOutput) ToPlanSpecTolerationsArrayOutputWithContext(ctx context.Context) PlanSpecTolerationsArrayOutput {
	return o
}

func (o PlanSpecTolerationsArrayOutput) Index(i pulumi.IntInput) PlanSpecTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecTolerations {
		return vs[0].([]PlanSpecTolerations)[vs[1].(int)]
	}).(PlanSpecTolerationsOutput)
}

type PlanSpecUpgrade struct {
	Args    []string                 `pulumi:"args"`
	Command []string                 `pulumi:"command"`
	EnvFrom []PlanSpecUpgradeEnvFrom `pulumi:"envFrom"`
	Envs    []PlanSpecUpgradeEnvs    `pulumi:"envs"`
	Image   *string                  `pulumi:"image"`
	Volumes []PlanSpecUpgradeVolumes `pulumi:"volumes"`
}

// PlanSpecUpgradeInput is an input type that accepts PlanSpecUpgradeArgs and PlanSpecUpgradeOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeInput` via:
//
//	PlanSpecUpgradeArgs{...}
type PlanSpecUpgradeInput interface {
	pulumi.Input

	ToPlanSpecUpgradeOutput() PlanSpecUpgradeOutput
	ToPlanSpecUpgradeOutputWithContext(context.Context) PlanSpecUpgradeOutput
}

type PlanSpecUpgradeArgs struct {
	Args    pulumi.StringArrayInput          `pulumi:"args"`
	Command pulumi.StringArrayInput          `pulumi:"command"`
	EnvFrom PlanSpecUpgradeEnvFromArrayInput `pulumi:"envFrom"`
	Envs    PlanSpecUpgradeEnvsArrayInput    `pulumi:"envs"`
	Image   pulumi.StringPtrInput            `pulumi:"image"`
	Volumes PlanSpecUpgradeVolumesArrayInput `pulumi:"volumes"`
}

func (PlanSpecUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgrade)(nil)).Elem()
}

func (i PlanSpecUpgradeArgs) ToPlanSpecUpgradeOutput() PlanSpecUpgradeOutput {
	return i.ToPlanSpecUpgradeOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeArgs) ToPlanSpecUpgradeOutputWithContext(ctx context.Context) PlanSpecUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeOutput)
}

func (i PlanSpecUpgradeArgs) ToPlanSpecUpgradePtrOutput() PlanSpecUpgradePtrOutput {
	return i.ToPlanSpecUpgradePtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeArgs) ToPlanSpecUpgradePtrOutputWithContext(ctx context.Context) PlanSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeOutput).ToPlanSpecUpgradePtrOutputWithContext(ctx)
}

// PlanSpecUpgradePtrInput is an input type that accepts PlanSpecUpgradeArgs, PlanSpecUpgradePtr and PlanSpecUpgradePtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradePtrInput` via:
//
//	        PlanSpecUpgradeArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradePtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradePtrOutput() PlanSpecUpgradePtrOutput
	ToPlanSpecUpgradePtrOutputWithContext(context.Context) PlanSpecUpgradePtrOutput
}

type planSpecUpgradePtrType PlanSpecUpgradeArgs

func PlanSpecUpgradePtr(v *PlanSpecUpgradeArgs) PlanSpecUpgradePtrInput {
	return (*planSpecUpgradePtrType)(v)
}

func (*planSpecUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgrade)(nil)).Elem()
}

func (i *planSpecUpgradePtrType) ToPlanSpecUpgradePtrOutput() PlanSpecUpgradePtrOutput {
	return i.ToPlanSpecUpgradePtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradePtrType) ToPlanSpecUpgradePtrOutputWithContext(ctx context.Context) PlanSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradePtrOutput)
}

type PlanSpecUpgradeOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgrade)(nil)).Elem()
}

func (o PlanSpecUpgradeOutput) ToPlanSpecUpgradeOutput() PlanSpecUpgradeOutput {
	return o
}

func (o PlanSpecUpgradeOutput) ToPlanSpecUpgradeOutputWithContext(ctx context.Context) PlanSpecUpgradeOutput {
	return o
}

func (o PlanSpecUpgradeOutput) ToPlanSpecUpgradePtrOutput() PlanSpecUpgradePtrOutput {
	return o.ToPlanSpecUpgradePtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeOutput) ToPlanSpecUpgradePtrOutputWithContext(ctx context.Context) PlanSpecUpgradePtrOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) *PlanSpecUpgrade {
		return &v
	}).(PlanSpecUpgradePtrOutput)
}
func (o PlanSpecUpgradeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o PlanSpecUpgradeOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o PlanSpecUpgradeOutput) EnvFrom() PlanSpecUpgradeEnvFromArrayOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) []PlanSpecUpgradeEnvFrom { return v.EnvFrom }).(PlanSpecUpgradeEnvFromArrayOutput)
}

func (o PlanSpecUpgradeOutput) Envs() PlanSpecUpgradeEnvsArrayOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) []PlanSpecUpgradeEnvs { return v.Envs }).(PlanSpecUpgradeEnvsArrayOutput)
}

func (o PlanSpecUpgradeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeOutput) Volumes() PlanSpecUpgradeVolumesArrayOutput {
	return o.ApplyT(func(v PlanSpecUpgrade) []PlanSpecUpgradeVolumes { return v.Volumes }).(PlanSpecUpgradeVolumesArrayOutput)
}

type PlanSpecUpgradePtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgrade)(nil)).Elem()
}

func (o PlanSpecUpgradePtrOutput) ToPlanSpecUpgradePtrOutput() PlanSpecUpgradePtrOutput {
	return o
}

func (o PlanSpecUpgradePtrOutput) ToPlanSpecUpgradePtrOutputWithContext(ctx context.Context) PlanSpecUpgradePtrOutput {
	return o
}

func (o PlanSpecUpgradePtrOutput) Elem() PlanSpecUpgradeOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) PlanSpecUpgrade { return *v }).(PlanSpecUpgradeOutput)
}

func (o PlanSpecUpgradePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o PlanSpecUpgradePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o PlanSpecUpgradePtrOutput) EnvFrom() PlanSpecUpgradeEnvFromArrayOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) []PlanSpecUpgradeEnvFrom {
		if v == nil {
			return nil
		}
		return v.EnvFrom
	}).(PlanSpecUpgradeEnvFromArrayOutput)
}

func (o PlanSpecUpgradePtrOutput) Envs() PlanSpecUpgradeEnvsArrayOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) []PlanSpecUpgradeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(PlanSpecUpgradeEnvsArrayOutput)
}

func (o PlanSpecUpgradePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradePtrOutput) Volumes() PlanSpecUpgradeVolumesArrayOutput {
	return o.ApplyT(func(v *PlanSpecUpgrade) []PlanSpecUpgradeVolumes {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(PlanSpecUpgradeVolumesArrayOutput)
}

type PlanSpecUpgradeEnvFrom struct {
	ConfigMapRef *PlanSpecUpgradeEnvFromConfigMapRef `pulumi:"configMapRef"`
	Prefix       *string                             `pulumi:"prefix"`
	SecretRef    *PlanSpecUpgradeEnvFromSecretRef    `pulumi:"secretRef"`
}

// PlanSpecUpgradeEnvFromInput is an input type that accepts PlanSpecUpgradeEnvFromArgs and PlanSpecUpgradeEnvFromOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromInput` via:
//
//	PlanSpecUpgradeEnvFromArgs{...}
type PlanSpecUpgradeEnvFromInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromOutput() PlanSpecUpgradeEnvFromOutput
	ToPlanSpecUpgradeEnvFromOutputWithContext(context.Context) PlanSpecUpgradeEnvFromOutput
}

type PlanSpecUpgradeEnvFromArgs struct {
	ConfigMapRef PlanSpecUpgradeEnvFromConfigMapRefPtrInput `pulumi:"configMapRef"`
	Prefix       pulumi.StringPtrInput                      `pulumi:"prefix"`
	SecretRef    PlanSpecUpgradeEnvFromSecretRefPtrInput    `pulumi:"secretRef"`
}

func (PlanSpecUpgradeEnvFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFrom)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvFromArgs) ToPlanSpecUpgradeEnvFromOutput() PlanSpecUpgradeEnvFromOutput {
	return i.ToPlanSpecUpgradeEnvFromOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromArgs) ToPlanSpecUpgradeEnvFromOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromOutput)
}

// PlanSpecUpgradeEnvFromArrayInput is an input type that accepts PlanSpecUpgradeEnvFromArray and PlanSpecUpgradeEnvFromArrayOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromArrayInput` via:
//
//	PlanSpecUpgradeEnvFromArray{ PlanSpecUpgradeEnvFromArgs{...} }
type PlanSpecUpgradeEnvFromArrayInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromArrayOutput() PlanSpecUpgradeEnvFromArrayOutput
	ToPlanSpecUpgradeEnvFromArrayOutputWithContext(context.Context) PlanSpecUpgradeEnvFromArrayOutput
}

type PlanSpecUpgradeEnvFromArray []PlanSpecUpgradeEnvFromInput

func (PlanSpecUpgradeEnvFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeEnvFrom)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvFromArray) ToPlanSpecUpgradeEnvFromArrayOutput() PlanSpecUpgradeEnvFromArrayOutput {
	return i.ToPlanSpecUpgradeEnvFromArrayOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromArray) ToPlanSpecUpgradeEnvFromArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromArrayOutput)
}

type PlanSpecUpgradeEnvFromOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFrom)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromOutput) ToPlanSpecUpgradeEnvFromOutput() PlanSpecUpgradeEnvFromOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromOutput) ToPlanSpecUpgradeEnvFromOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromOutput) ConfigMapRef() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFrom) *PlanSpecUpgradeEnvFromConfigMapRef { return v.ConfigMapRef }).(PlanSpecUpgradeEnvFromConfigMapRefPtrOutput)
}

func (o PlanSpecUpgradeEnvFromOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFrom) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvFromOutput) SecretRef() PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFrom) *PlanSpecUpgradeEnvFromSecretRef { return v.SecretRef }).(PlanSpecUpgradeEnvFromSecretRefPtrOutput)
}

type PlanSpecUpgradeEnvFromArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeEnvFrom)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromArrayOutput) ToPlanSpecUpgradeEnvFromArrayOutput() PlanSpecUpgradeEnvFromArrayOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromArrayOutput) ToPlanSpecUpgradeEnvFromArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromArrayOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromArrayOutput) Index(i pulumi.IntInput) PlanSpecUpgradeEnvFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecUpgradeEnvFrom {
		return vs[0].([]PlanSpecUpgradeEnvFrom)[vs[1].(int)]
	}).(PlanSpecUpgradeEnvFromOutput)
}

type PlanSpecUpgradeEnvFromConfigMapRef struct {
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecUpgradeEnvFromConfigMapRefInput is an input type that accepts PlanSpecUpgradeEnvFromConfigMapRefArgs and PlanSpecUpgradeEnvFromConfigMapRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromConfigMapRefInput` via:
//
//	PlanSpecUpgradeEnvFromConfigMapRefArgs{...}
type PlanSpecUpgradeEnvFromConfigMapRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromConfigMapRefOutput() PlanSpecUpgradeEnvFromConfigMapRefOutput
	ToPlanSpecUpgradeEnvFromConfigMapRefOutputWithContext(context.Context) PlanSpecUpgradeEnvFromConfigMapRefOutput
}

type PlanSpecUpgradeEnvFromConfigMapRefArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecUpgradeEnvFromConfigMapRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFromConfigMapRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvFromConfigMapRefArgs) ToPlanSpecUpgradeEnvFromConfigMapRefOutput() PlanSpecUpgradeEnvFromConfigMapRefOutput {
	return i.ToPlanSpecUpgradeEnvFromConfigMapRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromConfigMapRefArgs) ToPlanSpecUpgradeEnvFromConfigMapRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromConfigMapRefOutput)
}

func (i PlanSpecUpgradeEnvFromConfigMapRefArgs) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutput() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromConfigMapRefArgs) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromConfigMapRefOutput).ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvFromConfigMapRefPtrInput is an input type that accepts PlanSpecUpgradeEnvFromConfigMapRefArgs, PlanSpecUpgradeEnvFromConfigMapRefPtr and PlanSpecUpgradeEnvFromConfigMapRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromConfigMapRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvFromConfigMapRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvFromConfigMapRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutput() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput
	ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvFromConfigMapRefPtrOutput
}

type planSpecUpgradeEnvFromConfigMapRefPtrType PlanSpecUpgradeEnvFromConfigMapRefArgs

func PlanSpecUpgradeEnvFromConfigMapRefPtr(v *PlanSpecUpgradeEnvFromConfigMapRefArgs) PlanSpecUpgradeEnvFromConfigMapRefPtrInput {
	return (*planSpecUpgradeEnvFromConfigMapRefPtrType)(v)
}

func (*planSpecUpgradeEnvFromConfigMapRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvFromConfigMapRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvFromConfigMapRefPtrType) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutput() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvFromConfigMapRefPtrType) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromConfigMapRefPtrOutput)
}

type PlanSpecUpgradeEnvFromConfigMapRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromConfigMapRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFromConfigMapRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) ToPlanSpecUpgradeEnvFromConfigMapRefOutput() PlanSpecUpgradeEnvFromConfigMapRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) ToPlanSpecUpgradeEnvFromConfigMapRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutput() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromConfigMapRef) *PlanSpecUpgradeEnvFromConfigMapRef {
		return &v
	}).(PlanSpecUpgradeEnvFromConfigMapRefPtrOutput)
}
func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromConfigMapRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvFromConfigMapRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromConfigMapRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvFromConfigMapRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvFromConfigMapRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutput() PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) ToPlanSpecUpgradeEnvFromConfigMapRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromConfigMapRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) Elem() PlanSpecUpgradeEnvFromConfigMapRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromConfigMapRef) PlanSpecUpgradeEnvFromConfigMapRef { return *v }).(PlanSpecUpgradeEnvFromConfigMapRefOutput)
}

func (o PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromConfigMapRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvFromConfigMapRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromConfigMapRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvFromSecretRef struct {
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecUpgradeEnvFromSecretRefInput is an input type that accepts PlanSpecUpgradeEnvFromSecretRefArgs and PlanSpecUpgradeEnvFromSecretRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromSecretRefInput` via:
//
//	PlanSpecUpgradeEnvFromSecretRefArgs{...}
type PlanSpecUpgradeEnvFromSecretRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromSecretRefOutput() PlanSpecUpgradeEnvFromSecretRefOutput
	ToPlanSpecUpgradeEnvFromSecretRefOutputWithContext(context.Context) PlanSpecUpgradeEnvFromSecretRefOutput
}

type PlanSpecUpgradeEnvFromSecretRefArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecUpgradeEnvFromSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFromSecretRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvFromSecretRefArgs) ToPlanSpecUpgradeEnvFromSecretRefOutput() PlanSpecUpgradeEnvFromSecretRefOutput {
	return i.ToPlanSpecUpgradeEnvFromSecretRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromSecretRefArgs) ToPlanSpecUpgradeEnvFromSecretRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromSecretRefOutput)
}

func (i PlanSpecUpgradeEnvFromSecretRefArgs) ToPlanSpecUpgradeEnvFromSecretRefPtrOutput() PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvFromSecretRefArgs) ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromSecretRefOutput).ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvFromSecretRefPtrInput is an input type that accepts PlanSpecUpgradeEnvFromSecretRefArgs, PlanSpecUpgradeEnvFromSecretRefPtr and PlanSpecUpgradeEnvFromSecretRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvFromSecretRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvFromSecretRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvFromSecretRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvFromSecretRefPtrOutput() PlanSpecUpgradeEnvFromSecretRefPtrOutput
	ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvFromSecretRefPtrOutput
}

type planSpecUpgradeEnvFromSecretRefPtrType PlanSpecUpgradeEnvFromSecretRefArgs

func PlanSpecUpgradeEnvFromSecretRefPtr(v *PlanSpecUpgradeEnvFromSecretRefArgs) PlanSpecUpgradeEnvFromSecretRefPtrInput {
	return (*planSpecUpgradeEnvFromSecretRefPtrType)(v)
}

func (*planSpecUpgradeEnvFromSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvFromSecretRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvFromSecretRefPtrType) ToPlanSpecUpgradeEnvFromSecretRefPtrOutput() PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvFromSecretRefPtrType) ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvFromSecretRefPtrOutput)
}

type PlanSpecUpgradeEnvFromSecretRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvFromSecretRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromSecretRefOutput) ToPlanSpecUpgradeEnvFromSecretRefOutput() PlanSpecUpgradeEnvFromSecretRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromSecretRefOutput) ToPlanSpecUpgradeEnvFromSecretRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromSecretRefOutput) ToPlanSpecUpgradeEnvFromSecretRefPtrOutput() PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvFromSecretRefOutput) ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromSecretRef) *PlanSpecUpgradeEnvFromSecretRef {
		return &v
	}).(PlanSpecUpgradeEnvFromSecretRefPtrOutput)
}
func (o PlanSpecUpgradeEnvFromSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvFromSecretRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvFromSecretRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvFromSecretRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvFromSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvFromSecretRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvFromSecretRefPtrOutput) ToPlanSpecUpgradeEnvFromSecretRefPtrOutput() PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromSecretRefPtrOutput) ToPlanSpecUpgradeEnvFromSecretRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvFromSecretRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvFromSecretRefPtrOutput) Elem() PlanSpecUpgradeEnvFromSecretRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromSecretRef) PlanSpecUpgradeEnvFromSecretRef { return *v }).(PlanSpecUpgradeEnvFromSecretRefOutput)
}

func (o PlanSpecUpgradeEnvFromSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvFromSecretRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvFromSecretRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvs struct {
	Name      *string                       `pulumi:"name"`
	Value     *string                       `pulumi:"value"`
	ValueFrom *PlanSpecUpgradeEnvsValueFrom `pulumi:"valueFrom"`
}

// PlanSpecUpgradeEnvsInput is an input type that accepts PlanSpecUpgradeEnvsArgs and PlanSpecUpgradeEnvsOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsInput` via:
//
//	PlanSpecUpgradeEnvsArgs{...}
type PlanSpecUpgradeEnvsInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsOutput() PlanSpecUpgradeEnvsOutput
	ToPlanSpecUpgradeEnvsOutputWithContext(context.Context) PlanSpecUpgradeEnvsOutput
}

type PlanSpecUpgradeEnvsArgs struct {
	Name      pulumi.StringPtrInput                `pulumi:"name"`
	Value     pulumi.StringPtrInput                `pulumi:"value"`
	ValueFrom PlanSpecUpgradeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (PlanSpecUpgradeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvs)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsArgs) ToPlanSpecUpgradeEnvsOutput() PlanSpecUpgradeEnvsOutput {
	return i.ToPlanSpecUpgradeEnvsOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsArgs) ToPlanSpecUpgradeEnvsOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsOutput)
}

// PlanSpecUpgradeEnvsArrayInput is an input type that accepts PlanSpecUpgradeEnvsArray and PlanSpecUpgradeEnvsArrayOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsArrayInput` via:
//
//	PlanSpecUpgradeEnvsArray{ PlanSpecUpgradeEnvsArgs{...} }
type PlanSpecUpgradeEnvsArrayInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsArrayOutput() PlanSpecUpgradeEnvsArrayOutput
	ToPlanSpecUpgradeEnvsArrayOutputWithContext(context.Context) PlanSpecUpgradeEnvsArrayOutput
}

type PlanSpecUpgradeEnvsArray []PlanSpecUpgradeEnvsInput

func (PlanSpecUpgradeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeEnvs)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsArray) ToPlanSpecUpgradeEnvsArrayOutput() PlanSpecUpgradeEnvsArrayOutput {
	return i.ToPlanSpecUpgradeEnvsArrayOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsArray) ToPlanSpecUpgradeEnvsArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsArrayOutput)
}

type PlanSpecUpgradeEnvsOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvs)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsOutput) ToPlanSpecUpgradeEnvsOutput() PlanSpecUpgradeEnvsOutput {
	return o
}

func (o PlanSpecUpgradeEnvsOutput) ToPlanSpecUpgradeEnvsOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsOutput {
	return o
}

func (o PlanSpecUpgradeEnvsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsOutput) ValueFrom() PlanSpecUpgradeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvs) *PlanSpecUpgradeEnvsValueFrom { return v.ValueFrom }).(PlanSpecUpgradeEnvsValueFromPtrOutput)
}

type PlanSpecUpgradeEnvsArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeEnvs)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsArrayOutput) ToPlanSpecUpgradeEnvsArrayOutput() PlanSpecUpgradeEnvsArrayOutput {
	return o
}

func (o PlanSpecUpgradeEnvsArrayOutput) ToPlanSpecUpgradeEnvsArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsArrayOutput {
	return o
}

func (o PlanSpecUpgradeEnvsArrayOutput) Index(i pulumi.IntInput) PlanSpecUpgradeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecUpgradeEnvs {
		return vs[0].([]PlanSpecUpgradeEnvs)[vs[1].(int)]
	}).(PlanSpecUpgradeEnvsOutput)
}

type PlanSpecUpgradeEnvsValueFrom struct {
	ConfigMapKeyRef  *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef  `pulumi:"configMapKeyRef"`
	FieldRef         *PlanSpecUpgradeEnvsValueFromFieldRef         `pulumi:"fieldRef"`
	ResourceFieldRef *PlanSpecUpgradeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	SecretKeyRef     *PlanSpecUpgradeEnvsValueFromSecretKeyRef     `pulumi:"secretKeyRef"`
}

// PlanSpecUpgradeEnvsValueFromInput is an input type that accepts PlanSpecUpgradeEnvsValueFromArgs and PlanSpecUpgradeEnvsValueFromOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromInput` via:
//
//	PlanSpecUpgradeEnvsValueFromArgs{...}
type PlanSpecUpgradeEnvsValueFromInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromOutput() PlanSpecUpgradeEnvsValueFromOutput
	ToPlanSpecUpgradeEnvsValueFromOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromOutput
}

type PlanSpecUpgradeEnvsValueFromArgs struct {
	ConfigMapKeyRef  PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrInput  `pulumi:"configMapKeyRef"`
	FieldRef         PlanSpecUpgradeEnvsValueFromFieldRefPtrInput         `pulumi:"fieldRef"`
	ResourceFieldRef PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	SecretKeyRef     PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrInput     `pulumi:"secretKeyRef"`
}

func (PlanSpecUpgradeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFrom)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsValueFromArgs) ToPlanSpecUpgradeEnvsValueFromOutput() PlanSpecUpgradeEnvsValueFromOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromArgs) ToPlanSpecUpgradeEnvsValueFromOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromOutput)
}

func (i PlanSpecUpgradeEnvsValueFromArgs) ToPlanSpecUpgradeEnvsValueFromPtrOutput() PlanSpecUpgradeEnvsValueFromPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromArgs) ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromOutput).ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvsValueFromPtrInput is an input type that accepts PlanSpecUpgradeEnvsValueFromArgs, PlanSpecUpgradeEnvsValueFromPtr and PlanSpecUpgradeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromPtrInput` via:
//
//	        PlanSpecUpgradeEnvsValueFromArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromPtrOutput() PlanSpecUpgradeEnvsValueFromPtrOutput
	ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromPtrOutput
}

type planSpecUpgradeEnvsValueFromPtrType PlanSpecUpgradeEnvsValueFromArgs

func PlanSpecUpgradeEnvsValueFromPtr(v *PlanSpecUpgradeEnvsValueFromArgs) PlanSpecUpgradeEnvsValueFromPtrInput {
	return (*planSpecUpgradeEnvsValueFromPtrType)(v)
}

func (*planSpecUpgradeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFrom)(nil)).Elem()
}

func (i *planSpecUpgradeEnvsValueFromPtrType) ToPlanSpecUpgradeEnvsValueFromPtrOutput() PlanSpecUpgradeEnvsValueFromPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvsValueFromPtrType) ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFrom)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromOutput) ToPlanSpecUpgradeEnvsValueFromOutput() PlanSpecUpgradeEnvsValueFromOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromOutput) ToPlanSpecUpgradeEnvsValueFromOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromOutput) ToPlanSpecUpgradeEnvsValueFromPtrOutput() PlanSpecUpgradeEnvsValueFromPtrOutput {
	return o.ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvsValueFromOutput) ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFrom {
		return &v
	}).(PlanSpecUpgradeEnvsValueFromPtrOutput)
}
func (o PlanSpecUpgradeEnvsValueFromOutput) ConfigMapKeyRef() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromOutput) FieldRef() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromFieldRef { return v.FieldRef }).(PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromOutput) ResourceFieldRef() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromOutput) SecretKeyRef() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromSecretKeyRef { return v.SecretKeyRef }).(PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFrom)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) ToPlanSpecUpgradeEnvsValueFromPtrOutput() PlanSpecUpgradeEnvsValueFromPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) ToPlanSpecUpgradeEnvsValueFromPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) Elem() PlanSpecUpgradeEnvsValueFromOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFrom) PlanSpecUpgradeEnvsValueFrom { return *v }).(PlanSpecUpgradeEnvsValueFromOutput)
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) ConfigMapKeyRef() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) FieldRef() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) ResourceFieldRef() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromPtrOutput) SecretKeyRef() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFrom) *PlanSpecUpgradeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromConfigMapKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecUpgradeEnvsValueFromConfigMapKeyRefInput is an input type that accepts PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs and PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromConfigMapKeyRefInput` via:
//
//	PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs{...}
type PlanSpecUpgradeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput
	ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput
}

type PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput)
}

func (i PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput).ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs, PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtr and PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput
	ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput
}

type planSpecUpgradeEnvsValueFromConfigMapKeyRefPtrType PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs

func PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtr(v *PlanSpecUpgradeEnvsValueFromConfigMapKeyRefArgs) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*planSpecUpgradeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*planSpecUpgradeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvsValueFromConfigMapKeyRefPtrType) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvsValueFromConfigMapKeyRefPtrType) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput)
}
func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) PlanSpecUpgradeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput)
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromFieldRef struct {
	ApiVersion *string `pulumi:"apiVersion"`
	FieldPath  *string `pulumi:"fieldPath"`
}

// PlanSpecUpgradeEnvsValueFromFieldRefInput is an input type that accepts PlanSpecUpgradeEnvsValueFromFieldRefArgs and PlanSpecUpgradeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromFieldRefInput` via:
//
//	PlanSpecUpgradeEnvsValueFromFieldRefArgs{...}
type PlanSpecUpgradeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromFieldRefOutput() PlanSpecUpgradeEnvsValueFromFieldRefOutput
	ToPlanSpecUpgradeEnvsValueFromFieldRefOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromFieldRefOutput
}

type PlanSpecUpgradeEnvsValueFromFieldRefArgs struct {
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	FieldPath  pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (PlanSpecUpgradeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsValueFromFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromFieldRefOutput() PlanSpecUpgradeEnvsValueFromFieldRefOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromFieldRefOutput)
}

func (i PlanSpecUpgradeEnvsValueFromFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromFieldRefOutput).ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvsValueFromFieldRefPtrInput is an input type that accepts PlanSpecUpgradeEnvsValueFromFieldRefArgs, PlanSpecUpgradeEnvsValueFromFieldRefPtr and PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromFieldRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvsValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput
	ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput
}

type planSpecUpgradeEnvsValueFromFieldRefPtrType PlanSpecUpgradeEnvsValueFromFieldRefArgs

func PlanSpecUpgradeEnvsValueFromFieldRefPtr(v *PlanSpecUpgradeEnvsValueFromFieldRefArgs) PlanSpecUpgradeEnvsValueFromFieldRefPtrInput {
	return (*planSpecUpgradeEnvsValueFromFieldRefPtrType)(v)
}

func (*planSpecUpgradeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvsValueFromFieldRefPtrType) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvsValueFromFieldRefPtrType) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefOutput() PlanSpecUpgradeEnvsValueFromFieldRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromFieldRef) *PlanSpecUpgradeEnvsValueFromFieldRef {
		return &v
	}).(PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput)
}
func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) Elem() PlanSpecUpgradeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromFieldRef) PlanSpecUpgradeEnvsValueFromFieldRef { return *v }).(PlanSpecUpgradeEnvsValueFromFieldRefOutput)
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromResourceFieldRef struct {
	ContainerName *string `pulumi:"containerName"`
	Divisor       *string `pulumi:"divisor"`
	Resource      *string `pulumi:"resource"`
}

// PlanSpecUpgradeEnvsValueFromResourceFieldRefInput is an input type that accepts PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs and PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromResourceFieldRefInput` via:
//
//	PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs{...}
type PlanSpecUpgradeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput
	ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput
}

type PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs struct {
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	Divisor       pulumi.StringPtrInput `pulumi:"divisor"`
	Resource      pulumi.StringPtrInput `pulumi:"resource"`
}

func (PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput)
}

func (i PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput).ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs, PlanSpecUpgradeEnvsValueFromResourceFieldRefPtr and PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput
	ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput
}

type planSpecUpgradeEnvsValueFromResourceFieldRefPtrType PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs

func PlanSpecUpgradeEnvsValueFromResourceFieldRefPtr(v *PlanSpecUpgradeEnvsValueFromResourceFieldRefArgs) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrInput {
	return (*planSpecUpgradeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*planSpecUpgradeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvsValueFromResourceFieldRefPtrType) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvsValueFromResourceFieldRefPtrType) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromResourceFieldRef) *PlanSpecUpgradeEnvsValueFromResourceFieldRef {
		return &v
	}).(PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput)
}
func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput() PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) Elem() PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromResourceFieldRef) PlanSpecUpgradeEnvsValueFromResourceFieldRef {
		return *v
	}).(PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput)
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromSecretKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// PlanSpecUpgradeEnvsValueFromSecretKeyRefInput is an input type that accepts PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs and PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromSecretKeyRefInput` via:
//
//	PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs{...}
type PlanSpecUpgradeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput
	ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput
}

type PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput)
}

func (i PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput).ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs, PlanSpecUpgradeEnvsValueFromSecretKeyRefPtr and PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrInput` via:
//
//	        PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput
	ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput
}

type planSpecUpgradeEnvsValueFromSecretKeyRefPtrType PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs

func PlanSpecUpgradeEnvsValueFromSecretKeyRefPtr(v *PlanSpecUpgradeEnvsValueFromSecretKeyRefArgs) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrInput {
	return (*planSpecUpgradeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*planSpecUpgradeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *planSpecUpgradeEnvsValueFromSecretKeyRefPtrType) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *planSpecUpgradeEnvsValueFromSecretKeyRefPtrType) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromSecretKeyRef) *PlanSpecUpgradeEnvsValueFromSecretKeyRef {
		return &v
	}).(PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput)
}
func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromSecretKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanSpecUpgradeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput() PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) ToPlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) Elem() PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromSecretKeyRef) PlanSpecUpgradeEnvsValueFromSecretKeyRef { return *v }).(PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput)
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlanSpecUpgradeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

type PlanSpecUpgradeVolumes struct {
	Destination *string `pulumi:"destination"`
	Name        *string `pulumi:"name"`
	Source      *string `pulumi:"source"`
}

// PlanSpecUpgradeVolumesInput is an input type that accepts PlanSpecUpgradeVolumesArgs and PlanSpecUpgradeVolumesOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeVolumesInput` via:
//
//	PlanSpecUpgradeVolumesArgs{...}
type PlanSpecUpgradeVolumesInput interface {
	pulumi.Input

	ToPlanSpecUpgradeVolumesOutput() PlanSpecUpgradeVolumesOutput
	ToPlanSpecUpgradeVolumesOutputWithContext(context.Context) PlanSpecUpgradeVolumesOutput
}

type PlanSpecUpgradeVolumesArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
	Source      pulumi.StringPtrInput `pulumi:"source"`
}

func (PlanSpecUpgradeVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeVolumes)(nil)).Elem()
}

func (i PlanSpecUpgradeVolumesArgs) ToPlanSpecUpgradeVolumesOutput() PlanSpecUpgradeVolumesOutput {
	return i.ToPlanSpecUpgradeVolumesOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeVolumesArgs) ToPlanSpecUpgradeVolumesOutputWithContext(ctx context.Context) PlanSpecUpgradeVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeVolumesOutput)
}

// PlanSpecUpgradeVolumesArrayInput is an input type that accepts PlanSpecUpgradeVolumesArray and PlanSpecUpgradeVolumesArrayOutput values.
// You can construct a concrete instance of `PlanSpecUpgradeVolumesArrayInput` via:
//
//	PlanSpecUpgradeVolumesArray{ PlanSpecUpgradeVolumesArgs{...} }
type PlanSpecUpgradeVolumesArrayInput interface {
	pulumi.Input

	ToPlanSpecUpgradeVolumesArrayOutput() PlanSpecUpgradeVolumesArrayOutput
	ToPlanSpecUpgradeVolumesArrayOutputWithContext(context.Context) PlanSpecUpgradeVolumesArrayOutput
}

type PlanSpecUpgradeVolumesArray []PlanSpecUpgradeVolumesInput

func (PlanSpecUpgradeVolumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeVolumes)(nil)).Elem()
}

func (i PlanSpecUpgradeVolumesArray) ToPlanSpecUpgradeVolumesArrayOutput() PlanSpecUpgradeVolumesArrayOutput {
	return i.ToPlanSpecUpgradeVolumesArrayOutputWithContext(context.Background())
}

func (i PlanSpecUpgradeVolumesArray) ToPlanSpecUpgradeVolumesArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanSpecUpgradeVolumesArrayOutput)
}

type PlanSpecUpgradeVolumesOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanSpecUpgradeVolumes)(nil)).Elem()
}

func (o PlanSpecUpgradeVolumesOutput) ToPlanSpecUpgradeVolumesOutput() PlanSpecUpgradeVolumesOutput {
	return o
}

func (o PlanSpecUpgradeVolumesOutput) ToPlanSpecUpgradeVolumesOutputWithContext(ctx context.Context) PlanSpecUpgradeVolumesOutput {
	return o
}

func (o PlanSpecUpgradeVolumesOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeVolumes) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeVolumesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeVolumes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PlanSpecUpgradeVolumesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanSpecUpgradeVolumes) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type PlanSpecUpgradeVolumesArrayOutput struct{ *pulumi.OutputState }

func (PlanSpecUpgradeVolumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanSpecUpgradeVolumes)(nil)).Elem()
}

func (o PlanSpecUpgradeVolumesArrayOutput) ToPlanSpecUpgradeVolumesArrayOutput() PlanSpecUpgradeVolumesArrayOutput {
	return o
}

func (o PlanSpecUpgradeVolumesArrayOutput) ToPlanSpecUpgradeVolumesArrayOutputWithContext(ctx context.Context) PlanSpecUpgradeVolumesArrayOutput {
	return o
}

func (o PlanSpecUpgradeVolumesArrayOutput) Index(i pulumi.IntInput) PlanSpecUpgradeVolumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanSpecUpgradeVolumes {
		return vs[0].([]PlanSpecUpgradeVolumes)[vs[1].(int)]
	}).(PlanSpecUpgradeVolumesOutput)
}

type PlanStatus struct {
	Applying      []string               `pulumi:"applying"`
	Conditions    []PlanStatusConditions `pulumi:"conditions"`
	LatestHash    *string                `pulumi:"latestHash"`
	LatestVersion *string                `pulumi:"latestVersion"`
}

// PlanStatusInput is an input type that accepts PlanStatusArgs and PlanStatusOutput values.
// You can construct a concrete instance of `PlanStatusInput` via:
//
//	PlanStatusArgs{...}
type PlanStatusInput interface {
	pulumi.Input

	ToPlanStatusOutput() PlanStatusOutput
	ToPlanStatusOutputWithContext(context.Context) PlanStatusOutput
}

type PlanStatusArgs struct {
	Applying      pulumi.StringArrayInput        `pulumi:"applying"`
	Conditions    PlanStatusConditionsArrayInput `pulumi:"conditions"`
	LatestHash    pulumi.StringPtrInput          `pulumi:"latestHash"`
	LatestVersion pulumi.StringPtrInput          `pulumi:"latestVersion"`
}

func (PlanStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStatus)(nil)).Elem()
}

func (i PlanStatusArgs) ToPlanStatusOutput() PlanStatusOutput {
	return i.ToPlanStatusOutputWithContext(context.Background())
}

func (i PlanStatusArgs) ToPlanStatusOutputWithContext(ctx context.Context) PlanStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStatusOutput)
}

func (i PlanStatusArgs) ToPlanStatusPtrOutput() PlanStatusPtrOutput {
	return i.ToPlanStatusPtrOutputWithContext(context.Background())
}

func (i PlanStatusArgs) ToPlanStatusPtrOutputWithContext(ctx context.Context) PlanStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStatusOutput).ToPlanStatusPtrOutputWithContext(ctx)
}

// PlanStatusPtrInput is an input type that accepts PlanStatusArgs, PlanStatusPtr and PlanStatusPtrOutput values.
// You can construct a concrete instance of `PlanStatusPtrInput` via:
//
//	        PlanStatusArgs{...}
//
//	or:
//
//	        nil
type PlanStatusPtrInput interface {
	pulumi.Input

	ToPlanStatusPtrOutput() PlanStatusPtrOutput
	ToPlanStatusPtrOutputWithContext(context.Context) PlanStatusPtrOutput
}

type planStatusPtrType PlanStatusArgs

func PlanStatusPtr(v *PlanStatusArgs) PlanStatusPtrInput {
	return (*planStatusPtrType)(v)
}

func (*planStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanStatus)(nil)).Elem()
}

func (i *planStatusPtrType) ToPlanStatusPtrOutput() PlanStatusPtrOutput {
	return i.ToPlanStatusPtrOutputWithContext(context.Background())
}

func (i *planStatusPtrType) ToPlanStatusPtrOutputWithContext(ctx context.Context) PlanStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStatusPtrOutput)
}

type PlanStatusOutput struct{ *pulumi.OutputState }

func (PlanStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStatus)(nil)).Elem()
}

func (o PlanStatusOutput) ToPlanStatusOutput() PlanStatusOutput {
	return o
}

func (o PlanStatusOutput) ToPlanStatusOutputWithContext(ctx context.Context) PlanStatusOutput {
	return o
}

func (o PlanStatusOutput) ToPlanStatusPtrOutput() PlanStatusPtrOutput {
	return o.ToPlanStatusPtrOutputWithContext(context.Background())
}

func (o PlanStatusOutput) ToPlanStatusPtrOutputWithContext(ctx context.Context) PlanStatusPtrOutput {
	return o.ApplyT(func(v PlanStatus) *PlanStatus {
		return &v
	}).(PlanStatusPtrOutput)
}
func (o PlanStatusOutput) Applying() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlanStatus) []string { return v.Applying }).(pulumi.StringArrayOutput)
}

func (o PlanStatusOutput) Conditions() PlanStatusConditionsArrayOutput {
	return o.ApplyT(func(v PlanStatus) []PlanStatusConditions { return v.Conditions }).(PlanStatusConditionsArrayOutput)
}

func (o PlanStatusOutput) LatestHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatus) *string { return v.LatestHash }).(pulumi.StringPtrOutput)
}

func (o PlanStatusOutput) LatestVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatus) *string { return v.LatestVersion }).(pulumi.StringPtrOutput)
}

type PlanStatusPtrOutput struct{ *pulumi.OutputState }

func (PlanStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanStatus)(nil)).Elem()
}

func (o PlanStatusPtrOutput) ToPlanStatusPtrOutput() PlanStatusPtrOutput {
	return o
}

func (o PlanStatusPtrOutput) ToPlanStatusPtrOutputWithContext(ctx context.Context) PlanStatusPtrOutput {
	return o
}

func (o PlanStatusPtrOutput) Elem() PlanStatusOutput {
	return o.ApplyT(func(v *PlanStatus) PlanStatus { return *v }).(PlanStatusOutput)
}

func (o PlanStatusPtrOutput) Applying() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlanStatus) []string {
		if v == nil {
			return nil
		}
		return v.Applying
	}).(pulumi.StringArrayOutput)
}

func (o PlanStatusPtrOutput) Conditions() PlanStatusConditionsArrayOutput {
	return o.ApplyT(func(v *PlanStatus) []PlanStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PlanStatusConditionsArrayOutput)
}

func (o PlanStatusPtrOutput) LatestHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestHash
	}).(pulumi.StringPtrOutput)
}

func (o PlanStatusPtrOutput) LatestVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestVersion
	}).(pulumi.StringPtrOutput)
}

type PlanStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	LastUpdateTime     *string `pulumi:"lastUpdateTime"`
	Message            *string `pulumi:"message"`
	Reason             *string `pulumi:"reason"`
	Status             *string `pulumi:"status"`
	Type               *string `pulumi:"type"`
}

// PlanStatusConditionsInput is an input type that accepts PlanStatusConditionsArgs and PlanStatusConditionsOutput values.
// You can construct a concrete instance of `PlanStatusConditionsInput` via:
//
//	PlanStatusConditionsArgs{...}
type PlanStatusConditionsInput interface {
	pulumi.Input

	ToPlanStatusConditionsOutput() PlanStatusConditionsOutput
	ToPlanStatusConditionsOutputWithContext(context.Context) PlanStatusConditionsOutput
}

type PlanStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	LastUpdateTime     pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Reason             pulumi.StringPtrInput `pulumi:"reason"`
	Status             pulumi.StringPtrInput `pulumi:"status"`
	Type               pulumi.StringPtrInput `pulumi:"type"`
}

func (PlanStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStatusConditions)(nil)).Elem()
}

func (i PlanStatusConditionsArgs) ToPlanStatusConditionsOutput() PlanStatusConditionsOutput {
	return i.ToPlanStatusConditionsOutputWithContext(context.Background())
}

func (i PlanStatusConditionsArgs) ToPlanStatusConditionsOutputWithContext(ctx context.Context) PlanStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStatusConditionsOutput)
}

// PlanStatusConditionsArrayInput is an input type that accepts PlanStatusConditionsArray and PlanStatusConditionsArrayOutput values.
// You can construct a concrete instance of `PlanStatusConditionsArrayInput` via:
//
//	PlanStatusConditionsArray{ PlanStatusConditionsArgs{...} }
type PlanStatusConditionsArrayInput interface {
	pulumi.Input

	ToPlanStatusConditionsArrayOutput() PlanStatusConditionsArrayOutput
	ToPlanStatusConditionsArrayOutputWithContext(context.Context) PlanStatusConditionsArrayOutput
}

type PlanStatusConditionsArray []PlanStatusConditionsInput

func (PlanStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStatusConditions)(nil)).Elem()
}

func (i PlanStatusConditionsArray) ToPlanStatusConditionsArrayOutput() PlanStatusConditionsArrayOutput {
	return i.ToPlanStatusConditionsArrayOutputWithContext(context.Background())
}

func (i PlanStatusConditionsArray) ToPlanStatusConditionsArrayOutputWithContext(ctx context.Context) PlanStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanStatusConditionsArrayOutput)
}

type PlanStatusConditionsOutput struct{ *pulumi.OutputState }

func (PlanStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanStatusConditions)(nil)).Elem()
}

func (o PlanStatusConditionsOutput) ToPlanStatusConditionsOutput() PlanStatusConditionsOutput {
	return o
}

func (o PlanStatusConditionsOutput) ToPlanStatusConditionsOutputWithContext(ctx context.Context) PlanStatusConditionsOutput {
	return o
}

func (o PlanStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o PlanStatusConditionsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

func (o PlanStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o PlanStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o PlanStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o PlanStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PlanStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (PlanStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlanStatusConditions)(nil)).Elem()
}

func (o PlanStatusConditionsArrayOutput) ToPlanStatusConditionsArrayOutput() PlanStatusConditionsArrayOutput {
	return o
}

func (o PlanStatusConditionsArrayOutput) ToPlanStatusConditionsArrayOutputWithContext(ctx context.Context) PlanStatusConditionsArrayOutput {
	return o
}

func (o PlanStatusConditionsArrayOutput) Index(i pulumi.IntInput) PlanStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlanStatusConditions {
		return vs[0].([]PlanStatusConditions)[vs[1].(int)]
	}).(PlanStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(PlanTypeOutput{})
	pulumi.RegisterOutputType(PlanSpecOutput{})
	pulumi.RegisterOutputType(PlanSpecPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPodSelectorOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPodSelectorPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPodSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPodSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecDrainPodSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(PlanSpecNodeSelectorOutput{})
	pulumi.RegisterOutputType(PlanSpecNodeSelectorPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecNodeSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(PlanSpecNodeSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecNodeSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareOutput{})
	pulumi.RegisterOutputType(PlanSpecPreparePtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromConfigMapRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromConfigMapRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromSecretRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvFromSecretRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareVolumesOutput{})
	pulumi.RegisterOutputType(PlanSpecPrepareVolumesArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecSecretsOutput{})
	pulumi.RegisterOutputType(PlanSpecSecretsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecTolerationsOutput{})
	pulumi.RegisterOutputType(PlanSpecTolerationsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradePtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromConfigMapRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromConfigMapRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromSecretRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvFromSecretRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsArrayOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeVolumesOutput{})
	pulumi.RegisterOutputType(PlanSpecUpgradeVolumesArrayOutput{})
	pulumi.RegisterOutputType(PlanStatusOutput{})
	pulumi.RegisterOutputType(PlanStatusPtrOutput{})
	pulumi.RegisterOutputType(PlanStatusConditionsOutput{})
	pulumi.RegisterOutputType(PlanStatusConditionsArrayOutput{})
}
