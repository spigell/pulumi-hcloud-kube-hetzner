// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/spigell/pulumi-hcloud-kube-hetzner/pulumi-component/sdk/go/hcloud-kube-hetzner/internal"
)

var _ = internal.GetEnvOrDefault

type AddonsConfig struct {
	// CCM defines configuration [hetzner-cloud-controller-manager](https://github.com/hetznercloud/hcloud-cloud-controller-manager).
	CCM *CcmConfig `pulumi:"CCM"`
	// K3SSystemUpgrader defines configuration for [system-upgrade-controller](https://github.com/rancher/system-upgrade-controller).
	K3SSystemUpgrader *K3supgraderConfig `pulumi:"K3SSystemUpgrader"`
}

// AddonsConfigInput is an input type that accepts AddonsConfigArgs and AddonsConfigOutput values.
// You can construct a concrete instance of `AddonsConfigInput` via:
//
//	AddonsConfigArgs{...}
type AddonsConfigInput interface {
	pulumi.Input

	ToAddonsConfigOutput() AddonsConfigOutput
	ToAddonsConfigOutputWithContext(context.Context) AddonsConfigOutput
}

type AddonsConfigArgs struct {
	// CCM defines configuration [hetzner-cloud-controller-manager](https://github.com/hetznercloud/hcloud-cloud-controller-manager).
	CCM CcmConfigPtrInput `pulumi:"CCM"`
	// K3SSystemUpgrader defines configuration for [system-upgrade-controller](https://github.com/rancher/system-upgrade-controller).
	K3SSystemUpgrader K3supgraderConfigPtrInput `pulumi:"K3SSystemUpgrader"`
}

func (AddonsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (i AddonsConfigArgs) ToAddonsConfigOutput() AddonsConfigOutput {
	return i.ToAddonsConfigOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput)
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput).ToAddonsConfigPtrOutputWithContext(ctx)
}

// AddonsConfigPtrInput is an input type that accepts AddonsConfigArgs, AddonsConfigPtr and AddonsConfigPtrOutput values.
// You can construct a concrete instance of `AddonsConfigPtrInput` via:
//
//	        AddonsConfigArgs{...}
//
//	or:
//
//	        nil
type AddonsConfigPtrInput interface {
	pulumi.Input

	ToAddonsConfigPtrOutput() AddonsConfigPtrOutput
	ToAddonsConfigPtrOutputWithContext(context.Context) AddonsConfigPtrOutput
}

type addonsConfigPtrType AddonsConfigArgs

func AddonsConfigPtr(v *AddonsConfigArgs) AddonsConfigPtrInput {
	return (*addonsConfigPtrType)(v)
}

func (*addonsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigPtrOutput)
}

type AddonsConfigOutput struct{ *pulumi.OutputState }

func (AddonsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigOutput) ToAddonsConfigOutput() AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddonsConfig) *AddonsConfig {
		return &v
	}).(AddonsConfigPtrOutput)
}

// CCM defines configuration [hetzner-cloud-controller-manager](https://github.com/hetznercloud/hcloud-cloud-controller-manager).
func (o AddonsConfigOutput) CCM() CcmConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *CcmConfig { return v.CCM }).(CcmConfigPtrOutput)
}

// K3SSystemUpgrader defines configuration for [system-upgrade-controller](https://github.com/rancher/system-upgrade-controller).
func (o AddonsConfigOutput) K3SSystemUpgrader() K3supgraderConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *K3supgraderConfig { return v.K3SSystemUpgrader }).(K3supgraderConfigPtrOutput)
}

type AddonsConfigPtrOutput struct{ *pulumi.OutputState }

func (AddonsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) Elem() AddonsConfigOutput {
	return o.ApplyT(func(v *AddonsConfig) AddonsConfig {
		if v != nil {
			return *v
		}
		var ret AddonsConfig
		return ret
	}).(AddonsConfigOutput)
}

// CCM defines configuration [hetzner-cloud-controller-manager](https://github.com/hetznercloud/hcloud-cloud-controller-manager).
func (o AddonsConfigPtrOutput) CCM() CcmConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *CcmConfig {
		if v == nil {
			return nil
		}
		return v.CCM
	}).(CcmConfigPtrOutput)
}

// K3SSystemUpgrader defines configuration for [system-upgrade-controller](https://github.com/rancher/system-upgrade-controller).
func (o AddonsConfigPtrOutput) K3SSystemUpgrader() K3supgraderConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *K3supgraderConfig {
		if v == nil {
			return nil
		}
		return v.K3SSystemUpgrader
	}).(K3supgraderConfigPtrOutput)
}

type AuditAuditLogConfig struct {
	// AuditLogMaxAge defines the maximum number of days to retain old audit log files. Default is 10.
	AuditLogMaxAge *float64 `pulumi:"AuditLogMaxAge"`
	// AuditLogMaxBackup specifies the maximum number of audit log files to retain. Default is 30.
	AuditLogMaxBackup *float64 `pulumi:"AuditLogMaxBackup"`
	// AuditLogMaxSize specifies the maximum size in megabytes of the audit log file before it gets rotated. Default is 100.
	AuditLogMaxSize *float64 `pulumi:"AuditLogMaxSize"`
	// Enabled specifies if the audit log is enabled. If nil, it might default to a cluster-level setting. Default is true.
	Enabled *bool `pulumi:"Enabled"`
	// PolicyFilePath is the path to the local file that defines the audit policy configuration.
	PolicyFilePath *string `pulumi:"PolicyFilePath"`
}

// AuditAuditLogConfigInput is an input type that accepts AuditAuditLogConfigArgs and AuditAuditLogConfigOutput values.
// You can construct a concrete instance of `AuditAuditLogConfigInput` via:
//
//	AuditAuditLogConfigArgs{...}
type AuditAuditLogConfigInput interface {
	pulumi.Input

	ToAuditAuditLogConfigOutput() AuditAuditLogConfigOutput
	ToAuditAuditLogConfigOutputWithContext(context.Context) AuditAuditLogConfigOutput
}

type AuditAuditLogConfigArgs struct {
	// AuditLogMaxAge defines the maximum number of days to retain old audit log files. Default is 10.
	AuditLogMaxAge pulumi.Float64PtrInput `pulumi:"AuditLogMaxAge"`
	// AuditLogMaxBackup specifies the maximum number of audit log files to retain. Default is 30.
	AuditLogMaxBackup pulumi.Float64PtrInput `pulumi:"AuditLogMaxBackup"`
	// AuditLogMaxSize specifies the maximum size in megabytes of the audit log file before it gets rotated. Default is 100.
	AuditLogMaxSize pulumi.Float64PtrInput `pulumi:"AuditLogMaxSize"`
	// Enabled specifies if the audit log is enabled. If nil, it might default to a cluster-level setting. Default is true.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// PolicyFilePath is the path to the local file that defines the audit policy configuration.
	PolicyFilePath pulumi.StringPtrInput `pulumi:"PolicyFilePath"`
}

func (AuditAuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditAuditLogConfig)(nil)).Elem()
}

func (i AuditAuditLogConfigArgs) ToAuditAuditLogConfigOutput() AuditAuditLogConfigOutput {
	return i.ToAuditAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditAuditLogConfigArgs) ToAuditAuditLogConfigOutputWithContext(ctx context.Context) AuditAuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditAuditLogConfigOutput)
}

func (i AuditAuditLogConfigArgs) ToAuditAuditLogConfigPtrOutput() AuditAuditLogConfigPtrOutput {
	return i.ToAuditAuditLogConfigPtrOutputWithContext(context.Background())
}

func (i AuditAuditLogConfigArgs) ToAuditAuditLogConfigPtrOutputWithContext(ctx context.Context) AuditAuditLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditAuditLogConfigOutput).ToAuditAuditLogConfigPtrOutputWithContext(ctx)
}

// AuditAuditLogConfigPtrInput is an input type that accepts AuditAuditLogConfigArgs, AuditAuditLogConfigPtr and AuditAuditLogConfigPtrOutput values.
// You can construct a concrete instance of `AuditAuditLogConfigPtrInput` via:
//
//	        AuditAuditLogConfigArgs{...}
//
//	or:
//
//	        nil
type AuditAuditLogConfigPtrInput interface {
	pulumi.Input

	ToAuditAuditLogConfigPtrOutput() AuditAuditLogConfigPtrOutput
	ToAuditAuditLogConfigPtrOutputWithContext(context.Context) AuditAuditLogConfigPtrOutput
}

type auditAuditLogConfigPtrType AuditAuditLogConfigArgs

func AuditAuditLogConfigPtr(v *AuditAuditLogConfigArgs) AuditAuditLogConfigPtrInput {
	return (*auditAuditLogConfigPtrType)(v)
}

func (*auditAuditLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditAuditLogConfig)(nil)).Elem()
}

func (i *auditAuditLogConfigPtrType) ToAuditAuditLogConfigPtrOutput() AuditAuditLogConfigPtrOutput {
	return i.ToAuditAuditLogConfigPtrOutputWithContext(context.Background())
}

func (i *auditAuditLogConfigPtrType) ToAuditAuditLogConfigPtrOutputWithContext(ctx context.Context) AuditAuditLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditAuditLogConfigPtrOutput)
}

type AuditAuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditAuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditAuditLogConfig)(nil)).Elem()
}

func (o AuditAuditLogConfigOutput) ToAuditAuditLogConfigOutput() AuditAuditLogConfigOutput {
	return o
}

func (o AuditAuditLogConfigOutput) ToAuditAuditLogConfigOutputWithContext(ctx context.Context) AuditAuditLogConfigOutput {
	return o
}

func (o AuditAuditLogConfigOutput) ToAuditAuditLogConfigPtrOutput() AuditAuditLogConfigPtrOutput {
	return o.ToAuditAuditLogConfigPtrOutputWithContext(context.Background())
}

func (o AuditAuditLogConfigOutput) ToAuditAuditLogConfigPtrOutputWithContext(ctx context.Context) AuditAuditLogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditAuditLogConfig) *AuditAuditLogConfig {
		return &v
	}).(AuditAuditLogConfigPtrOutput)
}

// AuditLogMaxAge defines the maximum number of days to retain old audit log files. Default is 10.
func (o AuditAuditLogConfigOutput) AuditLogMaxAge() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AuditAuditLogConfig) *float64 { return v.AuditLogMaxAge }).(pulumi.Float64PtrOutput)
}

// AuditLogMaxBackup specifies the maximum number of audit log files to retain. Default is 30.
func (o AuditAuditLogConfigOutput) AuditLogMaxBackup() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AuditAuditLogConfig) *float64 { return v.AuditLogMaxBackup }).(pulumi.Float64PtrOutput)
}

// AuditLogMaxSize specifies the maximum size in megabytes of the audit log file before it gets rotated. Default is 100.
func (o AuditAuditLogConfigOutput) AuditLogMaxSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AuditAuditLogConfig) *float64 { return v.AuditLogMaxSize }).(pulumi.Float64PtrOutput)
}

// Enabled specifies if the audit log is enabled. If nil, it might default to a cluster-level setting. Default is true.
func (o AuditAuditLogConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuditAuditLogConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// PolicyFilePath is the path to the local file that defines the audit policy configuration.
func (o AuditAuditLogConfigOutput) PolicyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditAuditLogConfig) *string { return v.PolicyFilePath }).(pulumi.StringPtrOutput)
}

type AuditAuditLogConfigPtrOutput struct{ *pulumi.OutputState }

func (AuditAuditLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditAuditLogConfig)(nil)).Elem()
}

func (o AuditAuditLogConfigPtrOutput) ToAuditAuditLogConfigPtrOutput() AuditAuditLogConfigPtrOutput {
	return o
}

func (o AuditAuditLogConfigPtrOutput) ToAuditAuditLogConfigPtrOutputWithContext(ctx context.Context) AuditAuditLogConfigPtrOutput {
	return o
}

func (o AuditAuditLogConfigPtrOutput) Elem() AuditAuditLogConfigOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) AuditAuditLogConfig {
		if v != nil {
			return *v
		}
		var ret AuditAuditLogConfig
		return ret
	}).(AuditAuditLogConfigOutput)
}

// AuditLogMaxAge defines the maximum number of days to retain old audit log files. Default is 10.
func (o AuditAuditLogConfigPtrOutput) AuditLogMaxAge() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.AuditLogMaxAge
	}).(pulumi.Float64PtrOutput)
}

// AuditLogMaxBackup specifies the maximum number of audit log files to retain. Default is 30.
func (o AuditAuditLogConfigPtrOutput) AuditLogMaxBackup() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.AuditLogMaxBackup
	}).(pulumi.Float64PtrOutput)
}

// AuditLogMaxSize specifies the maximum size in megabytes of the audit log file before it gets rotated. Default is 100.
func (o AuditAuditLogConfigPtrOutput) AuditLogMaxSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.AuditLogMaxSize
	}).(pulumi.Float64PtrOutput)
}

// Enabled specifies if the audit log is enabled. If nil, it might default to a cluster-level setting. Default is true.
func (o AuditAuditLogConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// PolicyFilePath is the path to the local file that defines the audit policy configuration.
func (o AuditAuditLogConfigPtrOutput) PolicyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditAuditLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.PolicyFilePath
	}).(pulumi.StringPtrOutput)
}

type CcmConfig struct {
	// Enabled is a flag to enable or disable hcloud CCM.
	Enabled *bool       `pulumi:"Enabled"`
	Helm    *HelmConfig `pulumi:"Helm"`
	// DefaultloadbalancerLocation is a default location for the loadbancers.
	LoadbalancersDefaultLocation *string `pulumi:"LoadbalancersDefaultLocation"`
	// LoadbalancersEnabled is a flag to enable or disable loadbalancers management. Note: internal loadbalancer for k3s will be disabled.
	LoadbalancersEnabled *bool `pulumi:"LoadbalancersEnabled"`
	// Token is a hcloud token to access hcloud API for CCM.
	Token *string `pulumi:"Token"`
}

// CcmConfigInput is an input type that accepts CcmConfigArgs and CcmConfigOutput values.
// You can construct a concrete instance of `CcmConfigInput` via:
//
//	CcmConfigArgs{...}
type CcmConfigInput interface {
	pulumi.Input

	ToCcmConfigOutput() CcmConfigOutput
	ToCcmConfigOutputWithContext(context.Context) CcmConfigOutput
}

type CcmConfigArgs struct {
	// Enabled is a flag to enable or disable hcloud CCM.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	Helm    HelmConfigPtrInput  `pulumi:"Helm"`
	// DefaultloadbalancerLocation is a default location for the loadbancers.
	LoadbalancersDefaultLocation pulumi.StringPtrInput `pulumi:"LoadbalancersDefaultLocation"`
	// LoadbalancersEnabled is a flag to enable or disable loadbalancers management. Note: internal loadbalancer for k3s will be disabled.
	LoadbalancersEnabled pulumi.BoolPtrInput `pulumi:"LoadbalancersEnabled"`
	// Token is a hcloud token to access hcloud API for CCM.
	Token pulumi.StringPtrInput `pulumi:"Token"`
}

func (CcmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcmConfig)(nil)).Elem()
}

func (i CcmConfigArgs) ToCcmConfigOutput() CcmConfigOutput {
	return i.ToCcmConfigOutputWithContext(context.Background())
}

func (i CcmConfigArgs) ToCcmConfigOutputWithContext(ctx context.Context) CcmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmConfigOutput)
}

func (i CcmConfigArgs) ToCcmConfigPtrOutput() CcmConfigPtrOutput {
	return i.ToCcmConfigPtrOutputWithContext(context.Background())
}

func (i CcmConfigArgs) ToCcmConfigPtrOutputWithContext(ctx context.Context) CcmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmConfigOutput).ToCcmConfigPtrOutputWithContext(ctx)
}

// CcmConfigPtrInput is an input type that accepts CcmConfigArgs, CcmConfigPtr and CcmConfigPtrOutput values.
// You can construct a concrete instance of `CcmConfigPtrInput` via:
//
//	        CcmConfigArgs{...}
//
//	or:
//
//	        nil
type CcmConfigPtrInput interface {
	pulumi.Input

	ToCcmConfigPtrOutput() CcmConfigPtrOutput
	ToCcmConfigPtrOutputWithContext(context.Context) CcmConfigPtrOutput
}

type ccmConfigPtrType CcmConfigArgs

func CcmConfigPtr(v *CcmConfigArgs) CcmConfigPtrInput {
	return (*ccmConfigPtrType)(v)
}

func (*ccmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CcmConfig)(nil)).Elem()
}

func (i *ccmConfigPtrType) ToCcmConfigPtrOutput() CcmConfigPtrOutput {
	return i.ToCcmConfigPtrOutputWithContext(context.Background())
}

func (i *ccmConfigPtrType) ToCcmConfigPtrOutputWithContext(ctx context.Context) CcmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmConfigPtrOutput)
}

type CcmConfigOutput struct{ *pulumi.OutputState }

func (CcmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcmConfig)(nil)).Elem()
}

func (o CcmConfigOutput) ToCcmConfigOutput() CcmConfigOutput {
	return o
}

func (o CcmConfigOutput) ToCcmConfigOutputWithContext(ctx context.Context) CcmConfigOutput {
	return o
}

func (o CcmConfigOutput) ToCcmConfigPtrOutput() CcmConfigPtrOutput {
	return o.ToCcmConfigPtrOutputWithContext(context.Background())
}

func (o CcmConfigOutput) ToCcmConfigPtrOutputWithContext(ctx context.Context) CcmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CcmConfig) *CcmConfig {
		return &v
	}).(CcmConfigPtrOutput)
}

// Enabled is a flag to enable or disable hcloud CCM.
func (o CcmConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CcmConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CcmConfigOutput) Helm() HelmConfigPtrOutput {
	return o.ApplyT(func(v CcmConfig) *HelmConfig { return v.Helm }).(HelmConfigPtrOutput)
}

// DefaultloadbalancerLocation is a default location for the loadbancers.
func (o CcmConfigOutput) LoadbalancersDefaultLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcmConfig) *string { return v.LoadbalancersDefaultLocation }).(pulumi.StringPtrOutput)
}

// LoadbalancersEnabled is a flag to enable or disable loadbalancers management. Note: internal loadbalancer for k3s will be disabled.
func (o CcmConfigOutput) LoadbalancersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CcmConfig) *bool { return v.LoadbalancersEnabled }).(pulumi.BoolPtrOutput)
}

// Token is a hcloud token to access hcloud API for CCM.
func (o CcmConfigOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcmConfig) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type CcmConfigPtrOutput struct{ *pulumi.OutputState }

func (CcmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcmConfig)(nil)).Elem()
}

func (o CcmConfigPtrOutput) ToCcmConfigPtrOutput() CcmConfigPtrOutput {
	return o
}

func (o CcmConfigPtrOutput) ToCcmConfigPtrOutputWithContext(ctx context.Context) CcmConfigPtrOutput {
	return o
}

func (o CcmConfigPtrOutput) Elem() CcmConfigOutput {
	return o.ApplyT(func(v *CcmConfig) CcmConfig {
		if v != nil {
			return *v
		}
		var ret CcmConfig
		return ret
	}).(CcmConfigOutput)
}

// Enabled is a flag to enable or disable hcloud CCM.
func (o CcmConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CcmConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o CcmConfigPtrOutput) Helm() HelmConfigPtrOutput {
	return o.ApplyT(func(v *CcmConfig) *HelmConfig {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(HelmConfigPtrOutput)
}

// DefaultloadbalancerLocation is a default location for the loadbancers.
func (o CcmConfigPtrOutput) LoadbalancersDefaultLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcmConfig) *string {
		if v == nil {
			return nil
		}
		return v.LoadbalancersDefaultLocation
	}).(pulumi.StringPtrOutput)
}

// LoadbalancersEnabled is a flag to enable or disable loadbalancers management. Note: internal loadbalancer for k3s will be disabled.
func (o CcmConfigPtrOutput) LoadbalancersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CcmConfig) *bool {
		if v == nil {
			return nil
		}
		return v.LoadbalancersEnabled
	}).(pulumi.BoolPtrOutput)
}

// Token is a hcloud token to access hcloud API for CCM.
func (o CcmConfigPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcmConfig) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type ConfigConfig struct {
	// Defaults is a map with default settings for agents and servers. Global values for all nodes can be set here as well. Default is not specified.
	Defaults *ConfigDefaultConfig `pulumi:"Defaults"`
	// K8S defines a distribution-agnostic cluster configuration. Default is not specified.
	K8S *K8sconfigConfig `pulumi:"K8S"`
	// Network defines network configuration for cluster. Default is not specified.
	Network *ConfigNetworkConfig `pulumi:"Network"`
	// Nodepools is a map with agents and servers defined. Required for at least one server node. Default is not specified.
	Nodepools *ConfigNodepoolsConfig `pulumi:"Nodepools"`
}

// ConfigConfigInput is an input type that accepts ConfigConfigArgs and ConfigConfigOutput values.
// You can construct a concrete instance of `ConfigConfigInput` via:
//
//	ConfigConfigArgs{...}
type ConfigConfigInput interface {
	pulumi.Input

	ToConfigConfigOutput() ConfigConfigOutput
	ToConfigConfigOutputWithContext(context.Context) ConfigConfigOutput
}

type ConfigConfigArgs struct {
	// Defaults is a map with default settings for agents and servers. Global values for all nodes can be set here as well. Default is not specified.
	Defaults ConfigDefaultConfigPtrInput `pulumi:"Defaults"`
	// K8S defines a distribution-agnostic cluster configuration. Default is not specified.
	K8S K8sconfigConfigPtrInput `pulumi:"K8S"`
	// Network defines network configuration for cluster. Default is not specified.
	Network ConfigNetworkConfigPtrInput `pulumi:"Network"`
	// Nodepools is a map with agents and servers defined. Required for at least one server node. Default is not specified.
	Nodepools ConfigNodepoolsConfigPtrInput `pulumi:"Nodepools"`
}

func (ConfigConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConfig)(nil)).Elem()
}

func (i ConfigConfigArgs) ToConfigConfigOutput() ConfigConfigOutput {
	return i.ToConfigConfigOutputWithContext(context.Background())
}

func (i ConfigConfigArgs) ToConfigConfigOutputWithContext(ctx context.Context) ConfigConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConfigOutput)
}

func (i ConfigConfigArgs) ToConfigConfigPtrOutput() ConfigConfigPtrOutput {
	return i.ToConfigConfigPtrOutputWithContext(context.Background())
}

func (i ConfigConfigArgs) ToConfigConfigPtrOutputWithContext(ctx context.Context) ConfigConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConfigOutput).ToConfigConfigPtrOutputWithContext(ctx)
}

// ConfigConfigPtrInput is an input type that accepts ConfigConfigArgs, ConfigConfigPtr and ConfigConfigPtrOutput values.
// You can construct a concrete instance of `ConfigConfigPtrInput` via:
//
//	        ConfigConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigConfigPtrInput interface {
	pulumi.Input

	ToConfigConfigPtrOutput() ConfigConfigPtrOutput
	ToConfigConfigPtrOutputWithContext(context.Context) ConfigConfigPtrOutput
}

type configConfigPtrType ConfigConfigArgs

func ConfigConfigPtr(v *ConfigConfigArgs) ConfigConfigPtrInput {
	return (*configConfigPtrType)(v)
}

func (*configConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConfig)(nil)).Elem()
}

func (i *configConfigPtrType) ToConfigConfigPtrOutput() ConfigConfigPtrOutput {
	return i.ToConfigConfigPtrOutputWithContext(context.Background())
}

func (i *configConfigPtrType) ToConfigConfigPtrOutputWithContext(ctx context.Context) ConfigConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConfigPtrOutput)
}

type ConfigConfigOutput struct{ *pulumi.OutputState }

func (ConfigConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConfig)(nil)).Elem()
}

func (o ConfigConfigOutput) ToConfigConfigOutput() ConfigConfigOutput {
	return o
}

func (o ConfigConfigOutput) ToConfigConfigOutputWithContext(ctx context.Context) ConfigConfigOutput {
	return o
}

func (o ConfigConfigOutput) ToConfigConfigPtrOutput() ConfigConfigPtrOutput {
	return o.ToConfigConfigPtrOutputWithContext(context.Background())
}

func (o ConfigConfigOutput) ToConfigConfigPtrOutputWithContext(ctx context.Context) ConfigConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigConfig) *ConfigConfig {
		return &v
	}).(ConfigConfigPtrOutput)
}

// Defaults is a map with default settings for agents and servers. Global values for all nodes can be set here as well. Default is not specified.
func (o ConfigConfigOutput) Defaults() ConfigDefaultConfigPtrOutput {
	return o.ApplyT(func(v ConfigConfig) *ConfigDefaultConfig { return v.Defaults }).(ConfigDefaultConfigPtrOutput)
}

// K8S defines a distribution-agnostic cluster configuration. Default is not specified.
func (o ConfigConfigOutput) K8S() K8sconfigConfigPtrOutput {
	return o.ApplyT(func(v ConfigConfig) *K8sconfigConfig { return v.K8S }).(K8sconfigConfigPtrOutput)
}

// Network defines network configuration for cluster. Default is not specified.
func (o ConfigConfigOutput) Network() ConfigNetworkConfigPtrOutput {
	return o.ApplyT(func(v ConfigConfig) *ConfigNetworkConfig { return v.Network }).(ConfigNetworkConfigPtrOutput)
}

// Nodepools is a map with agents and servers defined. Required for at least one server node. Default is not specified.
func (o ConfigConfigOutput) Nodepools() ConfigNodepoolsConfigPtrOutput {
	return o.ApplyT(func(v ConfigConfig) *ConfigNodepoolsConfig { return v.Nodepools }).(ConfigNodepoolsConfigPtrOutput)
}

type ConfigConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConfig)(nil)).Elem()
}

func (o ConfigConfigPtrOutput) ToConfigConfigPtrOutput() ConfigConfigPtrOutput {
	return o
}

func (o ConfigConfigPtrOutput) ToConfigConfigPtrOutputWithContext(ctx context.Context) ConfigConfigPtrOutput {
	return o
}

func (o ConfigConfigPtrOutput) Elem() ConfigConfigOutput {
	return o.ApplyT(func(v *ConfigConfig) ConfigConfig {
		if v != nil {
			return *v
		}
		var ret ConfigConfig
		return ret
	}).(ConfigConfigOutput)
}

// Defaults is a map with default settings for agents and servers. Global values for all nodes can be set here as well. Default is not specified.
func (o ConfigConfigPtrOutput) Defaults() ConfigDefaultConfigPtrOutput {
	return o.ApplyT(func(v *ConfigConfig) *ConfigDefaultConfig {
		if v == nil {
			return nil
		}
		return v.Defaults
	}).(ConfigDefaultConfigPtrOutput)
}

// K8S defines a distribution-agnostic cluster configuration. Default is not specified.
func (o ConfigConfigPtrOutput) K8S() K8sconfigConfigPtrOutput {
	return o.ApplyT(func(v *ConfigConfig) *K8sconfigConfig {
		if v == nil {
			return nil
		}
		return v.K8S
	}).(K8sconfigConfigPtrOutput)
}

// Network defines network configuration for cluster. Default is not specified.
func (o ConfigConfigPtrOutput) Network() ConfigNetworkConfigPtrOutput {
	return o.ApplyT(func(v *ConfigConfig) *ConfigNetworkConfig {
		if v == nil {
			return nil
		}
		return v.Network
	}).(ConfigNetworkConfigPtrOutput)
}

// Nodepools is a map with agents and servers defined. Required for at least one server node. Default is not specified.
func (o ConfigConfigPtrOutput) Nodepools() ConfigNodepoolsConfigPtrOutput {
	return o.ApplyT(func(v *ConfigConfig) *ConfigNodepoolsConfig {
		if v == nil {
			return nil
		}
		return v.Nodepools
	}).(ConfigNodepoolsConfigPtrOutput)
}

type ConfigDefaultConfig struct {
	// Agents holds configuration settings specific to agent nodes, overriding Global settings where specified.
	Agents *ConfigNodeConfig `pulumi:"Agents"`
	// Global provides configuration settings that are applied to all nodes, unless overridden by specific roles.
	Global *ConfigNodeConfig `pulumi:"Global"`
	// Servers holds configuration settings specific to server nodes, overriding Global settings where specified.
	Servers *ConfigNodeConfig `pulumi:"Servers"`
}

// ConfigDefaultConfigInput is an input type that accepts ConfigDefaultConfigArgs and ConfigDefaultConfigOutput values.
// You can construct a concrete instance of `ConfigDefaultConfigInput` via:
//
//	ConfigDefaultConfigArgs{...}
type ConfigDefaultConfigInput interface {
	pulumi.Input

	ToConfigDefaultConfigOutput() ConfigDefaultConfigOutput
	ToConfigDefaultConfigOutputWithContext(context.Context) ConfigDefaultConfigOutput
}

type ConfigDefaultConfigArgs struct {
	// Agents holds configuration settings specific to agent nodes, overriding Global settings where specified.
	Agents ConfigNodeConfigPtrInput `pulumi:"Agents"`
	// Global provides configuration settings that are applied to all nodes, unless overridden by specific roles.
	Global ConfigNodeConfigPtrInput `pulumi:"Global"`
	// Servers holds configuration settings specific to server nodes, overriding Global settings where specified.
	Servers ConfigNodeConfigPtrInput `pulumi:"Servers"`
}

func (ConfigDefaultConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDefaultConfig)(nil)).Elem()
}

func (i ConfigDefaultConfigArgs) ToConfigDefaultConfigOutput() ConfigDefaultConfigOutput {
	return i.ToConfigDefaultConfigOutputWithContext(context.Background())
}

func (i ConfigDefaultConfigArgs) ToConfigDefaultConfigOutputWithContext(ctx context.Context) ConfigDefaultConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDefaultConfigOutput)
}

func (i ConfigDefaultConfigArgs) ToConfigDefaultConfigPtrOutput() ConfigDefaultConfigPtrOutput {
	return i.ToConfigDefaultConfigPtrOutputWithContext(context.Background())
}

func (i ConfigDefaultConfigArgs) ToConfigDefaultConfigPtrOutputWithContext(ctx context.Context) ConfigDefaultConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDefaultConfigOutput).ToConfigDefaultConfigPtrOutputWithContext(ctx)
}

// ConfigDefaultConfigPtrInput is an input type that accepts ConfigDefaultConfigArgs, ConfigDefaultConfigPtr and ConfigDefaultConfigPtrOutput values.
// You can construct a concrete instance of `ConfigDefaultConfigPtrInput` via:
//
//	        ConfigDefaultConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigDefaultConfigPtrInput interface {
	pulumi.Input

	ToConfigDefaultConfigPtrOutput() ConfigDefaultConfigPtrOutput
	ToConfigDefaultConfigPtrOutputWithContext(context.Context) ConfigDefaultConfigPtrOutput
}

type configDefaultConfigPtrType ConfigDefaultConfigArgs

func ConfigDefaultConfigPtr(v *ConfigDefaultConfigArgs) ConfigDefaultConfigPtrInput {
	return (*configDefaultConfigPtrType)(v)
}

func (*configDefaultConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigDefaultConfig)(nil)).Elem()
}

func (i *configDefaultConfigPtrType) ToConfigDefaultConfigPtrOutput() ConfigDefaultConfigPtrOutput {
	return i.ToConfigDefaultConfigPtrOutputWithContext(context.Background())
}

func (i *configDefaultConfigPtrType) ToConfigDefaultConfigPtrOutputWithContext(ctx context.Context) ConfigDefaultConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDefaultConfigPtrOutput)
}

type ConfigDefaultConfigOutput struct{ *pulumi.OutputState }

func (ConfigDefaultConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDefaultConfig)(nil)).Elem()
}

func (o ConfigDefaultConfigOutput) ToConfigDefaultConfigOutput() ConfigDefaultConfigOutput {
	return o
}

func (o ConfigDefaultConfigOutput) ToConfigDefaultConfigOutputWithContext(ctx context.Context) ConfigDefaultConfigOutput {
	return o
}

func (o ConfigDefaultConfigOutput) ToConfigDefaultConfigPtrOutput() ConfigDefaultConfigPtrOutput {
	return o.ToConfigDefaultConfigPtrOutputWithContext(context.Background())
}

func (o ConfigDefaultConfigOutput) ToConfigDefaultConfigPtrOutputWithContext(ctx context.Context) ConfigDefaultConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigDefaultConfig) *ConfigDefaultConfig {
		return &v
	}).(ConfigDefaultConfigPtrOutput)
}

// Agents holds configuration settings specific to agent nodes, overriding Global settings where specified.
func (o ConfigDefaultConfigOutput) Agents() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v ConfigDefaultConfig) *ConfigNodeConfig { return v.Agents }).(ConfigNodeConfigPtrOutput)
}

// Global provides configuration settings that are applied to all nodes, unless overridden by specific roles.
func (o ConfigDefaultConfigOutput) Global() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v ConfigDefaultConfig) *ConfigNodeConfig { return v.Global }).(ConfigNodeConfigPtrOutput)
}

// Servers holds configuration settings specific to server nodes, overriding Global settings where specified.
func (o ConfigDefaultConfigOutput) Servers() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v ConfigDefaultConfig) *ConfigNodeConfig { return v.Servers }).(ConfigNodeConfigPtrOutput)
}

type ConfigDefaultConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigDefaultConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigDefaultConfig)(nil)).Elem()
}

func (o ConfigDefaultConfigPtrOutput) ToConfigDefaultConfigPtrOutput() ConfigDefaultConfigPtrOutput {
	return o
}

func (o ConfigDefaultConfigPtrOutput) ToConfigDefaultConfigPtrOutputWithContext(ctx context.Context) ConfigDefaultConfigPtrOutput {
	return o
}

func (o ConfigDefaultConfigPtrOutput) Elem() ConfigDefaultConfigOutput {
	return o.ApplyT(func(v *ConfigDefaultConfig) ConfigDefaultConfig {
		if v != nil {
			return *v
		}
		var ret ConfigDefaultConfig
		return ret
	}).(ConfigDefaultConfigOutput)
}

// Agents holds configuration settings specific to agent nodes, overriding Global settings where specified.
func (o ConfigDefaultConfigPtrOutput) Agents() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v *ConfigDefaultConfig) *ConfigNodeConfig {
		if v == nil {
			return nil
		}
		return v.Agents
	}).(ConfigNodeConfigPtrOutput)
}

// Global provides configuration settings that are applied to all nodes, unless overridden by specific roles.
func (o ConfigDefaultConfigPtrOutput) Global() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v *ConfigDefaultConfig) *ConfigNodeConfig {
		if v == nil {
			return nil
		}
		return v.Global
	}).(ConfigNodeConfigPtrOutput)
}

// Servers holds configuration settings specific to server nodes, overriding Global settings where specified.
func (o ConfigDefaultConfigPtrOutput) Servers() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v *ConfigDefaultConfig) *ConfigNodeConfig {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(ConfigNodeConfigPtrOutput)
}

type ConfigFirewallConfig struct {
	// Hetzner specify firewall configuration for cloud firewall.
	Hetzner *FirewallConfig `pulumi:"Hetzner"`
}

// ConfigFirewallConfigInput is an input type that accepts ConfigFirewallConfigArgs and ConfigFirewallConfigOutput values.
// You can construct a concrete instance of `ConfigFirewallConfigInput` via:
//
//	ConfigFirewallConfigArgs{...}
type ConfigFirewallConfigInput interface {
	pulumi.Input

	ToConfigFirewallConfigOutput() ConfigFirewallConfigOutput
	ToConfigFirewallConfigOutputWithContext(context.Context) ConfigFirewallConfigOutput
}

type ConfigFirewallConfigArgs struct {
	// Hetzner specify firewall configuration for cloud firewall.
	Hetzner FirewallConfigPtrInput `pulumi:"Hetzner"`
}

func (ConfigFirewallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigFirewallConfig)(nil)).Elem()
}

func (i ConfigFirewallConfigArgs) ToConfigFirewallConfigOutput() ConfigFirewallConfigOutput {
	return i.ToConfigFirewallConfigOutputWithContext(context.Background())
}

func (i ConfigFirewallConfigArgs) ToConfigFirewallConfigOutputWithContext(ctx context.Context) ConfigFirewallConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFirewallConfigOutput)
}

func (i ConfigFirewallConfigArgs) ToConfigFirewallConfigPtrOutput() ConfigFirewallConfigPtrOutput {
	return i.ToConfigFirewallConfigPtrOutputWithContext(context.Background())
}

func (i ConfigFirewallConfigArgs) ToConfigFirewallConfigPtrOutputWithContext(ctx context.Context) ConfigFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFirewallConfigOutput).ToConfigFirewallConfigPtrOutputWithContext(ctx)
}

// ConfigFirewallConfigPtrInput is an input type that accepts ConfigFirewallConfigArgs, ConfigFirewallConfigPtr and ConfigFirewallConfigPtrOutput values.
// You can construct a concrete instance of `ConfigFirewallConfigPtrInput` via:
//
//	        ConfigFirewallConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigFirewallConfigPtrInput interface {
	pulumi.Input

	ToConfigFirewallConfigPtrOutput() ConfigFirewallConfigPtrOutput
	ToConfigFirewallConfigPtrOutputWithContext(context.Context) ConfigFirewallConfigPtrOutput
}

type configFirewallConfigPtrType ConfigFirewallConfigArgs

func ConfigFirewallConfigPtr(v *ConfigFirewallConfigArgs) ConfigFirewallConfigPtrInput {
	return (*configFirewallConfigPtrType)(v)
}

func (*configFirewallConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigFirewallConfig)(nil)).Elem()
}

func (i *configFirewallConfigPtrType) ToConfigFirewallConfigPtrOutput() ConfigFirewallConfigPtrOutput {
	return i.ToConfigFirewallConfigPtrOutputWithContext(context.Background())
}

func (i *configFirewallConfigPtrType) ToConfigFirewallConfigPtrOutputWithContext(ctx context.Context) ConfigFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigFirewallConfigPtrOutput)
}

type ConfigFirewallConfigOutput struct{ *pulumi.OutputState }

func (ConfigFirewallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigFirewallConfig)(nil)).Elem()
}

func (o ConfigFirewallConfigOutput) ToConfigFirewallConfigOutput() ConfigFirewallConfigOutput {
	return o
}

func (o ConfigFirewallConfigOutput) ToConfigFirewallConfigOutputWithContext(ctx context.Context) ConfigFirewallConfigOutput {
	return o
}

func (o ConfigFirewallConfigOutput) ToConfigFirewallConfigPtrOutput() ConfigFirewallConfigPtrOutput {
	return o.ToConfigFirewallConfigPtrOutputWithContext(context.Background())
}

func (o ConfigFirewallConfigOutput) ToConfigFirewallConfigPtrOutputWithContext(ctx context.Context) ConfigFirewallConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigFirewallConfig) *ConfigFirewallConfig {
		return &v
	}).(ConfigFirewallConfigPtrOutput)
}

// Hetzner specify firewall configuration for cloud firewall.
func (o ConfigFirewallConfigOutput) Hetzner() FirewallConfigPtrOutput {
	return o.ApplyT(func(v ConfigFirewallConfig) *FirewallConfig { return v.Hetzner }).(FirewallConfigPtrOutput)
}

type ConfigFirewallConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigFirewallConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigFirewallConfig)(nil)).Elem()
}

func (o ConfigFirewallConfigPtrOutput) ToConfigFirewallConfigPtrOutput() ConfigFirewallConfigPtrOutput {
	return o
}

func (o ConfigFirewallConfigPtrOutput) ToConfigFirewallConfigPtrOutputWithContext(ctx context.Context) ConfigFirewallConfigPtrOutput {
	return o
}

func (o ConfigFirewallConfigPtrOutput) Elem() ConfigFirewallConfigOutput {
	return o.ApplyT(func(v *ConfigFirewallConfig) ConfigFirewallConfig {
		if v != nil {
			return *v
		}
		var ret ConfigFirewallConfig
		return ret
	}).(ConfigFirewallConfigOutput)
}

// Hetzner specify firewall configuration for cloud firewall.
func (o ConfigFirewallConfigPtrOutput) Hetzner() FirewallConfigPtrOutput {
	return o.ApplyT(func(v *ConfigFirewallConfig) *FirewallConfig {
		if v == nil {
			return nil
		}
		return v.Hetzner
	}).(FirewallConfigPtrOutput)
}

type ConfigNetworkConfig struct {
	// Hetzner specifies network configuration for private networking.
	Hetzner *NetworkConfig `pulumi:"Hetzner"`
}

// ConfigNetworkConfigInput is an input type that accepts ConfigNetworkConfigArgs and ConfigNetworkConfigOutput values.
// You can construct a concrete instance of `ConfigNetworkConfigInput` via:
//
//	ConfigNetworkConfigArgs{...}
type ConfigNetworkConfigInput interface {
	pulumi.Input

	ToConfigNetworkConfigOutput() ConfigNetworkConfigOutput
	ToConfigNetworkConfigOutputWithContext(context.Context) ConfigNetworkConfigOutput
}

type ConfigNetworkConfigArgs struct {
	// Hetzner specifies network configuration for private networking.
	Hetzner NetworkConfigPtrInput `pulumi:"Hetzner"`
}

func (ConfigNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNetworkConfig)(nil)).Elem()
}

func (i ConfigNetworkConfigArgs) ToConfigNetworkConfigOutput() ConfigNetworkConfigOutput {
	return i.ToConfigNetworkConfigOutputWithContext(context.Background())
}

func (i ConfigNetworkConfigArgs) ToConfigNetworkConfigOutputWithContext(ctx context.Context) ConfigNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNetworkConfigOutput)
}

func (i ConfigNetworkConfigArgs) ToConfigNetworkConfigPtrOutput() ConfigNetworkConfigPtrOutput {
	return i.ToConfigNetworkConfigPtrOutputWithContext(context.Background())
}

func (i ConfigNetworkConfigArgs) ToConfigNetworkConfigPtrOutputWithContext(ctx context.Context) ConfigNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNetworkConfigOutput).ToConfigNetworkConfigPtrOutputWithContext(ctx)
}

// ConfigNetworkConfigPtrInput is an input type that accepts ConfigNetworkConfigArgs, ConfigNetworkConfigPtr and ConfigNetworkConfigPtrOutput values.
// You can construct a concrete instance of `ConfigNetworkConfigPtrInput` via:
//
//	        ConfigNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigNetworkConfigPtrInput interface {
	pulumi.Input

	ToConfigNetworkConfigPtrOutput() ConfigNetworkConfigPtrOutput
	ToConfigNetworkConfigPtrOutputWithContext(context.Context) ConfigNetworkConfigPtrOutput
}

type configNetworkConfigPtrType ConfigNetworkConfigArgs

func ConfigNetworkConfigPtr(v *ConfigNetworkConfigArgs) ConfigNetworkConfigPtrInput {
	return (*configNetworkConfigPtrType)(v)
}

func (*configNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNetworkConfig)(nil)).Elem()
}

func (i *configNetworkConfigPtrType) ToConfigNetworkConfigPtrOutput() ConfigNetworkConfigPtrOutput {
	return i.ToConfigNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *configNetworkConfigPtrType) ToConfigNetworkConfigPtrOutputWithContext(ctx context.Context) ConfigNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNetworkConfigPtrOutput)
}

type ConfigNetworkConfigOutput struct{ *pulumi.OutputState }

func (ConfigNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNetworkConfig)(nil)).Elem()
}

func (o ConfigNetworkConfigOutput) ToConfigNetworkConfigOutput() ConfigNetworkConfigOutput {
	return o
}

func (o ConfigNetworkConfigOutput) ToConfigNetworkConfigOutputWithContext(ctx context.Context) ConfigNetworkConfigOutput {
	return o
}

func (o ConfigNetworkConfigOutput) ToConfigNetworkConfigPtrOutput() ConfigNetworkConfigPtrOutput {
	return o.ToConfigNetworkConfigPtrOutputWithContext(context.Background())
}

func (o ConfigNetworkConfigOutput) ToConfigNetworkConfigPtrOutputWithContext(ctx context.Context) ConfigNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigNetworkConfig) *ConfigNetworkConfig {
		return &v
	}).(ConfigNetworkConfigPtrOutput)
}

// Hetzner specifies network configuration for private networking.
func (o ConfigNetworkConfigOutput) Hetzner() NetworkConfigPtrOutput {
	return o.ApplyT(func(v ConfigNetworkConfig) *NetworkConfig { return v.Hetzner }).(NetworkConfigPtrOutput)
}

type ConfigNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNetworkConfig)(nil)).Elem()
}

func (o ConfigNetworkConfigPtrOutput) ToConfigNetworkConfigPtrOutput() ConfigNetworkConfigPtrOutput {
	return o
}

func (o ConfigNetworkConfigPtrOutput) ToConfigNetworkConfigPtrOutputWithContext(ctx context.Context) ConfigNetworkConfigPtrOutput {
	return o
}

func (o ConfigNetworkConfigPtrOutput) Elem() ConfigNetworkConfigOutput {
	return o.ApplyT(func(v *ConfigNetworkConfig) ConfigNetworkConfig {
		if v != nil {
			return *v
		}
		var ret ConfigNetworkConfig
		return ret
	}).(ConfigNetworkConfigOutput)
}

// Hetzner specifies network configuration for private networking.
func (o ConfigNetworkConfigPtrOutput) Hetzner() NetworkConfigPtrOutput {
	return o.ApplyT(func(v *ConfigNetworkConfig) *NetworkConfig {
		if v == nil {
			return nil
		}
		return v.Hetzner
	}).(NetworkConfigPtrOutput)
}

type ConfigNodeConfig struct {
	// K3S is the configuration of a k3s cluster.
	K3s *K3sConfig `pulumi:"K3s"`
	// K8S is common configuration for nodes.
	K8S *K8sconfigNodeConfig `pulumi:"K8S"`
	// Leader specifies the leader of a multi-master cluster. Required if the number of masters is more than 1. Default is not specified.
	Leader *bool `pulumi:"Leader"`
	// NodeID is the id of a server. It is used throughout the entire program as a key. Required. Default is not specified.
	NodeID *string `pulumi:"NodeID"`
	// Server is the configuration of a Hetzner server.
	Server *ConfigServerConfig `pulumi:"Server"`
}

// ConfigNodeConfigInput is an input type that accepts ConfigNodeConfigArgs and ConfigNodeConfigOutput values.
// You can construct a concrete instance of `ConfigNodeConfigInput` via:
//
//	ConfigNodeConfigArgs{...}
type ConfigNodeConfigInput interface {
	pulumi.Input

	ToConfigNodeConfigOutput() ConfigNodeConfigOutput
	ToConfigNodeConfigOutputWithContext(context.Context) ConfigNodeConfigOutput
}

type ConfigNodeConfigArgs struct {
	// K3S is the configuration of a k3s cluster.
	K3s K3sConfigPtrInput `pulumi:"K3s"`
	// K8S is common configuration for nodes.
	K8S K8sconfigNodeConfigPtrInput `pulumi:"K8S"`
	// Leader specifies the leader of a multi-master cluster. Required if the number of masters is more than 1. Default is not specified.
	Leader pulumi.BoolPtrInput `pulumi:"Leader"`
	// NodeID is the id of a server. It is used throughout the entire program as a key. Required. Default is not specified.
	NodeID pulumi.StringPtrInput `pulumi:"NodeID"`
	// Server is the configuration of a Hetzner server.
	Server ConfigServerConfigPtrInput `pulumi:"Server"`
}

func (ConfigNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodeConfig)(nil)).Elem()
}

func (i ConfigNodeConfigArgs) ToConfigNodeConfigOutput() ConfigNodeConfigOutput {
	return i.ToConfigNodeConfigOutputWithContext(context.Background())
}

func (i ConfigNodeConfigArgs) ToConfigNodeConfigOutputWithContext(ctx context.Context) ConfigNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodeConfigOutput)
}

func (i ConfigNodeConfigArgs) ToConfigNodeConfigPtrOutput() ConfigNodeConfigPtrOutput {
	return i.ToConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i ConfigNodeConfigArgs) ToConfigNodeConfigPtrOutputWithContext(ctx context.Context) ConfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodeConfigOutput).ToConfigNodeConfigPtrOutputWithContext(ctx)
}

// ConfigNodeConfigPtrInput is an input type that accepts ConfigNodeConfigArgs, ConfigNodeConfigPtr and ConfigNodeConfigPtrOutput values.
// You can construct a concrete instance of `ConfigNodeConfigPtrInput` via:
//
//	        ConfigNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigNodeConfigPtrInput interface {
	pulumi.Input

	ToConfigNodeConfigPtrOutput() ConfigNodeConfigPtrOutput
	ToConfigNodeConfigPtrOutputWithContext(context.Context) ConfigNodeConfigPtrOutput
}

type configNodeConfigPtrType ConfigNodeConfigArgs

func ConfigNodeConfigPtr(v *ConfigNodeConfigArgs) ConfigNodeConfigPtrInput {
	return (*configNodeConfigPtrType)(v)
}

func (*configNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNodeConfig)(nil)).Elem()
}

func (i *configNodeConfigPtrType) ToConfigNodeConfigPtrOutput() ConfigNodeConfigPtrOutput {
	return i.ToConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i *configNodeConfigPtrType) ToConfigNodeConfigPtrOutputWithContext(ctx context.Context) ConfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodeConfigPtrOutput)
}

// ConfigNodeConfigArrayInput is an input type that accepts ConfigNodeConfigArray and ConfigNodeConfigArrayOutput values.
// You can construct a concrete instance of `ConfigNodeConfigArrayInput` via:
//
//	ConfigNodeConfigArray{ ConfigNodeConfigArgs{...} }
type ConfigNodeConfigArrayInput interface {
	pulumi.Input

	ToConfigNodeConfigArrayOutput() ConfigNodeConfigArrayOutput
	ToConfigNodeConfigArrayOutputWithContext(context.Context) ConfigNodeConfigArrayOutput
}

type ConfigNodeConfigArray []ConfigNodeConfigInput

func (ConfigNodeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigNodeConfig)(nil)).Elem()
}

func (i ConfigNodeConfigArray) ToConfigNodeConfigArrayOutput() ConfigNodeConfigArrayOutput {
	return i.ToConfigNodeConfigArrayOutputWithContext(context.Background())
}

func (i ConfigNodeConfigArray) ToConfigNodeConfigArrayOutputWithContext(ctx context.Context) ConfigNodeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodeConfigArrayOutput)
}

type ConfigNodeConfigOutput struct{ *pulumi.OutputState }

func (ConfigNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodeConfig)(nil)).Elem()
}

func (o ConfigNodeConfigOutput) ToConfigNodeConfigOutput() ConfigNodeConfigOutput {
	return o
}

func (o ConfigNodeConfigOutput) ToConfigNodeConfigOutputWithContext(ctx context.Context) ConfigNodeConfigOutput {
	return o
}

func (o ConfigNodeConfigOutput) ToConfigNodeConfigPtrOutput() ConfigNodeConfigPtrOutput {
	return o.ToConfigNodeConfigPtrOutputWithContext(context.Background())
}

func (o ConfigNodeConfigOutput) ToConfigNodeConfigPtrOutputWithContext(ctx context.Context) ConfigNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigNodeConfig) *ConfigNodeConfig {
		return &v
	}).(ConfigNodeConfigPtrOutput)
}

// K3S is the configuration of a k3s cluster.
func (o ConfigNodeConfigOutput) K3s() K3sConfigPtrOutput {
	return o.ApplyT(func(v ConfigNodeConfig) *K3sConfig { return v.K3s }).(K3sConfigPtrOutput)
}

// K8S is common configuration for nodes.
func (o ConfigNodeConfigOutput) K8S() K8sconfigNodeConfigPtrOutput {
	return o.ApplyT(func(v ConfigNodeConfig) *K8sconfigNodeConfig { return v.K8S }).(K8sconfigNodeConfigPtrOutput)
}

// Leader specifies the leader of a multi-master cluster. Required if the number of masters is more than 1. Default is not specified.
func (o ConfigNodeConfigOutput) Leader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigNodeConfig) *bool { return v.Leader }).(pulumi.BoolPtrOutput)
}

// NodeID is the id of a server. It is used throughout the entire program as a key. Required. Default is not specified.
func (o ConfigNodeConfigOutput) NodeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigNodeConfig) *string { return v.NodeID }).(pulumi.StringPtrOutput)
}

// Server is the configuration of a Hetzner server.
func (o ConfigNodeConfigOutput) Server() ConfigServerConfigPtrOutput {
	return o.ApplyT(func(v ConfigNodeConfig) *ConfigServerConfig { return v.Server }).(ConfigServerConfigPtrOutput)
}

type ConfigNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNodeConfig)(nil)).Elem()
}

func (o ConfigNodeConfigPtrOutput) ToConfigNodeConfigPtrOutput() ConfigNodeConfigPtrOutput {
	return o
}

func (o ConfigNodeConfigPtrOutput) ToConfigNodeConfigPtrOutputWithContext(ctx context.Context) ConfigNodeConfigPtrOutput {
	return o
}

func (o ConfigNodeConfigPtrOutput) Elem() ConfigNodeConfigOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) ConfigNodeConfig {
		if v != nil {
			return *v
		}
		var ret ConfigNodeConfig
		return ret
	}).(ConfigNodeConfigOutput)
}

// K3S is the configuration of a k3s cluster.
func (o ConfigNodeConfigPtrOutput) K3s() K3sConfigPtrOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) *K3sConfig {
		if v == nil {
			return nil
		}
		return v.K3s
	}).(K3sConfigPtrOutput)
}

// K8S is common configuration for nodes.
func (o ConfigNodeConfigPtrOutput) K8S() K8sconfigNodeConfigPtrOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) *K8sconfigNodeConfig {
		if v == nil {
			return nil
		}
		return v.K8S
	}).(K8sconfigNodeConfigPtrOutput)
}

// Leader specifies the leader of a multi-master cluster. Required if the number of masters is more than 1. Default is not specified.
func (o ConfigNodeConfigPtrOutput) Leader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Leader
	}).(pulumi.BoolPtrOutput)
}

// NodeID is the id of a server. It is used throughout the entire program as a key. Required. Default is not specified.
func (o ConfigNodeConfigPtrOutput) NodeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeID
	}).(pulumi.StringPtrOutput)
}

// Server is the configuration of a Hetzner server.
func (o ConfigNodeConfigPtrOutput) Server() ConfigServerConfigPtrOutput {
	return o.ApplyT(func(v *ConfigNodeConfig) *ConfigServerConfig {
		if v == nil {
			return nil
		}
		return v.Server
	}).(ConfigServerConfigPtrOutput)
}

type ConfigNodeConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigNodeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigNodeConfig)(nil)).Elem()
}

func (o ConfigNodeConfigArrayOutput) ToConfigNodeConfigArrayOutput() ConfigNodeConfigArrayOutput {
	return o
}

func (o ConfigNodeConfigArrayOutput) ToConfigNodeConfigArrayOutputWithContext(ctx context.Context) ConfigNodeConfigArrayOutput {
	return o
}

func (o ConfigNodeConfigArrayOutput) Index(i pulumi.IntInput) ConfigNodeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigNodeConfig {
		return vs[0].([]ConfigNodeConfig)[vs[1].(int)]
	}).(ConfigNodeConfigOutput)
}

type ConfigNodepoolConfig struct {
	// Config is the default node configuration for the group.
	Config *ConfigNodeConfig `pulumi:"Config"`
	// Nodes is a list of nodes inside of the group.
	Nodes []ConfigNodeConfig `pulumi:"Nodes"`
	// PoolID is id of group of servers. It is used through the entire program as key for the group. Required. Default is not specified.
	PoolID *string `pulumi:"PoolID"`
}

// ConfigNodepoolConfigInput is an input type that accepts ConfigNodepoolConfigArgs and ConfigNodepoolConfigOutput values.
// You can construct a concrete instance of `ConfigNodepoolConfigInput` via:
//
//	ConfigNodepoolConfigArgs{...}
type ConfigNodepoolConfigInput interface {
	pulumi.Input

	ToConfigNodepoolConfigOutput() ConfigNodepoolConfigOutput
	ToConfigNodepoolConfigOutputWithContext(context.Context) ConfigNodepoolConfigOutput
}

type ConfigNodepoolConfigArgs struct {
	// Config is the default node configuration for the group.
	Config ConfigNodeConfigPtrInput `pulumi:"Config"`
	// Nodes is a list of nodes inside of the group.
	Nodes ConfigNodeConfigArrayInput `pulumi:"Nodes"`
	// PoolID is id of group of servers. It is used through the entire program as key for the group. Required. Default is not specified.
	PoolID pulumi.StringPtrInput `pulumi:"PoolID"`
}

func (ConfigNodepoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodepoolConfig)(nil)).Elem()
}

func (i ConfigNodepoolConfigArgs) ToConfigNodepoolConfigOutput() ConfigNodepoolConfigOutput {
	return i.ToConfigNodepoolConfigOutputWithContext(context.Background())
}

func (i ConfigNodepoolConfigArgs) ToConfigNodepoolConfigOutputWithContext(ctx context.Context) ConfigNodepoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodepoolConfigOutput)
}

// ConfigNodepoolConfigArrayInput is an input type that accepts ConfigNodepoolConfigArray and ConfigNodepoolConfigArrayOutput values.
// You can construct a concrete instance of `ConfigNodepoolConfigArrayInput` via:
//
//	ConfigNodepoolConfigArray{ ConfigNodepoolConfigArgs{...} }
type ConfigNodepoolConfigArrayInput interface {
	pulumi.Input

	ToConfigNodepoolConfigArrayOutput() ConfigNodepoolConfigArrayOutput
	ToConfigNodepoolConfigArrayOutputWithContext(context.Context) ConfigNodepoolConfigArrayOutput
}

type ConfigNodepoolConfigArray []ConfigNodepoolConfigInput

func (ConfigNodepoolConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigNodepoolConfig)(nil)).Elem()
}

func (i ConfigNodepoolConfigArray) ToConfigNodepoolConfigArrayOutput() ConfigNodepoolConfigArrayOutput {
	return i.ToConfigNodepoolConfigArrayOutputWithContext(context.Background())
}

func (i ConfigNodepoolConfigArray) ToConfigNodepoolConfigArrayOutputWithContext(ctx context.Context) ConfigNodepoolConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodepoolConfigArrayOutput)
}

type ConfigNodepoolConfigOutput struct{ *pulumi.OutputState }

func (ConfigNodepoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodepoolConfig)(nil)).Elem()
}

func (o ConfigNodepoolConfigOutput) ToConfigNodepoolConfigOutput() ConfigNodepoolConfigOutput {
	return o
}

func (o ConfigNodepoolConfigOutput) ToConfigNodepoolConfigOutputWithContext(ctx context.Context) ConfigNodepoolConfigOutput {
	return o
}

// Config is the default node configuration for the group.
func (o ConfigNodepoolConfigOutput) Config() ConfigNodeConfigPtrOutput {
	return o.ApplyT(func(v ConfigNodepoolConfig) *ConfigNodeConfig { return v.Config }).(ConfigNodeConfigPtrOutput)
}

// Nodes is a list of nodes inside of the group.
func (o ConfigNodepoolConfigOutput) Nodes() ConfigNodeConfigArrayOutput {
	return o.ApplyT(func(v ConfigNodepoolConfig) []ConfigNodeConfig { return v.Nodes }).(ConfigNodeConfigArrayOutput)
}

// PoolID is id of group of servers. It is used through the entire program as key for the group. Required. Default is not specified.
func (o ConfigNodepoolConfigOutput) PoolID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigNodepoolConfig) *string { return v.PoolID }).(pulumi.StringPtrOutput)
}

type ConfigNodepoolConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigNodepoolConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigNodepoolConfig)(nil)).Elem()
}

func (o ConfigNodepoolConfigArrayOutput) ToConfigNodepoolConfigArrayOutput() ConfigNodepoolConfigArrayOutput {
	return o
}

func (o ConfigNodepoolConfigArrayOutput) ToConfigNodepoolConfigArrayOutputWithContext(ctx context.Context) ConfigNodepoolConfigArrayOutput {
	return o
}

func (o ConfigNodepoolConfigArrayOutput) Index(i pulumi.IntInput) ConfigNodepoolConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigNodepoolConfig {
		return vs[0].([]ConfigNodepoolConfig)[vs[1].(int)]
	}).(ConfigNodepoolConfigOutput)
}

type ConfigNodepoolsConfig struct {
	// Agents is a list of NodepoolConfig objects, each representing a configuration for a pool of agent nodes.
	Agents []ConfigNodepoolConfig `pulumi:"Agents"`
	// Servers is a list of NodepoolConfig objects, each representing a configuration for a pool of server nodes.
	Servers []ConfigNodepoolConfig `pulumi:"Servers"`
}

// ConfigNodepoolsConfigInput is an input type that accepts ConfigNodepoolsConfigArgs and ConfigNodepoolsConfigOutput values.
// You can construct a concrete instance of `ConfigNodepoolsConfigInput` via:
//
//	ConfigNodepoolsConfigArgs{...}
type ConfigNodepoolsConfigInput interface {
	pulumi.Input

	ToConfigNodepoolsConfigOutput() ConfigNodepoolsConfigOutput
	ToConfigNodepoolsConfigOutputWithContext(context.Context) ConfigNodepoolsConfigOutput
}

type ConfigNodepoolsConfigArgs struct {
	// Agents is a list of NodepoolConfig objects, each representing a configuration for a pool of agent nodes.
	Agents ConfigNodepoolConfigArrayInput `pulumi:"Agents"`
	// Servers is a list of NodepoolConfig objects, each representing a configuration for a pool of server nodes.
	Servers ConfigNodepoolConfigArrayInput `pulumi:"Servers"`
}

func (ConfigNodepoolsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodepoolsConfig)(nil)).Elem()
}

func (i ConfigNodepoolsConfigArgs) ToConfigNodepoolsConfigOutput() ConfigNodepoolsConfigOutput {
	return i.ToConfigNodepoolsConfigOutputWithContext(context.Background())
}

func (i ConfigNodepoolsConfigArgs) ToConfigNodepoolsConfigOutputWithContext(ctx context.Context) ConfigNodepoolsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodepoolsConfigOutput)
}

func (i ConfigNodepoolsConfigArgs) ToConfigNodepoolsConfigPtrOutput() ConfigNodepoolsConfigPtrOutput {
	return i.ToConfigNodepoolsConfigPtrOutputWithContext(context.Background())
}

func (i ConfigNodepoolsConfigArgs) ToConfigNodepoolsConfigPtrOutputWithContext(ctx context.Context) ConfigNodepoolsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodepoolsConfigOutput).ToConfigNodepoolsConfigPtrOutputWithContext(ctx)
}

// ConfigNodepoolsConfigPtrInput is an input type that accepts ConfigNodepoolsConfigArgs, ConfigNodepoolsConfigPtr and ConfigNodepoolsConfigPtrOutput values.
// You can construct a concrete instance of `ConfigNodepoolsConfigPtrInput` via:
//
//	        ConfigNodepoolsConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigNodepoolsConfigPtrInput interface {
	pulumi.Input

	ToConfigNodepoolsConfigPtrOutput() ConfigNodepoolsConfigPtrOutput
	ToConfigNodepoolsConfigPtrOutputWithContext(context.Context) ConfigNodepoolsConfigPtrOutput
}

type configNodepoolsConfigPtrType ConfigNodepoolsConfigArgs

func ConfigNodepoolsConfigPtr(v *ConfigNodepoolsConfigArgs) ConfigNodepoolsConfigPtrInput {
	return (*configNodepoolsConfigPtrType)(v)
}

func (*configNodepoolsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNodepoolsConfig)(nil)).Elem()
}

func (i *configNodepoolsConfigPtrType) ToConfigNodepoolsConfigPtrOutput() ConfigNodepoolsConfigPtrOutput {
	return i.ToConfigNodepoolsConfigPtrOutputWithContext(context.Background())
}

func (i *configNodepoolsConfigPtrType) ToConfigNodepoolsConfigPtrOutputWithContext(ctx context.Context) ConfigNodepoolsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigNodepoolsConfigPtrOutput)
}

type ConfigNodepoolsConfigOutput struct{ *pulumi.OutputState }

func (ConfigNodepoolsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigNodepoolsConfig)(nil)).Elem()
}

func (o ConfigNodepoolsConfigOutput) ToConfigNodepoolsConfigOutput() ConfigNodepoolsConfigOutput {
	return o
}

func (o ConfigNodepoolsConfigOutput) ToConfigNodepoolsConfigOutputWithContext(ctx context.Context) ConfigNodepoolsConfigOutput {
	return o
}

func (o ConfigNodepoolsConfigOutput) ToConfigNodepoolsConfigPtrOutput() ConfigNodepoolsConfigPtrOutput {
	return o.ToConfigNodepoolsConfigPtrOutputWithContext(context.Background())
}

func (o ConfigNodepoolsConfigOutput) ToConfigNodepoolsConfigPtrOutputWithContext(ctx context.Context) ConfigNodepoolsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigNodepoolsConfig) *ConfigNodepoolsConfig {
		return &v
	}).(ConfigNodepoolsConfigPtrOutput)
}

// Agents is a list of NodepoolConfig objects, each representing a configuration for a pool of agent nodes.
func (o ConfigNodepoolsConfigOutput) Agents() ConfigNodepoolConfigArrayOutput {
	return o.ApplyT(func(v ConfigNodepoolsConfig) []ConfigNodepoolConfig { return v.Agents }).(ConfigNodepoolConfigArrayOutput)
}

// Servers is a list of NodepoolConfig objects, each representing a configuration for a pool of server nodes.
func (o ConfigNodepoolsConfigOutput) Servers() ConfigNodepoolConfigArrayOutput {
	return o.ApplyT(func(v ConfigNodepoolsConfig) []ConfigNodepoolConfig { return v.Servers }).(ConfigNodepoolConfigArrayOutput)
}

type ConfigNodepoolsConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigNodepoolsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigNodepoolsConfig)(nil)).Elem()
}

func (o ConfigNodepoolsConfigPtrOutput) ToConfigNodepoolsConfigPtrOutput() ConfigNodepoolsConfigPtrOutput {
	return o
}

func (o ConfigNodepoolsConfigPtrOutput) ToConfigNodepoolsConfigPtrOutputWithContext(ctx context.Context) ConfigNodepoolsConfigPtrOutput {
	return o
}

func (o ConfigNodepoolsConfigPtrOutput) Elem() ConfigNodepoolsConfigOutput {
	return o.ApplyT(func(v *ConfigNodepoolsConfig) ConfigNodepoolsConfig {
		if v != nil {
			return *v
		}
		var ret ConfigNodepoolsConfig
		return ret
	}).(ConfigNodepoolsConfigOutput)
}

// Agents is a list of NodepoolConfig objects, each representing a configuration for a pool of agent nodes.
func (o ConfigNodepoolsConfigPtrOutput) Agents() ConfigNodepoolConfigArrayOutput {
	return o.ApplyT(func(v *ConfigNodepoolsConfig) []ConfigNodepoolConfig {
		if v == nil {
			return nil
		}
		return v.Agents
	}).(ConfigNodepoolConfigArrayOutput)
}

// Servers is a list of NodepoolConfig objects, each representing a configuration for a pool of server nodes.
func (o ConfigNodepoolsConfigPtrOutput) Servers() ConfigNodepoolConfigArrayOutput {
	return o.ApplyT(func(v *ConfigNodepoolsConfig) []ConfigNodepoolConfig {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(ConfigNodepoolConfigArrayOutput)
}

type ConfigServerConfig struct {
	// AdditionalSSHKeys contains a list of additional public SSH keys to install in the server's user account.
	AdditionalSSHKeys []string `pulumi:"AdditionalSSHKeys"`
	// Firewall points to an optional configuration for a firewall to be associated with the server.
	Firewall *ConfigFirewallConfig `pulumi:"Firewall"`
	// Hostname is the desired hostname to assign to the server. Default is `phkh-${name-of-stack}-${name-of-cluster}-${id-of-node}`.
	Hostname *string `pulumi:"Hostname"`
	// Image specifies the operating system image to use for the server (e.g., "ubuntu-20.04" or id of private image). Default is autodiscovered.
	Image *string `pulumi:"Image"`
	// Location specifies the physical location or data center where the server will be hosted (e.g., "fsn1"). Default is hel1.
	Location *string `pulumi:"Location"`
	// ServerType specifies the type of server to be provisioned (e.g., "cx11", "cx21"). Default is cx21.
	ServerType *string `pulumi:"ServerType"`
	// UserName is the primary user account name that will be created on the server. Default is rancher.
	UserName *string `pulumi:"UserName"`
	// UserPasswd is the password for the primary user account on the server.
	UserPasswd *string `pulumi:"UserPasswd"`
}

// ConfigServerConfigInput is an input type that accepts ConfigServerConfigArgs and ConfigServerConfigOutput values.
// You can construct a concrete instance of `ConfigServerConfigInput` via:
//
//	ConfigServerConfigArgs{...}
type ConfigServerConfigInput interface {
	pulumi.Input

	ToConfigServerConfigOutput() ConfigServerConfigOutput
	ToConfigServerConfigOutputWithContext(context.Context) ConfigServerConfigOutput
}

type ConfigServerConfigArgs struct {
	// AdditionalSSHKeys contains a list of additional public SSH keys to install in the server's user account.
	AdditionalSSHKeys pulumi.StringArrayInput `pulumi:"AdditionalSSHKeys"`
	// Firewall points to an optional configuration for a firewall to be associated with the server.
	Firewall ConfigFirewallConfigPtrInput `pulumi:"Firewall"`
	// Hostname is the desired hostname to assign to the server. Default is `phkh-${name-of-stack}-${name-of-cluster}-${id-of-node}`.
	Hostname pulumi.StringPtrInput `pulumi:"Hostname"`
	// Image specifies the operating system image to use for the server (e.g., "ubuntu-20.04" or id of private image). Default is autodiscovered.
	Image pulumi.StringPtrInput `pulumi:"Image"`
	// Location specifies the physical location or data center where the server will be hosted (e.g., "fsn1"). Default is hel1.
	Location pulumi.StringPtrInput `pulumi:"Location"`
	// ServerType specifies the type of server to be provisioned (e.g., "cx11", "cx21"). Default is cx21.
	ServerType pulumi.StringPtrInput `pulumi:"ServerType"`
	// UserName is the primary user account name that will be created on the server. Default is rancher.
	UserName pulumi.StringPtrInput `pulumi:"UserName"`
	// UserPasswd is the password for the primary user account on the server.
	UserPasswd pulumi.StringPtrInput `pulumi:"UserPasswd"`
}

func (ConfigServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigServerConfig)(nil)).Elem()
}

func (i ConfigServerConfigArgs) ToConfigServerConfigOutput() ConfigServerConfigOutput {
	return i.ToConfigServerConfigOutputWithContext(context.Background())
}

func (i ConfigServerConfigArgs) ToConfigServerConfigOutputWithContext(ctx context.Context) ConfigServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigServerConfigOutput)
}

func (i ConfigServerConfigArgs) ToConfigServerConfigPtrOutput() ConfigServerConfigPtrOutput {
	return i.ToConfigServerConfigPtrOutputWithContext(context.Background())
}

func (i ConfigServerConfigArgs) ToConfigServerConfigPtrOutputWithContext(ctx context.Context) ConfigServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigServerConfigOutput).ToConfigServerConfigPtrOutputWithContext(ctx)
}

// ConfigServerConfigPtrInput is an input type that accepts ConfigServerConfigArgs, ConfigServerConfigPtr and ConfigServerConfigPtrOutput values.
// You can construct a concrete instance of `ConfigServerConfigPtrInput` via:
//
//	        ConfigServerConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigServerConfigPtrInput interface {
	pulumi.Input

	ToConfigServerConfigPtrOutput() ConfigServerConfigPtrOutput
	ToConfigServerConfigPtrOutputWithContext(context.Context) ConfigServerConfigPtrOutput
}

type configServerConfigPtrType ConfigServerConfigArgs

func ConfigServerConfigPtr(v *ConfigServerConfigArgs) ConfigServerConfigPtrInput {
	return (*configServerConfigPtrType)(v)
}

func (*configServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigServerConfig)(nil)).Elem()
}

func (i *configServerConfigPtrType) ToConfigServerConfigPtrOutput() ConfigServerConfigPtrOutput {
	return i.ToConfigServerConfigPtrOutputWithContext(context.Background())
}

func (i *configServerConfigPtrType) ToConfigServerConfigPtrOutputWithContext(ctx context.Context) ConfigServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigServerConfigPtrOutput)
}

type ConfigServerConfigOutput struct{ *pulumi.OutputState }

func (ConfigServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigServerConfig)(nil)).Elem()
}

func (o ConfigServerConfigOutput) ToConfigServerConfigOutput() ConfigServerConfigOutput {
	return o
}

func (o ConfigServerConfigOutput) ToConfigServerConfigOutputWithContext(ctx context.Context) ConfigServerConfigOutput {
	return o
}

func (o ConfigServerConfigOutput) ToConfigServerConfigPtrOutput() ConfigServerConfigPtrOutput {
	return o.ToConfigServerConfigPtrOutputWithContext(context.Background())
}

func (o ConfigServerConfigOutput) ToConfigServerConfigPtrOutputWithContext(ctx context.Context) ConfigServerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigServerConfig) *ConfigServerConfig {
		return &v
	}).(ConfigServerConfigPtrOutput)
}

// AdditionalSSHKeys contains a list of additional public SSH keys to install in the server's user account.
func (o ConfigServerConfigOutput) AdditionalSSHKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigServerConfig) []string { return v.AdditionalSSHKeys }).(pulumi.StringArrayOutput)
}

// Firewall points to an optional configuration for a firewall to be associated with the server.
func (o ConfigServerConfigOutput) Firewall() ConfigFirewallConfigPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *ConfigFirewallConfig { return v.Firewall }).(ConfigFirewallConfigPtrOutput)
}

// Hostname is the desired hostname to assign to the server. Default is `phkh-${name-of-stack}-${name-of-cluster}-${id-of-node}`.
func (o ConfigServerConfigOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Image specifies the operating system image to use for the server (e.g., "ubuntu-20.04" or id of private image). Default is autodiscovered.
func (o ConfigServerConfigOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Location specifies the physical location or data center where the server will be hosted (e.g., "fsn1"). Default is hel1.
func (o ConfigServerConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// ServerType specifies the type of server to be provisioned (e.g., "cx11", "cx21"). Default is cx21.
func (o ConfigServerConfigOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// UserName is the primary user account name that will be created on the server. Default is rancher.
func (o ConfigServerConfigOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// UserPasswd is the password for the primary user account on the server.
func (o ConfigServerConfigOutput) UserPasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigServerConfig) *string { return v.UserPasswd }).(pulumi.StringPtrOutput)
}

type ConfigServerConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigServerConfig)(nil)).Elem()
}

func (o ConfigServerConfigPtrOutput) ToConfigServerConfigPtrOutput() ConfigServerConfigPtrOutput {
	return o
}

func (o ConfigServerConfigPtrOutput) ToConfigServerConfigPtrOutputWithContext(ctx context.Context) ConfigServerConfigPtrOutput {
	return o
}

func (o ConfigServerConfigPtrOutput) Elem() ConfigServerConfigOutput {
	return o.ApplyT(func(v *ConfigServerConfig) ConfigServerConfig {
		if v != nil {
			return *v
		}
		var ret ConfigServerConfig
		return ret
	}).(ConfigServerConfigOutput)
}

// AdditionalSSHKeys contains a list of additional public SSH keys to install in the server's user account.
func (o ConfigServerConfigPtrOutput) AdditionalSSHKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigServerConfig) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalSSHKeys
	}).(pulumi.StringArrayOutput)
}

// Firewall points to an optional configuration for a firewall to be associated with the server.
func (o ConfigServerConfigPtrOutput) Firewall() ConfigFirewallConfigPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *ConfigFirewallConfig {
		if v == nil {
			return nil
		}
		return v.Firewall
	}).(ConfigFirewallConfigPtrOutput)
}

// Hostname is the desired hostname to assign to the server. Default is `phkh-${name-of-stack}-${name-of-cluster}-${id-of-node}`.
func (o ConfigServerConfigPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Image specifies the operating system image to use for the server (e.g., "ubuntu-20.04" or id of private image). Default is autodiscovered.
func (o ConfigServerConfigPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Location specifies the physical location or data center where the server will be hosted (e.g., "fsn1"). Default is hel1.
func (o ConfigServerConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// ServerType specifies the type of server to be provisioned (e.g., "cx11", "cx21"). Default is cx21.
func (o ConfigServerConfigPtrOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerType
	}).(pulumi.StringPtrOutput)
}

// UserName is the primary user account name that will be created on the server. Default is rancher.
func (o ConfigServerConfigPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// UserPasswd is the password for the primary user account on the server.
func (o ConfigServerConfigPtrOutput) UserPasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserPasswd
	}).(pulumi.StringPtrOutput)
}

type FirewallConfig struct {
	// AdditionalRules is a list of additional rules to be applied.
	AdditionalRules []FirewallRuleConfig `pulumi:"AdditionalRules"`
	// AllowICMP indicates whether ICMP traffic is allowed. Default is false.
	AllowICMP *bool `pulumi:"AllowICMP"`
	// Enabled specifies if the configuration is active. Default is false.
	Enabled *bool `pulumi:"Enabled"`
	// SSH holds the SSH specific configurations.
	SSH *FirewallSSHConfig `pulumi:"SSH"`
}

// FirewallConfigInput is an input type that accepts FirewallConfigArgs and FirewallConfigOutput values.
// You can construct a concrete instance of `FirewallConfigInput` via:
//
//	FirewallConfigArgs{...}
type FirewallConfigInput interface {
	pulumi.Input

	ToFirewallConfigOutput() FirewallConfigOutput
	ToFirewallConfigOutputWithContext(context.Context) FirewallConfigOutput
}

type FirewallConfigArgs struct {
	// AdditionalRules is a list of additional rules to be applied.
	AdditionalRules FirewallRuleConfigArrayInput `pulumi:"AdditionalRules"`
	// AllowICMP indicates whether ICMP traffic is allowed. Default is false.
	AllowICMP pulumi.BoolPtrInput `pulumi:"AllowICMP"`
	// Enabled specifies if the configuration is active. Default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// SSH holds the SSH specific configurations.
	SSH FirewallSSHConfigPtrInput `pulumi:"SSH"`
}

func (FirewallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallConfig)(nil)).Elem()
}

func (i FirewallConfigArgs) ToFirewallConfigOutput() FirewallConfigOutput {
	return i.ToFirewallConfigOutputWithContext(context.Background())
}

func (i FirewallConfigArgs) ToFirewallConfigOutputWithContext(ctx context.Context) FirewallConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallConfigOutput)
}

func (i FirewallConfigArgs) ToFirewallConfigPtrOutput() FirewallConfigPtrOutput {
	return i.ToFirewallConfigPtrOutputWithContext(context.Background())
}

func (i FirewallConfigArgs) ToFirewallConfigPtrOutputWithContext(ctx context.Context) FirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallConfigOutput).ToFirewallConfigPtrOutputWithContext(ctx)
}

// FirewallConfigPtrInput is an input type that accepts FirewallConfigArgs, FirewallConfigPtr and FirewallConfigPtrOutput values.
// You can construct a concrete instance of `FirewallConfigPtrInput` via:
//
//	        FirewallConfigArgs{...}
//
//	or:
//
//	        nil
type FirewallConfigPtrInput interface {
	pulumi.Input

	ToFirewallConfigPtrOutput() FirewallConfigPtrOutput
	ToFirewallConfigPtrOutputWithContext(context.Context) FirewallConfigPtrOutput
}

type firewallConfigPtrType FirewallConfigArgs

func FirewallConfigPtr(v *FirewallConfigArgs) FirewallConfigPtrInput {
	return (*firewallConfigPtrType)(v)
}

func (*firewallConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallConfig)(nil)).Elem()
}

func (i *firewallConfigPtrType) ToFirewallConfigPtrOutput() FirewallConfigPtrOutput {
	return i.ToFirewallConfigPtrOutputWithContext(context.Background())
}

func (i *firewallConfigPtrType) ToFirewallConfigPtrOutputWithContext(ctx context.Context) FirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallConfigPtrOutput)
}

type FirewallConfigOutput struct{ *pulumi.OutputState }

func (FirewallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallConfig)(nil)).Elem()
}

func (o FirewallConfigOutput) ToFirewallConfigOutput() FirewallConfigOutput {
	return o
}

func (o FirewallConfigOutput) ToFirewallConfigOutputWithContext(ctx context.Context) FirewallConfigOutput {
	return o
}

func (o FirewallConfigOutput) ToFirewallConfigPtrOutput() FirewallConfigPtrOutput {
	return o.ToFirewallConfigPtrOutputWithContext(context.Background())
}

func (o FirewallConfigOutput) ToFirewallConfigPtrOutputWithContext(ctx context.Context) FirewallConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallConfig) *FirewallConfig {
		return &v
	}).(FirewallConfigPtrOutput)
}

// AdditionalRules is a list of additional rules to be applied.
func (o FirewallConfigOutput) AdditionalRules() FirewallRuleConfigArrayOutput {
	return o.ApplyT(func(v FirewallConfig) []FirewallRuleConfig { return v.AdditionalRules }).(FirewallRuleConfigArrayOutput)
}

// AllowICMP indicates whether ICMP traffic is allowed. Default is false.
func (o FirewallConfigOutput) AllowICMP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallConfig) *bool { return v.AllowICMP }).(pulumi.BoolPtrOutput)
}

// Enabled specifies if the configuration is active. Default is false.
func (o FirewallConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// SSH holds the SSH specific configurations.
func (o FirewallConfigOutput) SSH() FirewallSSHConfigPtrOutput {
	return o.ApplyT(func(v FirewallConfig) *FirewallSSHConfig { return v.SSH }).(FirewallSSHConfigPtrOutput)
}

type FirewallConfigPtrOutput struct{ *pulumi.OutputState }

func (FirewallConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallConfig)(nil)).Elem()
}

func (o FirewallConfigPtrOutput) ToFirewallConfigPtrOutput() FirewallConfigPtrOutput {
	return o
}

func (o FirewallConfigPtrOutput) ToFirewallConfigPtrOutputWithContext(ctx context.Context) FirewallConfigPtrOutput {
	return o
}

func (o FirewallConfigPtrOutput) Elem() FirewallConfigOutput {
	return o.ApplyT(func(v *FirewallConfig) FirewallConfig {
		if v != nil {
			return *v
		}
		var ret FirewallConfig
		return ret
	}).(FirewallConfigOutput)
}

// AdditionalRules is a list of additional rules to be applied.
func (o FirewallConfigPtrOutput) AdditionalRules() FirewallRuleConfigArrayOutput {
	return o.ApplyT(func(v *FirewallConfig) []FirewallRuleConfig {
		if v == nil {
			return nil
		}
		return v.AdditionalRules
	}).(FirewallRuleConfigArrayOutput)
}

// AllowICMP indicates whether ICMP traffic is allowed. Default is false.
func (o FirewallConfigPtrOutput) AllowICMP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowICMP
	}).(pulumi.BoolPtrOutput)
}

// Enabled specifies if the configuration is active. Default is false.
func (o FirewallConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// SSH holds the SSH specific configurations.
func (o FirewallConfigPtrOutput) SSH() FirewallSSHConfigPtrOutput {
	return o.ApplyT(func(v *FirewallConfig) *FirewallSSHConfig {
		if v == nil {
			return nil
		}
		return v.SSH
	}).(FirewallSSHConfigPtrOutput)
}

type FirewallRuleConfig struct {
	// Description provides a human-readable explanation of what the rule is intended to do.
	Description *string `pulumi:"Description"`
	// Port specifies the network port number or range applicable for the rule. Required.
	Port *string `pulumi:"Port"`
	// Protocol specifies the network protocol (e.g., TCP, UDP) applicable for the rule. Default is TCP.
	Protocol *string `pulumi:"Protocol"`
	// SourceIps lists IP addresses or subnets from which traffic is allowed or to which traffic is directed, based on the Direction. Required.
	SourceIps []string `pulumi:"SourceIps"`
}

// FirewallRuleConfigInput is an input type that accepts FirewallRuleConfigArgs and FirewallRuleConfigOutput values.
// You can construct a concrete instance of `FirewallRuleConfigInput` via:
//
//	FirewallRuleConfigArgs{...}
type FirewallRuleConfigInput interface {
	pulumi.Input

	ToFirewallRuleConfigOutput() FirewallRuleConfigOutput
	ToFirewallRuleConfigOutputWithContext(context.Context) FirewallRuleConfigOutput
}

type FirewallRuleConfigArgs struct {
	// Description provides a human-readable explanation of what the rule is intended to do.
	Description pulumi.StringPtrInput `pulumi:"Description"`
	// Port specifies the network port number or range applicable for the rule. Required.
	Port pulumi.StringPtrInput `pulumi:"Port"`
	// Protocol specifies the network protocol (e.g., TCP, UDP) applicable for the rule. Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"Protocol"`
	// SourceIps lists IP addresses or subnets from which traffic is allowed or to which traffic is directed, based on the Direction. Required.
	SourceIps pulumi.StringArrayInput `pulumi:"SourceIps"`
}

func (FirewallRuleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleConfig)(nil)).Elem()
}

func (i FirewallRuleConfigArgs) ToFirewallRuleConfigOutput() FirewallRuleConfigOutput {
	return i.ToFirewallRuleConfigOutputWithContext(context.Background())
}

func (i FirewallRuleConfigArgs) ToFirewallRuleConfigOutputWithContext(ctx context.Context) FirewallRuleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleConfigOutput)
}

// FirewallRuleConfigArrayInput is an input type that accepts FirewallRuleConfigArray and FirewallRuleConfigArrayOutput values.
// You can construct a concrete instance of `FirewallRuleConfigArrayInput` via:
//
//	FirewallRuleConfigArray{ FirewallRuleConfigArgs{...} }
type FirewallRuleConfigArrayInput interface {
	pulumi.Input

	ToFirewallRuleConfigArrayOutput() FirewallRuleConfigArrayOutput
	ToFirewallRuleConfigArrayOutputWithContext(context.Context) FirewallRuleConfigArrayOutput
}

type FirewallRuleConfigArray []FirewallRuleConfigInput

func (FirewallRuleConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleConfig)(nil)).Elem()
}

func (i FirewallRuleConfigArray) ToFirewallRuleConfigArrayOutput() FirewallRuleConfigArrayOutput {
	return i.ToFirewallRuleConfigArrayOutputWithContext(context.Background())
}

func (i FirewallRuleConfigArray) ToFirewallRuleConfigArrayOutputWithContext(ctx context.Context) FirewallRuleConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleConfigArrayOutput)
}

type FirewallRuleConfigOutput struct{ *pulumi.OutputState }

func (FirewallRuleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRuleConfig)(nil)).Elem()
}

func (o FirewallRuleConfigOutput) ToFirewallRuleConfigOutput() FirewallRuleConfigOutput {
	return o
}

func (o FirewallRuleConfigOutput) ToFirewallRuleConfigOutputWithContext(ctx context.Context) FirewallRuleConfigOutput {
	return o
}

// Description provides a human-readable explanation of what the rule is intended to do.
func (o FirewallRuleConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Port specifies the network port number or range applicable for the rule. Required.
func (o FirewallRuleConfigOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleConfig) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Protocol specifies the network protocol (e.g., TCP, UDP) applicable for the rule. Default is TCP.
func (o FirewallRuleConfigOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRuleConfig) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// SourceIps lists IP addresses or subnets from which traffic is allowed or to which traffic is directed, based on the Direction. Required.
func (o FirewallRuleConfigOutput) SourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallRuleConfig) []string { return v.SourceIps }).(pulumi.StringArrayOutput)
}

type FirewallRuleConfigArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRuleConfig)(nil)).Elem()
}

func (o FirewallRuleConfigArrayOutput) ToFirewallRuleConfigArrayOutput() FirewallRuleConfigArrayOutput {
	return o
}

func (o FirewallRuleConfigArrayOutput) ToFirewallRuleConfigArrayOutputWithContext(ctx context.Context) FirewallRuleConfigArrayOutput {
	return o
}

func (o FirewallRuleConfigArrayOutput) Index(i pulumi.IntInput) FirewallRuleConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRuleConfig {
		return vs[0].([]FirewallRuleConfig)[vs[1].(int)]
	}).(FirewallRuleConfigOutput)
}

type FirewallSSHConfig struct {
	// Allow indicates whether SSH access is permitted. Default is false.
	Allow *bool `pulumi:"Allow"`
	// AllowedIps lists specific IP addresses that are permitted to access via SSH.
	AllowedIps []string `pulumi:"AllowedIps"`
	// DisallowOwnIP specifies whether SSH access from the deployer's own IP address is disallowed. Default is false.
	DisallowOwnIP *bool `pulumi:"DisallowOwnIP"`
}

// FirewallSSHConfigInput is an input type that accepts FirewallSSHConfigArgs and FirewallSSHConfigOutput values.
// You can construct a concrete instance of `FirewallSSHConfigInput` via:
//
//	FirewallSSHConfigArgs{...}
type FirewallSSHConfigInput interface {
	pulumi.Input

	ToFirewallSSHConfigOutput() FirewallSSHConfigOutput
	ToFirewallSSHConfigOutputWithContext(context.Context) FirewallSSHConfigOutput
}

type FirewallSSHConfigArgs struct {
	// Allow indicates whether SSH access is permitted. Default is false.
	Allow pulumi.BoolPtrInput `pulumi:"Allow"`
	// AllowedIps lists specific IP addresses that are permitted to access via SSH.
	AllowedIps pulumi.StringArrayInput `pulumi:"AllowedIps"`
	// DisallowOwnIP specifies whether SSH access from the deployer's own IP address is disallowed. Default is false.
	DisallowOwnIP pulumi.BoolPtrInput `pulumi:"DisallowOwnIP"`
}

func (FirewallSSHConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSSHConfig)(nil)).Elem()
}

func (i FirewallSSHConfigArgs) ToFirewallSSHConfigOutput() FirewallSSHConfigOutput {
	return i.ToFirewallSSHConfigOutputWithContext(context.Background())
}

func (i FirewallSSHConfigArgs) ToFirewallSSHConfigOutputWithContext(ctx context.Context) FirewallSSHConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSSHConfigOutput)
}

func (i FirewallSSHConfigArgs) ToFirewallSSHConfigPtrOutput() FirewallSSHConfigPtrOutput {
	return i.ToFirewallSSHConfigPtrOutputWithContext(context.Background())
}

func (i FirewallSSHConfigArgs) ToFirewallSSHConfigPtrOutputWithContext(ctx context.Context) FirewallSSHConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSSHConfigOutput).ToFirewallSSHConfigPtrOutputWithContext(ctx)
}

// FirewallSSHConfigPtrInput is an input type that accepts FirewallSSHConfigArgs, FirewallSSHConfigPtr and FirewallSSHConfigPtrOutput values.
// You can construct a concrete instance of `FirewallSSHConfigPtrInput` via:
//
//	        FirewallSSHConfigArgs{...}
//
//	or:
//
//	        nil
type FirewallSSHConfigPtrInput interface {
	pulumi.Input

	ToFirewallSSHConfigPtrOutput() FirewallSSHConfigPtrOutput
	ToFirewallSSHConfigPtrOutputWithContext(context.Context) FirewallSSHConfigPtrOutput
}

type firewallSSHConfigPtrType FirewallSSHConfigArgs

func FirewallSSHConfigPtr(v *FirewallSSHConfigArgs) FirewallSSHConfigPtrInput {
	return (*firewallSSHConfigPtrType)(v)
}

func (*firewallSSHConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSSHConfig)(nil)).Elem()
}

func (i *firewallSSHConfigPtrType) ToFirewallSSHConfigPtrOutput() FirewallSSHConfigPtrOutput {
	return i.ToFirewallSSHConfigPtrOutputWithContext(context.Background())
}

func (i *firewallSSHConfigPtrType) ToFirewallSSHConfigPtrOutputWithContext(ctx context.Context) FirewallSSHConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSSHConfigPtrOutput)
}

type FirewallSSHConfigOutput struct{ *pulumi.OutputState }

func (FirewallSSHConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSSHConfig)(nil)).Elem()
}

func (o FirewallSSHConfigOutput) ToFirewallSSHConfigOutput() FirewallSSHConfigOutput {
	return o
}

func (o FirewallSSHConfigOutput) ToFirewallSSHConfigOutputWithContext(ctx context.Context) FirewallSSHConfigOutput {
	return o
}

func (o FirewallSSHConfigOutput) ToFirewallSSHConfigPtrOutput() FirewallSSHConfigPtrOutput {
	return o.ToFirewallSSHConfigPtrOutputWithContext(context.Background())
}

func (o FirewallSSHConfigOutput) ToFirewallSSHConfigPtrOutputWithContext(ctx context.Context) FirewallSSHConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallSSHConfig) *FirewallSSHConfig {
		return &v
	}).(FirewallSSHConfigPtrOutput)
}

// Allow indicates whether SSH access is permitted. Default is false.
func (o FirewallSSHConfigOutput) Allow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallSSHConfig) *bool { return v.Allow }).(pulumi.BoolPtrOutput)
}

// AllowedIps lists specific IP addresses that are permitted to access via SSH.
func (o FirewallSSHConfigOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallSSHConfig) []string { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// DisallowOwnIP specifies whether SSH access from the deployer's own IP address is disallowed. Default is false.
func (o FirewallSSHConfigOutput) DisallowOwnIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallSSHConfig) *bool { return v.DisallowOwnIP }).(pulumi.BoolPtrOutput)
}

type FirewallSSHConfigPtrOutput struct{ *pulumi.OutputState }

func (FirewallSSHConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSSHConfig)(nil)).Elem()
}

func (o FirewallSSHConfigPtrOutput) ToFirewallSSHConfigPtrOutput() FirewallSSHConfigPtrOutput {
	return o
}

func (o FirewallSSHConfigPtrOutput) ToFirewallSSHConfigPtrOutputWithContext(ctx context.Context) FirewallSSHConfigPtrOutput {
	return o
}

func (o FirewallSSHConfigPtrOutput) Elem() FirewallSSHConfigOutput {
	return o.ApplyT(func(v *FirewallSSHConfig) FirewallSSHConfig {
		if v != nil {
			return *v
		}
		var ret FirewallSSHConfig
		return ret
	}).(FirewallSSHConfigOutput)
}

// Allow indicates whether SSH access is permitted. Default is false.
func (o FirewallSSHConfigPtrOutput) Allow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallSSHConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(pulumi.BoolPtrOutput)
}

// AllowedIps lists specific IP addresses that are permitted to access via SSH.
func (o FirewallSSHConfigPtrOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallSSHConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedIps
	}).(pulumi.StringArrayOutput)
}

// DisallowOwnIP specifies whether SSH access from the deployer's own IP address is disallowed. Default is false.
func (o FirewallSSHConfigPtrOutput) DisallowOwnIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallSSHConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisallowOwnIP
	}).(pulumi.BoolPtrOutput)
}

type HelmConfig struct {
	// ValuesFilePaths is a list of path/to/file to values files. See https://www.pulumi.com/registry/packages/kubernetes/api-docs/helm/v3/release/#valueyamlfiles_nodejs for details.
	ValuesFilePath []string `pulumi:"ValuesFilePath"`
	// Version is version of helm chart. Default is taken from default-helm-versions.yaml in template's versions directory.
	Version *string `pulumi:"Version"`
}

// HelmConfigInput is an input type that accepts HelmConfigArgs and HelmConfigOutput values.
// You can construct a concrete instance of `HelmConfigInput` via:
//
//	HelmConfigArgs{...}
type HelmConfigInput interface {
	pulumi.Input

	ToHelmConfigOutput() HelmConfigOutput
	ToHelmConfigOutputWithContext(context.Context) HelmConfigOutput
}

type HelmConfigArgs struct {
	// ValuesFilePaths is a list of path/to/file to values files. See https://www.pulumi.com/registry/packages/kubernetes/api-docs/helm/v3/release/#valueyamlfiles_nodejs for details.
	ValuesFilePath pulumi.StringArrayInput `pulumi:"ValuesFilePath"`
	// Version is version of helm chart. Default is taken from default-helm-versions.yaml in template's versions directory.
	Version pulumi.StringPtrInput `pulumi:"Version"`
}

func (HelmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmConfig)(nil)).Elem()
}

func (i HelmConfigArgs) ToHelmConfigOutput() HelmConfigOutput {
	return i.ToHelmConfigOutputWithContext(context.Background())
}

func (i HelmConfigArgs) ToHelmConfigOutputWithContext(ctx context.Context) HelmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmConfigOutput)
}

func (i HelmConfigArgs) ToHelmConfigPtrOutput() HelmConfigPtrOutput {
	return i.ToHelmConfigPtrOutputWithContext(context.Background())
}

func (i HelmConfigArgs) ToHelmConfigPtrOutputWithContext(ctx context.Context) HelmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmConfigOutput).ToHelmConfigPtrOutputWithContext(ctx)
}

// HelmConfigPtrInput is an input type that accepts HelmConfigArgs, HelmConfigPtr and HelmConfigPtrOutput values.
// You can construct a concrete instance of `HelmConfigPtrInput` via:
//
//	        HelmConfigArgs{...}
//
//	or:
//
//	        nil
type HelmConfigPtrInput interface {
	pulumi.Input

	ToHelmConfigPtrOutput() HelmConfigPtrOutput
	ToHelmConfigPtrOutputWithContext(context.Context) HelmConfigPtrOutput
}

type helmConfigPtrType HelmConfigArgs

func HelmConfigPtr(v *HelmConfigArgs) HelmConfigPtrInput {
	return (*helmConfigPtrType)(v)
}

func (*helmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmConfig)(nil)).Elem()
}

func (i *helmConfigPtrType) ToHelmConfigPtrOutput() HelmConfigPtrOutput {
	return i.ToHelmConfigPtrOutputWithContext(context.Background())
}

func (i *helmConfigPtrType) ToHelmConfigPtrOutputWithContext(ctx context.Context) HelmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmConfigPtrOutput)
}

type HelmConfigOutput struct{ *pulumi.OutputState }

func (HelmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmConfig)(nil)).Elem()
}

func (o HelmConfigOutput) ToHelmConfigOutput() HelmConfigOutput {
	return o
}

func (o HelmConfigOutput) ToHelmConfigOutputWithContext(ctx context.Context) HelmConfigOutput {
	return o
}

func (o HelmConfigOutput) ToHelmConfigPtrOutput() HelmConfigPtrOutput {
	return o.ToHelmConfigPtrOutputWithContext(context.Background())
}

func (o HelmConfigOutput) ToHelmConfigPtrOutputWithContext(ctx context.Context) HelmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmConfig) *HelmConfig {
		return &v
	}).(HelmConfigPtrOutput)
}

// ValuesFilePaths is a list of path/to/file to values files. See https://www.pulumi.com/registry/packages/kubernetes/api-docs/helm/v3/release/#valueyamlfiles_nodejs for details.
func (o HelmConfigOutput) ValuesFilePath() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmConfig) []string { return v.ValuesFilePath }).(pulumi.StringArrayOutput)
}

// Version is version of helm chart. Default is taken from default-helm-versions.yaml in template's versions directory.
func (o HelmConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmConfigPtrOutput struct{ *pulumi.OutputState }

func (HelmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmConfig)(nil)).Elem()
}

func (o HelmConfigPtrOutput) ToHelmConfigPtrOutput() HelmConfigPtrOutput {
	return o
}

func (o HelmConfigPtrOutput) ToHelmConfigPtrOutputWithContext(ctx context.Context) HelmConfigPtrOutput {
	return o
}

func (o HelmConfigPtrOutput) Elem() HelmConfigOutput {
	return o.ApplyT(func(v *HelmConfig) HelmConfig {
		if v != nil {
			return *v
		}
		var ret HelmConfig
		return ret
	}).(HelmConfigOutput)
}

// ValuesFilePaths is a list of path/to/file to values files. See https://www.pulumi.com/registry/packages/kubernetes/api-docs/helm/v3/release/#valueyamlfiles_nodejs for details.
func (o HelmConfigPtrOutput) ValuesFilePath() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmConfig) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFilePath
	}).(pulumi.StringArrayOutput)
}

// Version is version of helm chart. Default is taken from default-helm-versions.yaml in template's versions directory.
func (o HelmConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type K3sConfig struct {
	// [Experimental] clean-data-on-upgrade is used to delete all data while upgrade. This is based on the script https://docs.k3s.io/upgrades/killall
	CleanDataOnUpgrade *bool `pulumi:"CleanDataOnUpgrade"`
	// The real config of k3s service.
	K3S *K3sK3sConfig `pulumi:"K3S"`
	// Version is used to determine if k3s should be upgraded if auto-upgrade is disabled. If the version is changed, k3s will be upgraded.
	Version *string `pulumi:"Version"`
}

// K3sConfigInput is an input type that accepts K3sConfigArgs and K3sConfigOutput values.
// You can construct a concrete instance of `K3sConfigInput` via:
//
//	K3sConfigArgs{...}
type K3sConfigInput interface {
	pulumi.Input

	ToK3sConfigOutput() K3sConfigOutput
	ToK3sConfigOutputWithContext(context.Context) K3sConfigOutput
}

type K3sConfigArgs struct {
	// [Experimental] clean-data-on-upgrade is used to delete all data while upgrade. This is based on the script https://docs.k3s.io/upgrades/killall
	CleanDataOnUpgrade pulumi.BoolPtrInput `pulumi:"CleanDataOnUpgrade"`
	// The real config of k3s service.
	K3S K3sK3sConfigPtrInput `pulumi:"K3S"`
	// Version is used to determine if k3s should be upgraded if auto-upgrade is disabled. If the version is changed, k3s will be upgraded.
	Version pulumi.StringPtrInput `pulumi:"Version"`
}

func (K3sConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K3sConfig)(nil)).Elem()
}

func (i K3sConfigArgs) ToK3sConfigOutput() K3sConfigOutput {
	return i.ToK3sConfigOutputWithContext(context.Background())
}

func (i K3sConfigArgs) ToK3sConfigOutputWithContext(ctx context.Context) K3sConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sConfigOutput)
}

func (i K3sConfigArgs) ToK3sConfigPtrOutput() K3sConfigPtrOutput {
	return i.ToK3sConfigPtrOutputWithContext(context.Background())
}

func (i K3sConfigArgs) ToK3sConfigPtrOutputWithContext(ctx context.Context) K3sConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sConfigOutput).ToK3sConfigPtrOutputWithContext(ctx)
}

// K3sConfigPtrInput is an input type that accepts K3sConfigArgs, K3sConfigPtr and K3sConfigPtrOutput values.
// You can construct a concrete instance of `K3sConfigPtrInput` via:
//
//	        K3sConfigArgs{...}
//
//	or:
//
//	        nil
type K3sConfigPtrInput interface {
	pulumi.Input

	ToK3sConfigPtrOutput() K3sConfigPtrOutput
	ToK3sConfigPtrOutputWithContext(context.Context) K3sConfigPtrOutput
}

type k3sConfigPtrType K3sConfigArgs

func K3sConfigPtr(v *K3sConfigArgs) K3sConfigPtrInput {
	return (*k3sConfigPtrType)(v)
}

func (*k3sConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K3sConfig)(nil)).Elem()
}

func (i *k3sConfigPtrType) ToK3sConfigPtrOutput() K3sConfigPtrOutput {
	return i.ToK3sConfigPtrOutputWithContext(context.Background())
}

func (i *k3sConfigPtrType) ToK3sConfigPtrOutputWithContext(ctx context.Context) K3sConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sConfigPtrOutput)
}

type K3sConfigOutput struct{ *pulumi.OutputState }

func (K3sConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K3sConfig)(nil)).Elem()
}

func (o K3sConfigOutput) ToK3sConfigOutput() K3sConfigOutput {
	return o
}

func (o K3sConfigOutput) ToK3sConfigOutputWithContext(ctx context.Context) K3sConfigOutput {
	return o
}

func (o K3sConfigOutput) ToK3sConfigPtrOutput() K3sConfigPtrOutput {
	return o.ToK3sConfigPtrOutputWithContext(context.Background())
}

func (o K3sConfigOutput) ToK3sConfigPtrOutputWithContext(ctx context.Context) K3sConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K3sConfig) *K3sConfig {
		return &v
	}).(K3sConfigPtrOutput)
}

// [Experimental] clean-data-on-upgrade is used to delete all data while upgrade. This is based on the script https://docs.k3s.io/upgrades/killall
func (o K3sConfigOutput) CleanDataOnUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3sConfig) *bool { return v.CleanDataOnUpgrade }).(pulumi.BoolPtrOutput)
}

// The real config of k3s service.
func (o K3sConfigOutput) K3S() K3sK3sConfigPtrOutput {
	return o.ApplyT(func(v K3sConfig) *K3sK3sConfig { return v.K3S }).(K3sK3sConfigPtrOutput)
}

// Version is used to determine if k3s should be upgraded if auto-upgrade is disabled. If the version is changed, k3s will be upgraded.
func (o K3sConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type K3sConfigPtrOutput struct{ *pulumi.OutputState }

func (K3sConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K3sConfig)(nil)).Elem()
}

func (o K3sConfigPtrOutput) ToK3sConfigPtrOutput() K3sConfigPtrOutput {
	return o
}

func (o K3sConfigPtrOutput) ToK3sConfigPtrOutputWithContext(ctx context.Context) K3sConfigPtrOutput {
	return o
}

func (o K3sConfigPtrOutput) Elem() K3sConfigOutput {
	return o.ApplyT(func(v *K3sConfig) K3sConfig {
		if v != nil {
			return *v
		}
		var ret K3sConfig
		return ret
	}).(K3sConfigOutput)
}

// [Experimental] clean-data-on-upgrade is used to delete all data while upgrade. This is based on the script https://docs.k3s.io/upgrades/killall
func (o K3sConfigPtrOutput) CleanDataOnUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3sConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CleanDataOnUpgrade
	}).(pulumi.BoolPtrOutput)
}

// The real config of k3s service.
func (o K3sConfigPtrOutput) K3S() K3sK3sConfigPtrOutput {
	return o.ApplyT(func(v *K3sConfig) *K3sK3sConfig {
		if v == nil {
			return nil
		}
		return v.K3S
	}).(K3sK3sConfigPtrOutput)
}

// Version is used to determine if k3s should be upgraded if auto-upgrade is disabled. If the version is changed, k3s will be upgraded.
func (o K3sConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type K3sK3sConfig struct {
	// AdvertiseAddr specifies the IP address that the server uses to advertise to members of the cluster.
	AdvertiseAddr *string `pulumi:"AdvertiseAddr"`
	// BindAddress is the IP address that the server should bind to for API server traffic.
	BindAddress *string `pulumi:"BindAddress"`
	// ClusterCidr defines the IP range from which pod IPs shall be allocated. Default is 10.141.0.0/16.
	ClusterCidr *string `pulumi:"ClusterCidr"`
	// ClusterDNS specifies the IP address of the DNS service within the cluster. Default is autopicked.
	ClusterDNS *string `pulumi:"ClusterDNS"`
	// ClusterDomain specifies the domain name of the cluster.
	ClusterDomain *string `pulumi:"ClusterDomain"`
	// ClusterInit indicates whether this node should initialize a new cluster.
	ClusterInit *bool `pulumi:"ClusterInit"`
	// Disable lists components or features to disable.
	Disable []string `pulumi:"Disable"`
	// DisableCloudController determines whether to disable the integrated cloud controller manager. Default is false, but will be true if ccm is enabled.
	DisableCloudController *bool `pulumi:"DisableCloudController"`
	// DisableNetworkPolicy determines whether to disable network policies.
	DisableNetworkPolicy *bool `pulumi:"DisableNetworkPolicy"`
	// ExternalNodeIP specifies the external IP address of the node.
	ExternalNodeIP *string `pulumi:"ExternalNodeIP"`
	// FlannelBackend determines the type of backend used for Flannel, a networking solution.
	FlannelBackend *string `pulumi:"FlannelBackend"`
	// FlannelIface specifies the network interface that Flannel should use.
	FlannelIface *string `pulumi:"FlannelIface"`
	// KubeAPIServerArgs allows passing additional arguments to the Kubernetes API server.
	KubeAPIServerArgs []string `pulumi:"KubeAPIServerArgs"`
	// KubeCloudControllerManagerArgs allows passing additional arguments to the Kubernetes cloud controller manager.
	KubeCloudControllerManagerArgs []string `pulumi:"KubeCloudControllerManagerArgs"`
	// KubeControllerManagerArgs allows passing additional arguments to the Kubernetes controller manager.
	KubeControllerManagerArgs []string `pulumi:"KubeControllerManagerArgs"`
	// KubeletArgs allows passing additional arguments to the kubelet service.
	KubeletArgs []string `pulumi:"KubeletArgs"`
	// NodeIP specifies the IP address to advertise for this node.
	NodeIP *string `pulumi:"NodeIP"`
	// NodeLabels set labels on registration.
	NodeLabels []string `pulumi:"NodeLabels"`
	// NodeName specifies the name of the node within the cluster.
	NodeName *string `pulumi:"NodeName"`
	// NodeTaints are used to taint the node with key=value:effect. By default, server node is tainted with a couple of taints if number of agents nodes more than 0.
	NodeTaints []string `pulumi:"NodeTaints"`
	// Server specifies the address of the main server node (leader) in the cluster, generated automatically.
	Server *string `pulumi:"Server"`
	// ServiceCidr defines the IP range from which service cluster IPs are allocated. Default is 10.140.0.0/16.
	ServiceCidr *string `pulumi:"ServiceCidr"`
	// TLSSan adds specific TLS SANs for securing communication to the K3s server.
	TLSSan *string `pulumi:"TLSSan"`
	// TLSSanSecurity enables or disables the addition of TLS SANs (Subject Alternative Names).
	TLSSanSecurity *bool `pulumi:"TLSSanSecurity"`
	// Token used for nodes to join the cluster, generated automatically.
	Token *string `pulumi:"Token"`
	// WriteKubeconfigMode defines the file permission mode for the kubeconfig file on disk.
	WriteKubeconfigMode *string `pulumi:"WriteKubeconfigMode"`
}

// K3sK3sConfigInput is an input type that accepts K3sK3sConfigArgs and K3sK3sConfigOutput values.
// You can construct a concrete instance of `K3sK3sConfigInput` via:
//
//	K3sK3sConfigArgs{...}
type K3sK3sConfigInput interface {
	pulumi.Input

	ToK3sK3sConfigOutput() K3sK3sConfigOutput
	ToK3sK3sConfigOutputWithContext(context.Context) K3sK3sConfigOutput
}

type K3sK3sConfigArgs struct {
	// AdvertiseAddr specifies the IP address that the server uses to advertise to members of the cluster.
	AdvertiseAddr pulumi.StringPtrInput `pulumi:"AdvertiseAddr"`
	// BindAddress is the IP address that the server should bind to for API server traffic.
	BindAddress pulumi.StringPtrInput `pulumi:"BindAddress"`
	// ClusterCidr defines the IP range from which pod IPs shall be allocated. Default is 10.141.0.0/16.
	ClusterCidr pulumi.StringPtrInput `pulumi:"ClusterCidr"`
	// ClusterDNS specifies the IP address of the DNS service within the cluster. Default is autopicked.
	ClusterDNS pulumi.StringPtrInput `pulumi:"ClusterDNS"`
	// ClusterDomain specifies the domain name of the cluster.
	ClusterDomain pulumi.StringPtrInput `pulumi:"ClusterDomain"`
	// ClusterInit indicates whether this node should initialize a new cluster.
	ClusterInit pulumi.BoolPtrInput `pulumi:"ClusterInit"`
	// Disable lists components or features to disable.
	Disable pulumi.StringArrayInput `pulumi:"Disable"`
	// DisableCloudController determines whether to disable the integrated cloud controller manager. Default is false, but will be true if ccm is enabled.
	DisableCloudController pulumi.BoolPtrInput `pulumi:"DisableCloudController"`
	// DisableNetworkPolicy determines whether to disable network policies.
	DisableNetworkPolicy pulumi.BoolPtrInput `pulumi:"DisableNetworkPolicy"`
	// ExternalNodeIP specifies the external IP address of the node.
	ExternalNodeIP pulumi.StringPtrInput `pulumi:"ExternalNodeIP"`
	// FlannelBackend determines the type of backend used for Flannel, a networking solution.
	FlannelBackend pulumi.StringPtrInput `pulumi:"FlannelBackend"`
	// FlannelIface specifies the network interface that Flannel should use.
	FlannelIface pulumi.StringPtrInput `pulumi:"FlannelIface"`
	// KubeAPIServerArgs allows passing additional arguments to the Kubernetes API server.
	KubeAPIServerArgs pulumi.StringArrayInput `pulumi:"KubeAPIServerArgs"`
	// KubeCloudControllerManagerArgs allows passing additional arguments to the Kubernetes cloud controller manager.
	KubeCloudControllerManagerArgs pulumi.StringArrayInput `pulumi:"KubeCloudControllerManagerArgs"`
	// KubeControllerManagerArgs allows passing additional arguments to the Kubernetes controller manager.
	KubeControllerManagerArgs pulumi.StringArrayInput `pulumi:"KubeControllerManagerArgs"`
	// KubeletArgs allows passing additional arguments to the kubelet service.
	KubeletArgs pulumi.StringArrayInput `pulumi:"KubeletArgs"`
	// NodeIP specifies the IP address to advertise for this node.
	NodeIP pulumi.StringPtrInput `pulumi:"NodeIP"`
	// NodeLabels set labels on registration.
	NodeLabels pulumi.StringArrayInput `pulumi:"NodeLabels"`
	// NodeName specifies the name of the node within the cluster.
	NodeName pulumi.StringPtrInput `pulumi:"NodeName"`
	// NodeTaints are used to taint the node with key=value:effect. By default, server node is tainted with a couple of taints if number of agents nodes more than 0.
	NodeTaints pulumi.StringArrayInput `pulumi:"NodeTaints"`
	// Server specifies the address of the main server node (leader) in the cluster, generated automatically.
	Server pulumi.StringPtrInput `pulumi:"Server"`
	// ServiceCidr defines the IP range from which service cluster IPs are allocated. Default is 10.140.0.0/16.
	ServiceCidr pulumi.StringPtrInput `pulumi:"ServiceCidr"`
	// TLSSan adds specific TLS SANs for securing communication to the K3s server.
	TLSSan pulumi.StringPtrInput `pulumi:"TLSSan"`
	// TLSSanSecurity enables or disables the addition of TLS SANs (Subject Alternative Names).
	TLSSanSecurity pulumi.BoolPtrInput `pulumi:"TLSSanSecurity"`
	// Token used for nodes to join the cluster, generated automatically.
	Token pulumi.StringPtrInput `pulumi:"Token"`
	// WriteKubeconfigMode defines the file permission mode for the kubeconfig file on disk.
	WriteKubeconfigMode pulumi.StringPtrInput `pulumi:"WriteKubeconfigMode"`
}

func (K3sK3sConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K3sK3sConfig)(nil)).Elem()
}

func (i K3sK3sConfigArgs) ToK3sK3sConfigOutput() K3sK3sConfigOutput {
	return i.ToK3sK3sConfigOutputWithContext(context.Background())
}

func (i K3sK3sConfigArgs) ToK3sK3sConfigOutputWithContext(ctx context.Context) K3sK3sConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sK3sConfigOutput)
}

func (i K3sK3sConfigArgs) ToK3sK3sConfigPtrOutput() K3sK3sConfigPtrOutput {
	return i.ToK3sK3sConfigPtrOutputWithContext(context.Background())
}

func (i K3sK3sConfigArgs) ToK3sK3sConfigPtrOutputWithContext(ctx context.Context) K3sK3sConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sK3sConfigOutput).ToK3sK3sConfigPtrOutputWithContext(ctx)
}

// K3sK3sConfigPtrInput is an input type that accepts K3sK3sConfigArgs, K3sK3sConfigPtr and K3sK3sConfigPtrOutput values.
// You can construct a concrete instance of `K3sK3sConfigPtrInput` via:
//
//	        K3sK3sConfigArgs{...}
//
//	or:
//
//	        nil
type K3sK3sConfigPtrInput interface {
	pulumi.Input

	ToK3sK3sConfigPtrOutput() K3sK3sConfigPtrOutput
	ToK3sK3sConfigPtrOutputWithContext(context.Context) K3sK3sConfigPtrOutput
}

type k3sK3sConfigPtrType K3sK3sConfigArgs

func K3sK3sConfigPtr(v *K3sK3sConfigArgs) K3sK3sConfigPtrInput {
	return (*k3sK3sConfigPtrType)(v)
}

func (*k3sK3sConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K3sK3sConfig)(nil)).Elem()
}

func (i *k3sK3sConfigPtrType) ToK3sK3sConfigPtrOutput() K3sK3sConfigPtrOutput {
	return i.ToK3sK3sConfigPtrOutputWithContext(context.Background())
}

func (i *k3sK3sConfigPtrType) ToK3sK3sConfigPtrOutputWithContext(ctx context.Context) K3sK3sConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3sK3sConfigPtrOutput)
}

type K3sK3sConfigOutput struct{ *pulumi.OutputState }

func (K3sK3sConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K3sK3sConfig)(nil)).Elem()
}

func (o K3sK3sConfigOutput) ToK3sK3sConfigOutput() K3sK3sConfigOutput {
	return o
}

func (o K3sK3sConfigOutput) ToK3sK3sConfigOutputWithContext(ctx context.Context) K3sK3sConfigOutput {
	return o
}

func (o K3sK3sConfigOutput) ToK3sK3sConfigPtrOutput() K3sK3sConfigPtrOutput {
	return o.ToK3sK3sConfigPtrOutputWithContext(context.Background())
}

func (o K3sK3sConfigOutput) ToK3sK3sConfigPtrOutputWithContext(ctx context.Context) K3sK3sConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K3sK3sConfig) *K3sK3sConfig {
		return &v
	}).(K3sK3sConfigPtrOutput)
}

// AdvertiseAddr specifies the IP address that the server uses to advertise to members of the cluster.
func (o K3sK3sConfigOutput) AdvertiseAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.AdvertiseAddr }).(pulumi.StringPtrOutput)
}

// BindAddress is the IP address that the server should bind to for API server traffic.
func (o K3sK3sConfigOutput) BindAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.BindAddress }).(pulumi.StringPtrOutput)
}

// ClusterCidr defines the IP range from which pod IPs shall be allocated. Default is 10.141.0.0/16.
func (o K3sK3sConfigOutput) ClusterCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.ClusterCidr }).(pulumi.StringPtrOutput)
}

// ClusterDNS specifies the IP address of the DNS service within the cluster. Default is autopicked.
func (o K3sK3sConfigOutput) ClusterDNS() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.ClusterDNS }).(pulumi.StringPtrOutput)
}

// ClusterDomain specifies the domain name of the cluster.
func (o K3sK3sConfigOutput) ClusterDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.ClusterDomain }).(pulumi.StringPtrOutput)
}

// ClusterInit indicates whether this node should initialize a new cluster.
func (o K3sK3sConfigOutput) ClusterInit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *bool { return v.ClusterInit }).(pulumi.BoolPtrOutput)
}

// Disable lists components or features to disable.
func (o K3sK3sConfigOutput) Disable() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.Disable }).(pulumi.StringArrayOutput)
}

// DisableCloudController determines whether to disable the integrated cloud controller manager. Default is false, but will be true if ccm is enabled.
func (o K3sK3sConfigOutput) DisableCloudController() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *bool { return v.DisableCloudController }).(pulumi.BoolPtrOutput)
}

// DisableNetworkPolicy determines whether to disable network policies.
func (o K3sK3sConfigOutput) DisableNetworkPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *bool { return v.DisableNetworkPolicy }).(pulumi.BoolPtrOutput)
}

// ExternalNodeIP specifies the external IP address of the node.
func (o K3sK3sConfigOutput) ExternalNodeIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.ExternalNodeIP }).(pulumi.StringPtrOutput)
}

// FlannelBackend determines the type of backend used for Flannel, a networking solution.
func (o K3sK3sConfigOutput) FlannelBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.FlannelBackend }).(pulumi.StringPtrOutput)
}

// FlannelIface specifies the network interface that Flannel should use.
func (o K3sK3sConfigOutput) FlannelIface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.FlannelIface }).(pulumi.StringPtrOutput)
}

// KubeAPIServerArgs allows passing additional arguments to the Kubernetes API server.
func (o K3sK3sConfigOutput) KubeAPIServerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.KubeAPIServerArgs }).(pulumi.StringArrayOutput)
}

// KubeCloudControllerManagerArgs allows passing additional arguments to the Kubernetes cloud controller manager.
func (o K3sK3sConfigOutput) KubeCloudControllerManagerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.KubeCloudControllerManagerArgs }).(pulumi.StringArrayOutput)
}

// KubeControllerManagerArgs allows passing additional arguments to the Kubernetes controller manager.
func (o K3sK3sConfigOutput) KubeControllerManagerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.KubeControllerManagerArgs }).(pulumi.StringArrayOutput)
}

// KubeletArgs allows passing additional arguments to the kubelet service.
func (o K3sK3sConfigOutput) KubeletArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.KubeletArgs }).(pulumi.StringArrayOutput)
}

// NodeIP specifies the IP address to advertise for this node.
func (o K3sK3sConfigOutput) NodeIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.NodeIP }).(pulumi.StringPtrOutput)
}

// NodeLabels set labels on registration.
func (o K3sK3sConfigOutput) NodeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.NodeLabels }).(pulumi.StringArrayOutput)
}

// NodeName specifies the name of the node within the cluster.
func (o K3sK3sConfigOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.NodeName }).(pulumi.StringPtrOutput)
}

// NodeTaints are used to taint the node with key=value:effect. By default, server node is tainted with a couple of taints if number of agents nodes more than 0.
func (o K3sK3sConfigOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3sK3sConfig) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// Server specifies the address of the main server node (leader) in the cluster, generated automatically.
func (o K3sK3sConfigOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// ServiceCidr defines the IP range from which service cluster IPs are allocated. Default is 10.140.0.0/16.
func (o K3sK3sConfigOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// TLSSan adds specific TLS SANs for securing communication to the K3s server.
func (o K3sK3sConfigOutput) TLSSan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.TLSSan }).(pulumi.StringPtrOutput)
}

// TLSSanSecurity enables or disables the addition of TLS SANs (Subject Alternative Names).
func (o K3sK3sConfigOutput) TLSSanSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *bool { return v.TLSSanSecurity }).(pulumi.BoolPtrOutput)
}

// Token used for nodes to join the cluster, generated automatically.
func (o K3sK3sConfigOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// WriteKubeconfigMode defines the file permission mode for the kubeconfig file on disk.
func (o K3sK3sConfigOutput) WriteKubeconfigMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3sK3sConfig) *string { return v.WriteKubeconfigMode }).(pulumi.StringPtrOutput)
}

type K3sK3sConfigPtrOutput struct{ *pulumi.OutputState }

func (K3sK3sConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K3sK3sConfig)(nil)).Elem()
}

func (o K3sK3sConfigPtrOutput) ToK3sK3sConfigPtrOutput() K3sK3sConfigPtrOutput {
	return o
}

func (o K3sK3sConfigPtrOutput) ToK3sK3sConfigPtrOutputWithContext(ctx context.Context) K3sK3sConfigPtrOutput {
	return o
}

func (o K3sK3sConfigPtrOutput) Elem() K3sK3sConfigOutput {
	return o.ApplyT(func(v *K3sK3sConfig) K3sK3sConfig {
		if v != nil {
			return *v
		}
		var ret K3sK3sConfig
		return ret
	}).(K3sK3sConfigOutput)
}

// AdvertiseAddr specifies the IP address that the server uses to advertise to members of the cluster.
func (o K3sK3sConfigPtrOutput) AdvertiseAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.AdvertiseAddr
	}).(pulumi.StringPtrOutput)
}

// BindAddress is the IP address that the server should bind to for API server traffic.
func (o K3sK3sConfigPtrOutput) BindAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.BindAddress
	}).(pulumi.StringPtrOutput)
}

// ClusterCidr defines the IP range from which pod IPs shall be allocated. Default is 10.141.0.0/16.
func (o K3sK3sConfigPtrOutput) ClusterCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCidr
	}).(pulumi.StringPtrOutput)
}

// ClusterDNS specifies the IP address of the DNS service within the cluster. Default is autopicked.
func (o K3sK3sConfigPtrOutput) ClusterDNS() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterDNS
	}).(pulumi.StringPtrOutput)
}

// ClusterDomain specifies the domain name of the cluster.
func (o K3sK3sConfigPtrOutput) ClusterDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterDomain
	}).(pulumi.StringPtrOutput)
}

// ClusterInit indicates whether this node should initialize a new cluster.
func (o K3sK3sConfigPtrOutput) ClusterInit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ClusterInit
	}).(pulumi.BoolPtrOutput)
}

// Disable lists components or features to disable.
func (o K3sK3sConfigPtrOutput) Disable() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.Disable
	}).(pulumi.StringArrayOutput)
}

// DisableCloudController determines whether to disable the integrated cloud controller manager. Default is false, but will be true if ccm is enabled.
func (o K3sK3sConfigPtrOutput) DisableCloudController() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCloudController
	}).(pulumi.BoolPtrOutput)
}

// DisableNetworkPolicy determines whether to disable network policies.
func (o K3sK3sConfigPtrOutput) DisableNetworkPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableNetworkPolicy
	}).(pulumi.BoolPtrOutput)
}

// ExternalNodeIP specifies the external IP address of the node.
func (o K3sK3sConfigPtrOutput) ExternalNodeIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.ExternalNodeIP
	}).(pulumi.StringPtrOutput)
}

// FlannelBackend determines the type of backend used for Flannel, a networking solution.
func (o K3sK3sConfigPtrOutput) FlannelBackend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.FlannelBackend
	}).(pulumi.StringPtrOutput)
}

// FlannelIface specifies the network interface that Flannel should use.
func (o K3sK3sConfigPtrOutput) FlannelIface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.FlannelIface
	}).(pulumi.StringPtrOutput)
}

// KubeAPIServerArgs allows passing additional arguments to the Kubernetes API server.
func (o K3sK3sConfigPtrOutput) KubeAPIServerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.KubeAPIServerArgs
	}).(pulumi.StringArrayOutput)
}

// KubeCloudControllerManagerArgs allows passing additional arguments to the Kubernetes cloud controller manager.
func (o K3sK3sConfigPtrOutput) KubeCloudControllerManagerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.KubeCloudControllerManagerArgs
	}).(pulumi.StringArrayOutput)
}

// KubeControllerManagerArgs allows passing additional arguments to the Kubernetes controller manager.
func (o K3sK3sConfigPtrOutput) KubeControllerManagerArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.KubeControllerManagerArgs
	}).(pulumi.StringArrayOutput)
}

// KubeletArgs allows passing additional arguments to the kubelet service.
func (o K3sK3sConfigPtrOutput) KubeletArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.KubeletArgs
	}).(pulumi.StringArrayOutput)
}

// NodeIP specifies the IP address to advertise for this node.
func (o K3sK3sConfigPtrOutput) NodeIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeIP
	}).(pulumi.StringPtrOutput)
}

// NodeLabels set labels on registration.
func (o K3sK3sConfigPtrOutput) NodeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringArrayOutput)
}

// NodeName specifies the name of the node within the cluster.
func (o K3sK3sConfigPtrOutput) NodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeName
	}).(pulumi.StringPtrOutput)
}

// NodeTaints are used to taint the node with key=value:effect. By default, server node is tainted with a couple of taints if number of agents nodes more than 0.
func (o K3sK3sConfigPtrOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3sK3sConfig) []string {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(pulumi.StringArrayOutput)
}

// Server specifies the address of the main server node (leader) in the cluster, generated automatically.
func (o K3sK3sConfigPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// ServiceCidr defines the IP range from which service cluster IPs are allocated. Default is 10.140.0.0/16.
func (o K3sK3sConfigPtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// TLSSan adds specific TLS SANs for securing communication to the K3s server.
func (o K3sK3sConfigPtrOutput) TLSSan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.TLSSan
	}).(pulumi.StringPtrOutput)
}

// TLSSanSecurity enables or disables the addition of TLS SANs (Subject Alternative Names).
func (o K3sK3sConfigPtrOutput) TLSSanSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *bool {
		if v == nil {
			return nil
		}
		return v.TLSSanSecurity
	}).(pulumi.BoolPtrOutput)
}

// Token used for nodes to join the cluster, generated automatically.
func (o K3sK3sConfigPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// WriteKubeconfigMode defines the file permission mode for the kubeconfig file on disk.
func (o K3sK3sConfigPtrOutput) WriteKubeconfigMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3sK3sConfig) *string {
		if v == nil {
			return nil
		}
		return v.WriteKubeconfigMode
	}).(pulumi.StringPtrOutput)
}

type K3supgraderConfig struct {
	// ConfigEnv is a map of environment variables to pass to the controller.
	ConfigEnv []string    `pulumi:"ConfigEnv"`
	Enabled   *bool       `pulumi:"Enabled"`
	Helm      *HelmConfig `pulumi:"Helm"`
	// Channel is a channel to use for the upgrade. Conflicts with Version.
	TargetChannel *string `pulumi:"TargetChannel"`
	// Version is a version to use for the upgrade. Conflicts with Channel.
	TargetVersion *string `pulumi:"TargetVersion"`
}

// K3supgraderConfigInput is an input type that accepts K3supgraderConfigArgs and K3supgraderConfigOutput values.
// You can construct a concrete instance of `K3supgraderConfigInput` via:
//
//	K3supgraderConfigArgs{...}
type K3supgraderConfigInput interface {
	pulumi.Input

	ToK3supgraderConfigOutput() K3supgraderConfigOutput
	ToK3supgraderConfigOutputWithContext(context.Context) K3supgraderConfigOutput
}

type K3supgraderConfigArgs struct {
	// ConfigEnv is a map of environment variables to pass to the controller.
	ConfigEnv pulumi.StringArrayInput `pulumi:"ConfigEnv"`
	Enabled   pulumi.BoolPtrInput     `pulumi:"Enabled"`
	Helm      HelmConfigPtrInput      `pulumi:"Helm"`
	// Channel is a channel to use for the upgrade. Conflicts with Version.
	TargetChannel pulumi.StringPtrInput `pulumi:"TargetChannel"`
	// Version is a version to use for the upgrade. Conflicts with Channel.
	TargetVersion pulumi.StringPtrInput `pulumi:"TargetVersion"`
}

func (K3supgraderConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K3supgraderConfig)(nil)).Elem()
}

func (i K3supgraderConfigArgs) ToK3supgraderConfigOutput() K3supgraderConfigOutput {
	return i.ToK3supgraderConfigOutputWithContext(context.Background())
}

func (i K3supgraderConfigArgs) ToK3supgraderConfigOutputWithContext(ctx context.Context) K3supgraderConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3supgraderConfigOutput)
}

func (i K3supgraderConfigArgs) ToK3supgraderConfigPtrOutput() K3supgraderConfigPtrOutput {
	return i.ToK3supgraderConfigPtrOutputWithContext(context.Background())
}

func (i K3supgraderConfigArgs) ToK3supgraderConfigPtrOutputWithContext(ctx context.Context) K3supgraderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3supgraderConfigOutput).ToK3supgraderConfigPtrOutputWithContext(ctx)
}

// K3supgraderConfigPtrInput is an input type that accepts K3supgraderConfigArgs, K3supgraderConfigPtr and K3supgraderConfigPtrOutput values.
// You can construct a concrete instance of `K3supgraderConfigPtrInput` via:
//
//	        K3supgraderConfigArgs{...}
//
//	or:
//
//	        nil
type K3supgraderConfigPtrInput interface {
	pulumi.Input

	ToK3supgraderConfigPtrOutput() K3supgraderConfigPtrOutput
	ToK3supgraderConfigPtrOutputWithContext(context.Context) K3supgraderConfigPtrOutput
}

type k3supgraderConfigPtrType K3supgraderConfigArgs

func K3supgraderConfigPtr(v *K3supgraderConfigArgs) K3supgraderConfigPtrInput {
	return (*k3supgraderConfigPtrType)(v)
}

func (*k3supgraderConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K3supgraderConfig)(nil)).Elem()
}

func (i *k3supgraderConfigPtrType) ToK3supgraderConfigPtrOutput() K3supgraderConfigPtrOutput {
	return i.ToK3supgraderConfigPtrOutputWithContext(context.Background())
}

func (i *k3supgraderConfigPtrType) ToK3supgraderConfigPtrOutputWithContext(ctx context.Context) K3supgraderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K3supgraderConfigPtrOutput)
}

type K3supgraderConfigOutput struct{ *pulumi.OutputState }

func (K3supgraderConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K3supgraderConfig)(nil)).Elem()
}

func (o K3supgraderConfigOutput) ToK3supgraderConfigOutput() K3supgraderConfigOutput {
	return o
}

func (o K3supgraderConfigOutput) ToK3supgraderConfigOutputWithContext(ctx context.Context) K3supgraderConfigOutput {
	return o
}

func (o K3supgraderConfigOutput) ToK3supgraderConfigPtrOutput() K3supgraderConfigPtrOutput {
	return o.ToK3supgraderConfigPtrOutputWithContext(context.Background())
}

func (o K3supgraderConfigOutput) ToK3supgraderConfigPtrOutputWithContext(ctx context.Context) K3supgraderConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K3supgraderConfig) *K3supgraderConfig {
		return &v
	}).(K3supgraderConfigPtrOutput)
}

// ConfigEnv is a map of environment variables to pass to the controller.
func (o K3supgraderConfigOutput) ConfigEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K3supgraderConfig) []string { return v.ConfigEnv }).(pulumi.StringArrayOutput)
}

func (o K3supgraderConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K3supgraderConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o K3supgraderConfigOutput) Helm() HelmConfigPtrOutput {
	return o.ApplyT(func(v K3supgraderConfig) *HelmConfig { return v.Helm }).(HelmConfigPtrOutput)
}

// Channel is a channel to use for the upgrade. Conflicts with Version.
func (o K3supgraderConfigOutput) TargetChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3supgraderConfig) *string { return v.TargetChannel }).(pulumi.StringPtrOutput)
}

// Version is a version to use for the upgrade. Conflicts with Channel.
func (o K3supgraderConfigOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K3supgraderConfig) *string { return v.TargetVersion }).(pulumi.StringPtrOutput)
}

type K3supgraderConfigPtrOutput struct{ *pulumi.OutputState }

func (K3supgraderConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K3supgraderConfig)(nil)).Elem()
}

func (o K3supgraderConfigPtrOutput) ToK3supgraderConfigPtrOutput() K3supgraderConfigPtrOutput {
	return o
}

func (o K3supgraderConfigPtrOutput) ToK3supgraderConfigPtrOutputWithContext(ctx context.Context) K3supgraderConfigPtrOutput {
	return o
}

func (o K3supgraderConfigPtrOutput) Elem() K3supgraderConfigOutput {
	return o.ApplyT(func(v *K3supgraderConfig) K3supgraderConfig {
		if v != nil {
			return *v
		}
		var ret K3supgraderConfig
		return ret
	}).(K3supgraderConfigOutput)
}

// ConfigEnv is a map of environment variables to pass to the controller.
func (o K3supgraderConfigPtrOutput) ConfigEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K3supgraderConfig) []string {
		if v == nil {
			return nil
		}
		return v.ConfigEnv
	}).(pulumi.StringArrayOutput)
}

func (o K3supgraderConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K3supgraderConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o K3supgraderConfigPtrOutput) Helm() HelmConfigPtrOutput {
	return o.ApplyT(func(v *K3supgraderConfig) *HelmConfig {
		if v == nil {
			return nil
		}
		return v.Helm
	}).(HelmConfigPtrOutput)
}

// Channel is a channel to use for the upgrade. Conflicts with Version.
func (o K3supgraderConfigPtrOutput) TargetChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3supgraderConfig) *string {
		if v == nil {
			return nil
		}
		return v.TargetChannel
	}).(pulumi.StringPtrOutput)
}

// Version is a version to use for the upgrade. Conflicts with Channel.
func (o K3supgraderConfigPtrOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K3supgraderConfig) *string {
		if v == nil {
			return nil
		}
		return v.TargetVersion
	}).(pulumi.StringPtrOutput)
}

type K8sconfigBasicFirewallConfig struct {
	// HetznerPublic is used to describe firewall attached to public k8s api endpoint.
	HetznerPublic *K8sconfigHetnzerBasicFirewallConfig `pulumi:"HetznerPublic"`
}

// K8sconfigBasicFirewallConfigInput is an input type that accepts K8sconfigBasicFirewallConfigArgs and K8sconfigBasicFirewallConfigOutput values.
// You can construct a concrete instance of `K8sconfigBasicFirewallConfigInput` via:
//
//	K8sconfigBasicFirewallConfigArgs{...}
type K8sconfigBasicFirewallConfigInput interface {
	pulumi.Input

	ToK8sconfigBasicFirewallConfigOutput() K8sconfigBasicFirewallConfigOutput
	ToK8sconfigBasicFirewallConfigOutputWithContext(context.Context) K8sconfigBasicFirewallConfigOutput
}

type K8sconfigBasicFirewallConfigArgs struct {
	// HetznerPublic is used to describe firewall attached to public k8s api endpoint.
	HetznerPublic K8sconfigHetnzerBasicFirewallConfigPtrInput `pulumi:"HetznerPublic"`
}

func (K8sconfigBasicFirewallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigBasicFirewallConfig)(nil)).Elem()
}

func (i K8sconfigBasicFirewallConfigArgs) ToK8sconfigBasicFirewallConfigOutput() K8sconfigBasicFirewallConfigOutput {
	return i.ToK8sconfigBasicFirewallConfigOutputWithContext(context.Background())
}

func (i K8sconfigBasicFirewallConfigArgs) ToK8sconfigBasicFirewallConfigOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigBasicFirewallConfigOutput)
}

func (i K8sconfigBasicFirewallConfigArgs) ToK8sconfigBasicFirewallConfigPtrOutput() K8sconfigBasicFirewallConfigPtrOutput {
	return i.ToK8sconfigBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigBasicFirewallConfigArgs) ToK8sconfigBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigBasicFirewallConfigOutput).ToK8sconfigBasicFirewallConfigPtrOutputWithContext(ctx)
}

// K8sconfigBasicFirewallConfigPtrInput is an input type that accepts K8sconfigBasicFirewallConfigArgs, K8sconfigBasicFirewallConfigPtr and K8sconfigBasicFirewallConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigBasicFirewallConfigPtrInput` via:
//
//	        K8sconfigBasicFirewallConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigBasicFirewallConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigBasicFirewallConfigPtrOutput() K8sconfigBasicFirewallConfigPtrOutput
	ToK8sconfigBasicFirewallConfigPtrOutputWithContext(context.Context) K8sconfigBasicFirewallConfigPtrOutput
}

type k8sconfigBasicFirewallConfigPtrType K8sconfigBasicFirewallConfigArgs

func K8sconfigBasicFirewallConfigPtr(v *K8sconfigBasicFirewallConfigArgs) K8sconfigBasicFirewallConfigPtrInput {
	return (*k8sconfigBasicFirewallConfigPtrType)(v)
}

func (*k8sconfigBasicFirewallConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigBasicFirewallConfig)(nil)).Elem()
}

func (i *k8sconfigBasicFirewallConfigPtrType) ToK8sconfigBasicFirewallConfigPtrOutput() K8sconfigBasicFirewallConfigPtrOutput {
	return i.ToK8sconfigBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigBasicFirewallConfigPtrType) ToK8sconfigBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigBasicFirewallConfigPtrOutput)
}

type K8sconfigBasicFirewallConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigBasicFirewallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigBasicFirewallConfig)(nil)).Elem()
}

func (o K8sconfigBasicFirewallConfigOutput) ToK8sconfigBasicFirewallConfigOutput() K8sconfigBasicFirewallConfigOutput {
	return o
}

func (o K8sconfigBasicFirewallConfigOutput) ToK8sconfigBasicFirewallConfigOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigOutput {
	return o
}

func (o K8sconfigBasicFirewallConfigOutput) ToK8sconfigBasicFirewallConfigPtrOutput() K8sconfigBasicFirewallConfigPtrOutput {
	return o.ToK8sconfigBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigBasicFirewallConfigOutput) ToK8sconfigBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigBasicFirewallConfig) *K8sconfigBasicFirewallConfig {
		return &v
	}).(K8sconfigBasicFirewallConfigPtrOutput)
}

// HetznerPublic is used to describe firewall attached to public k8s api endpoint.
func (o K8sconfigBasicFirewallConfigOutput) HetznerPublic() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigBasicFirewallConfig) *K8sconfigHetnzerBasicFirewallConfig { return v.HetznerPublic }).(K8sconfigHetnzerBasicFirewallConfigPtrOutput)
}

type K8sconfigBasicFirewallConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigBasicFirewallConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigBasicFirewallConfig)(nil)).Elem()
}

func (o K8sconfigBasicFirewallConfigPtrOutput) ToK8sconfigBasicFirewallConfigPtrOutput() K8sconfigBasicFirewallConfigPtrOutput {
	return o
}

func (o K8sconfigBasicFirewallConfigPtrOutput) ToK8sconfigBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigBasicFirewallConfigPtrOutput {
	return o
}

func (o K8sconfigBasicFirewallConfigPtrOutput) Elem() K8sconfigBasicFirewallConfigOutput {
	return o.ApplyT(func(v *K8sconfigBasicFirewallConfig) K8sconfigBasicFirewallConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigBasicFirewallConfig
		return ret
	}).(K8sconfigBasicFirewallConfigOutput)
}

// HetznerPublic is used to describe firewall attached to public k8s api endpoint.
func (o K8sconfigBasicFirewallConfigPtrOutput) HetznerPublic() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigBasicFirewallConfig) *K8sconfigHetnzerBasicFirewallConfig {
		if v == nil {
			return nil
		}
		return v.HetznerPublic
	}).(K8sconfigHetnzerBasicFirewallConfigPtrOutput)
}

type K8sconfigConfig struct {
	Addons          *AddonsConfig               `pulumi:"Addons"`
	AuditLog        *AuditAuditLogConfig        `pulumi:"AuditLog"`
	KubeAPIEndpoint *K8sconfigK8SEndpointConfig `pulumi:"KubeAPIEndpoint"`
}

// K8sconfigConfigInput is an input type that accepts K8sconfigConfigArgs and K8sconfigConfigOutput values.
// You can construct a concrete instance of `K8sconfigConfigInput` via:
//
//	K8sconfigConfigArgs{...}
type K8sconfigConfigInput interface {
	pulumi.Input

	ToK8sconfigConfigOutput() K8sconfigConfigOutput
	ToK8sconfigConfigOutputWithContext(context.Context) K8sconfigConfigOutput
}

type K8sconfigConfigArgs struct {
	Addons          AddonsConfigPtrInput               `pulumi:"Addons"`
	AuditLog        AuditAuditLogConfigPtrInput        `pulumi:"AuditLog"`
	KubeAPIEndpoint K8sconfigK8SEndpointConfigPtrInput `pulumi:"KubeAPIEndpoint"`
}

func (K8sconfigConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigConfig)(nil)).Elem()
}

func (i K8sconfigConfigArgs) ToK8sconfigConfigOutput() K8sconfigConfigOutput {
	return i.ToK8sconfigConfigOutputWithContext(context.Background())
}

func (i K8sconfigConfigArgs) ToK8sconfigConfigOutputWithContext(ctx context.Context) K8sconfigConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigConfigOutput)
}

func (i K8sconfigConfigArgs) ToK8sconfigConfigPtrOutput() K8sconfigConfigPtrOutput {
	return i.ToK8sconfigConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigConfigArgs) ToK8sconfigConfigPtrOutputWithContext(ctx context.Context) K8sconfigConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigConfigOutput).ToK8sconfigConfigPtrOutputWithContext(ctx)
}

// K8sconfigConfigPtrInput is an input type that accepts K8sconfigConfigArgs, K8sconfigConfigPtr and K8sconfigConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigConfigPtrInput` via:
//
//	        K8sconfigConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigConfigPtrOutput() K8sconfigConfigPtrOutput
	ToK8sconfigConfigPtrOutputWithContext(context.Context) K8sconfigConfigPtrOutput
}

type k8sconfigConfigPtrType K8sconfigConfigArgs

func K8sconfigConfigPtr(v *K8sconfigConfigArgs) K8sconfigConfigPtrInput {
	return (*k8sconfigConfigPtrType)(v)
}

func (*k8sconfigConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigConfig)(nil)).Elem()
}

func (i *k8sconfigConfigPtrType) ToK8sconfigConfigPtrOutput() K8sconfigConfigPtrOutput {
	return i.ToK8sconfigConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigConfigPtrType) ToK8sconfigConfigPtrOutputWithContext(ctx context.Context) K8sconfigConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigConfigPtrOutput)
}

type K8sconfigConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigConfig)(nil)).Elem()
}

func (o K8sconfigConfigOutput) ToK8sconfigConfigOutput() K8sconfigConfigOutput {
	return o
}

func (o K8sconfigConfigOutput) ToK8sconfigConfigOutputWithContext(ctx context.Context) K8sconfigConfigOutput {
	return o
}

func (o K8sconfigConfigOutput) ToK8sconfigConfigPtrOutput() K8sconfigConfigPtrOutput {
	return o.ToK8sconfigConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigConfigOutput) ToK8sconfigConfigPtrOutputWithContext(ctx context.Context) K8sconfigConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigConfig) *K8sconfigConfig {
		return &v
	}).(K8sconfigConfigPtrOutput)
}

func (o K8sconfigConfigOutput) Addons() AddonsConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigConfig) *AddonsConfig { return v.Addons }).(AddonsConfigPtrOutput)
}

func (o K8sconfigConfigOutput) AuditLog() AuditAuditLogConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigConfig) *AuditAuditLogConfig { return v.AuditLog }).(AuditAuditLogConfigPtrOutput)
}

func (o K8sconfigConfigOutput) KubeAPIEndpoint() K8sconfigK8SEndpointConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigConfig) *K8sconfigK8SEndpointConfig { return v.KubeAPIEndpoint }).(K8sconfigK8SEndpointConfigPtrOutput)
}

type K8sconfigConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigConfig)(nil)).Elem()
}

func (o K8sconfigConfigPtrOutput) ToK8sconfigConfigPtrOutput() K8sconfigConfigPtrOutput {
	return o
}

func (o K8sconfigConfigPtrOutput) ToK8sconfigConfigPtrOutputWithContext(ctx context.Context) K8sconfigConfigPtrOutput {
	return o
}

func (o K8sconfigConfigPtrOutput) Elem() K8sconfigConfigOutput {
	return o.ApplyT(func(v *K8sconfigConfig) K8sconfigConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigConfig
		return ret
	}).(K8sconfigConfigOutput)
}

func (o K8sconfigConfigPtrOutput) Addons() AddonsConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigConfig) *AddonsConfig {
		if v == nil {
			return nil
		}
		return v.Addons
	}).(AddonsConfigPtrOutput)
}

func (o K8sconfigConfigPtrOutput) AuditLog() AuditAuditLogConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigConfig) *AuditAuditLogConfig {
		if v == nil {
			return nil
		}
		return v.AuditLog
	}).(AuditAuditLogConfigPtrOutput)
}

func (o K8sconfigConfigPtrOutput) KubeAPIEndpoint() K8sconfigK8SEndpointConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigConfig) *K8sconfigK8SEndpointConfig {
		if v == nil {
			return nil
		}
		return v.KubeAPIEndpoint
	}).(K8sconfigK8SEndpointConfigPtrOutput)
}

type K8sconfigHetnzerBasicFirewallConfig struct {
	// AllowedIps specifies a list of IP addresses that are permitted to access the k8s api endpoint. Only traffic from these IPs will be allowed if this list is configured. Default is 0.0.0.0/0 (all ipv4 addresses).
	AllowedIps []string `pulumi:"AllowedIps"`
	// DisallowOwnIP is a security setting that, when enabled, prevents access to the server from deployer own public IP address.
	DisallowOwnIP *bool `pulumi:"DisallowOwnIP"`
}

// K8sconfigHetnzerBasicFirewallConfigInput is an input type that accepts K8sconfigHetnzerBasicFirewallConfigArgs and K8sconfigHetnzerBasicFirewallConfigOutput values.
// You can construct a concrete instance of `K8sconfigHetnzerBasicFirewallConfigInput` via:
//
//	K8sconfigHetnzerBasicFirewallConfigArgs{...}
type K8sconfigHetnzerBasicFirewallConfigInput interface {
	pulumi.Input

	ToK8sconfigHetnzerBasicFirewallConfigOutput() K8sconfigHetnzerBasicFirewallConfigOutput
	ToK8sconfigHetnzerBasicFirewallConfigOutputWithContext(context.Context) K8sconfigHetnzerBasicFirewallConfigOutput
}

type K8sconfigHetnzerBasicFirewallConfigArgs struct {
	// AllowedIps specifies a list of IP addresses that are permitted to access the k8s api endpoint. Only traffic from these IPs will be allowed if this list is configured. Default is 0.0.0.0/0 (all ipv4 addresses).
	AllowedIps pulumi.StringArrayInput `pulumi:"AllowedIps"`
	// DisallowOwnIP is a security setting that, when enabled, prevents access to the server from deployer own public IP address.
	DisallowOwnIP pulumi.BoolPtrInput `pulumi:"DisallowOwnIP"`
}

func (K8sconfigHetnzerBasicFirewallConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigHetnzerBasicFirewallConfig)(nil)).Elem()
}

func (i K8sconfigHetnzerBasicFirewallConfigArgs) ToK8sconfigHetnzerBasicFirewallConfigOutput() K8sconfigHetnzerBasicFirewallConfigOutput {
	return i.ToK8sconfigHetnzerBasicFirewallConfigOutputWithContext(context.Background())
}

func (i K8sconfigHetnzerBasicFirewallConfigArgs) ToK8sconfigHetnzerBasicFirewallConfigOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigHetnzerBasicFirewallConfigOutput)
}

func (i K8sconfigHetnzerBasicFirewallConfigArgs) ToK8sconfigHetnzerBasicFirewallConfigPtrOutput() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return i.ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigHetnzerBasicFirewallConfigArgs) ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigHetnzerBasicFirewallConfigOutput).ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(ctx)
}

// K8sconfigHetnzerBasicFirewallConfigPtrInput is an input type that accepts K8sconfigHetnzerBasicFirewallConfigArgs, K8sconfigHetnzerBasicFirewallConfigPtr and K8sconfigHetnzerBasicFirewallConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigHetnzerBasicFirewallConfigPtrInput` via:
//
//	        K8sconfigHetnzerBasicFirewallConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigHetnzerBasicFirewallConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigHetnzerBasicFirewallConfigPtrOutput() K8sconfigHetnzerBasicFirewallConfigPtrOutput
	ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(context.Context) K8sconfigHetnzerBasicFirewallConfigPtrOutput
}

type k8sconfigHetnzerBasicFirewallConfigPtrType K8sconfigHetnzerBasicFirewallConfigArgs

func K8sconfigHetnzerBasicFirewallConfigPtr(v *K8sconfigHetnzerBasicFirewallConfigArgs) K8sconfigHetnzerBasicFirewallConfigPtrInput {
	return (*k8sconfigHetnzerBasicFirewallConfigPtrType)(v)
}

func (*k8sconfigHetnzerBasicFirewallConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigHetnzerBasicFirewallConfig)(nil)).Elem()
}

func (i *k8sconfigHetnzerBasicFirewallConfigPtrType) ToK8sconfigHetnzerBasicFirewallConfigPtrOutput() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return i.ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigHetnzerBasicFirewallConfigPtrType) ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigHetnzerBasicFirewallConfigPtrOutput)
}

type K8sconfigHetnzerBasicFirewallConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigHetnzerBasicFirewallConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigHetnzerBasicFirewallConfig)(nil)).Elem()
}

func (o K8sconfigHetnzerBasicFirewallConfigOutput) ToK8sconfigHetnzerBasicFirewallConfigOutput() K8sconfigHetnzerBasicFirewallConfigOutput {
	return o
}

func (o K8sconfigHetnzerBasicFirewallConfigOutput) ToK8sconfigHetnzerBasicFirewallConfigOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigOutput {
	return o
}

func (o K8sconfigHetnzerBasicFirewallConfigOutput) ToK8sconfigHetnzerBasicFirewallConfigPtrOutput() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o.ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigHetnzerBasicFirewallConfigOutput) ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigHetnzerBasicFirewallConfig) *K8sconfigHetnzerBasicFirewallConfig {
		return &v
	}).(K8sconfigHetnzerBasicFirewallConfigPtrOutput)
}

// AllowedIps specifies a list of IP addresses that are permitted to access the k8s api endpoint. Only traffic from these IPs will be allowed if this list is configured. Default is 0.0.0.0/0 (all ipv4 addresses).
func (o K8sconfigHetnzerBasicFirewallConfigOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sconfigHetnzerBasicFirewallConfig) []string { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// DisallowOwnIP is a security setting that, when enabled, prevents access to the server from deployer own public IP address.
func (o K8sconfigHetnzerBasicFirewallConfigOutput) DisallowOwnIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sconfigHetnzerBasicFirewallConfig) *bool { return v.DisallowOwnIP }).(pulumi.BoolPtrOutput)
}

type K8sconfigHetnzerBasicFirewallConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigHetnzerBasicFirewallConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigHetnzerBasicFirewallConfig)(nil)).Elem()
}

func (o K8sconfigHetnzerBasicFirewallConfigPtrOutput) ToK8sconfigHetnzerBasicFirewallConfigPtrOutput() K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o
}

func (o K8sconfigHetnzerBasicFirewallConfigPtrOutput) ToK8sconfigHetnzerBasicFirewallConfigPtrOutputWithContext(ctx context.Context) K8sconfigHetnzerBasicFirewallConfigPtrOutput {
	return o
}

func (o K8sconfigHetnzerBasicFirewallConfigPtrOutput) Elem() K8sconfigHetnzerBasicFirewallConfigOutput {
	return o.ApplyT(func(v *K8sconfigHetnzerBasicFirewallConfig) K8sconfigHetnzerBasicFirewallConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigHetnzerBasicFirewallConfig
		return ret
	}).(K8sconfigHetnzerBasicFirewallConfigOutput)
}

// AllowedIps specifies a list of IP addresses that are permitted to access the k8s api endpoint. Only traffic from these IPs will be allowed if this list is configured. Default is 0.0.0.0/0 (all ipv4 addresses).
func (o K8sconfigHetnzerBasicFirewallConfigPtrOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sconfigHetnzerBasicFirewallConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedIps
	}).(pulumi.StringArrayOutput)
}

// DisallowOwnIP is a security setting that, when enabled, prevents access to the server from deployer own public IP address.
func (o K8sconfigHetnzerBasicFirewallConfigPtrOutput) DisallowOwnIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sconfigHetnzerBasicFirewallConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisallowOwnIP
	}).(pulumi.BoolPtrOutput)
}

type K8sconfigK8SEndpointConfig struct {
	// Firewall defines configuration for the firewall attached to api access. This is used only for public type since private network considered to be secure.
	Firewall *K8sconfigBasicFirewallConfig `pulumi:"Firewall"`
	// Type of k8s endpoint: public or private. Default is public.
	Type *string `pulumi:"Type"`
}

// K8sconfigK8SEndpointConfigInput is an input type that accepts K8sconfigK8SEndpointConfigArgs and K8sconfigK8SEndpointConfigOutput values.
// You can construct a concrete instance of `K8sconfigK8SEndpointConfigInput` via:
//
//	K8sconfigK8SEndpointConfigArgs{...}
type K8sconfigK8SEndpointConfigInput interface {
	pulumi.Input

	ToK8sconfigK8SEndpointConfigOutput() K8sconfigK8SEndpointConfigOutput
	ToK8sconfigK8SEndpointConfigOutputWithContext(context.Context) K8sconfigK8SEndpointConfigOutput
}

type K8sconfigK8SEndpointConfigArgs struct {
	// Firewall defines configuration for the firewall attached to api access. This is used only for public type since private network considered to be secure.
	Firewall K8sconfigBasicFirewallConfigPtrInput `pulumi:"Firewall"`
	// Type of k8s endpoint: public or private. Default is public.
	Type pulumi.StringPtrInput `pulumi:"Type"`
}

func (K8sconfigK8SEndpointConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigK8SEndpointConfig)(nil)).Elem()
}

func (i K8sconfigK8SEndpointConfigArgs) ToK8sconfigK8SEndpointConfigOutput() K8sconfigK8SEndpointConfigOutput {
	return i.ToK8sconfigK8SEndpointConfigOutputWithContext(context.Background())
}

func (i K8sconfigK8SEndpointConfigArgs) ToK8sconfigK8SEndpointConfigOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigK8SEndpointConfigOutput)
}

func (i K8sconfigK8SEndpointConfigArgs) ToK8sconfigK8SEndpointConfigPtrOutput() K8sconfigK8SEndpointConfigPtrOutput {
	return i.ToK8sconfigK8SEndpointConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigK8SEndpointConfigArgs) ToK8sconfigK8SEndpointConfigPtrOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigK8SEndpointConfigOutput).ToK8sconfigK8SEndpointConfigPtrOutputWithContext(ctx)
}

// K8sconfigK8SEndpointConfigPtrInput is an input type that accepts K8sconfigK8SEndpointConfigArgs, K8sconfigK8SEndpointConfigPtr and K8sconfigK8SEndpointConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigK8SEndpointConfigPtrInput` via:
//
//	        K8sconfigK8SEndpointConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigK8SEndpointConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigK8SEndpointConfigPtrOutput() K8sconfigK8SEndpointConfigPtrOutput
	ToK8sconfigK8SEndpointConfigPtrOutputWithContext(context.Context) K8sconfigK8SEndpointConfigPtrOutput
}

type k8sconfigK8SEndpointConfigPtrType K8sconfigK8SEndpointConfigArgs

func K8sconfigK8SEndpointConfigPtr(v *K8sconfigK8SEndpointConfigArgs) K8sconfigK8SEndpointConfigPtrInput {
	return (*k8sconfigK8SEndpointConfigPtrType)(v)
}

func (*k8sconfigK8SEndpointConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigK8SEndpointConfig)(nil)).Elem()
}

func (i *k8sconfigK8SEndpointConfigPtrType) ToK8sconfigK8SEndpointConfigPtrOutput() K8sconfigK8SEndpointConfigPtrOutput {
	return i.ToK8sconfigK8SEndpointConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigK8SEndpointConfigPtrType) ToK8sconfigK8SEndpointConfigPtrOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigK8SEndpointConfigPtrOutput)
}

type K8sconfigK8SEndpointConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigK8SEndpointConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigK8SEndpointConfig)(nil)).Elem()
}

func (o K8sconfigK8SEndpointConfigOutput) ToK8sconfigK8SEndpointConfigOutput() K8sconfigK8SEndpointConfigOutput {
	return o
}

func (o K8sconfigK8SEndpointConfigOutput) ToK8sconfigK8SEndpointConfigOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigOutput {
	return o
}

func (o K8sconfigK8SEndpointConfigOutput) ToK8sconfigK8SEndpointConfigPtrOutput() K8sconfigK8SEndpointConfigPtrOutput {
	return o.ToK8sconfigK8SEndpointConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigK8SEndpointConfigOutput) ToK8sconfigK8SEndpointConfigPtrOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigK8SEndpointConfig) *K8sconfigK8SEndpointConfig {
		return &v
	}).(K8sconfigK8SEndpointConfigPtrOutput)
}

// Firewall defines configuration for the firewall attached to api access. This is used only for public type since private network considered to be secure.
func (o K8sconfigK8SEndpointConfigOutput) Firewall() K8sconfigBasicFirewallConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigK8SEndpointConfig) *K8sconfigBasicFirewallConfig { return v.Firewall }).(K8sconfigBasicFirewallConfigPtrOutput)
}

// Type of k8s endpoint: public or private. Default is public.
func (o K8sconfigK8SEndpointConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v K8sconfigK8SEndpointConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type K8sconfigK8SEndpointConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigK8SEndpointConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigK8SEndpointConfig)(nil)).Elem()
}

func (o K8sconfigK8SEndpointConfigPtrOutput) ToK8sconfigK8SEndpointConfigPtrOutput() K8sconfigK8SEndpointConfigPtrOutput {
	return o
}

func (o K8sconfigK8SEndpointConfigPtrOutput) ToK8sconfigK8SEndpointConfigPtrOutputWithContext(ctx context.Context) K8sconfigK8SEndpointConfigPtrOutput {
	return o
}

func (o K8sconfigK8SEndpointConfigPtrOutput) Elem() K8sconfigK8SEndpointConfigOutput {
	return o.ApplyT(func(v *K8sconfigK8SEndpointConfig) K8sconfigK8SEndpointConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigK8SEndpointConfig
		return ret
	}).(K8sconfigK8SEndpointConfigOutput)
}

// Firewall defines configuration for the firewall attached to api access. This is used only for public type since private network considered to be secure.
func (o K8sconfigK8SEndpointConfigPtrOutput) Firewall() K8sconfigBasicFirewallConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigK8SEndpointConfig) *K8sconfigBasicFirewallConfig {
		if v == nil {
			return nil
		}
		return v.Firewall
	}).(K8sconfigBasicFirewallConfigPtrOutput)
}

// Type of k8s endpoint: public or private. Default is public.
func (o K8sconfigK8SEndpointConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sconfigK8SEndpointConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type K8sconfigNodeConfig struct {
	// NodeLabels are used to label the node with key=value.
	NodeLabels []string `pulumi:"NodeLabels"`
	// NodeTaints configures taint node manager.
	NodeTaints *K8sconfigTaintConfig `pulumi:"NodeTaints"`
}

// K8sconfigNodeConfigInput is an input type that accepts K8sconfigNodeConfigArgs and K8sconfigNodeConfigOutput values.
// You can construct a concrete instance of `K8sconfigNodeConfigInput` via:
//
//	K8sconfigNodeConfigArgs{...}
type K8sconfigNodeConfigInput interface {
	pulumi.Input

	ToK8sconfigNodeConfigOutput() K8sconfigNodeConfigOutput
	ToK8sconfigNodeConfigOutputWithContext(context.Context) K8sconfigNodeConfigOutput
}

type K8sconfigNodeConfigArgs struct {
	// NodeLabels are used to label the node with key=value.
	NodeLabels pulumi.StringArrayInput `pulumi:"NodeLabels"`
	// NodeTaints configures taint node manager.
	NodeTaints K8sconfigTaintConfigPtrInput `pulumi:"NodeTaints"`
}

func (K8sconfigNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigNodeConfig)(nil)).Elem()
}

func (i K8sconfigNodeConfigArgs) ToK8sconfigNodeConfigOutput() K8sconfigNodeConfigOutput {
	return i.ToK8sconfigNodeConfigOutputWithContext(context.Background())
}

func (i K8sconfigNodeConfigArgs) ToK8sconfigNodeConfigOutputWithContext(ctx context.Context) K8sconfigNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigNodeConfigOutput)
}

func (i K8sconfigNodeConfigArgs) ToK8sconfigNodeConfigPtrOutput() K8sconfigNodeConfigPtrOutput {
	return i.ToK8sconfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigNodeConfigArgs) ToK8sconfigNodeConfigPtrOutputWithContext(ctx context.Context) K8sconfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigNodeConfigOutput).ToK8sconfigNodeConfigPtrOutputWithContext(ctx)
}

// K8sconfigNodeConfigPtrInput is an input type that accepts K8sconfigNodeConfigArgs, K8sconfigNodeConfigPtr and K8sconfigNodeConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigNodeConfigPtrInput` via:
//
//	        K8sconfigNodeConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigNodeConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigNodeConfigPtrOutput() K8sconfigNodeConfigPtrOutput
	ToK8sconfigNodeConfigPtrOutputWithContext(context.Context) K8sconfigNodeConfigPtrOutput
}

type k8sconfigNodeConfigPtrType K8sconfigNodeConfigArgs

func K8sconfigNodeConfigPtr(v *K8sconfigNodeConfigArgs) K8sconfigNodeConfigPtrInput {
	return (*k8sconfigNodeConfigPtrType)(v)
}

func (*k8sconfigNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigNodeConfig)(nil)).Elem()
}

func (i *k8sconfigNodeConfigPtrType) ToK8sconfigNodeConfigPtrOutput() K8sconfigNodeConfigPtrOutput {
	return i.ToK8sconfigNodeConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigNodeConfigPtrType) ToK8sconfigNodeConfigPtrOutputWithContext(ctx context.Context) K8sconfigNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigNodeConfigPtrOutput)
}

type K8sconfigNodeConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigNodeConfig)(nil)).Elem()
}

func (o K8sconfigNodeConfigOutput) ToK8sconfigNodeConfigOutput() K8sconfigNodeConfigOutput {
	return o
}

func (o K8sconfigNodeConfigOutput) ToK8sconfigNodeConfigOutputWithContext(ctx context.Context) K8sconfigNodeConfigOutput {
	return o
}

func (o K8sconfigNodeConfigOutput) ToK8sconfigNodeConfigPtrOutput() K8sconfigNodeConfigPtrOutput {
	return o.ToK8sconfigNodeConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigNodeConfigOutput) ToK8sconfigNodeConfigPtrOutputWithContext(ctx context.Context) K8sconfigNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigNodeConfig) *K8sconfigNodeConfig {
		return &v
	}).(K8sconfigNodeConfigPtrOutput)
}

// NodeLabels are used to label the node with key=value.
func (o K8sconfigNodeConfigOutput) NodeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sconfigNodeConfig) []string { return v.NodeLabels }).(pulumi.StringArrayOutput)
}

// NodeTaints configures taint node manager.
func (o K8sconfigNodeConfigOutput) NodeTaints() K8sconfigTaintConfigPtrOutput {
	return o.ApplyT(func(v K8sconfigNodeConfig) *K8sconfigTaintConfig { return v.NodeTaints }).(K8sconfigTaintConfigPtrOutput)
}

type K8sconfigNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigNodeConfig)(nil)).Elem()
}

func (o K8sconfigNodeConfigPtrOutput) ToK8sconfigNodeConfigPtrOutput() K8sconfigNodeConfigPtrOutput {
	return o
}

func (o K8sconfigNodeConfigPtrOutput) ToK8sconfigNodeConfigPtrOutputWithContext(ctx context.Context) K8sconfigNodeConfigPtrOutput {
	return o
}

func (o K8sconfigNodeConfigPtrOutput) Elem() K8sconfigNodeConfigOutput {
	return o.ApplyT(func(v *K8sconfigNodeConfig) K8sconfigNodeConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigNodeConfig
		return ret
	}).(K8sconfigNodeConfigOutput)
}

// NodeLabels are used to label the node with key=value.
func (o K8sconfigNodeConfigPtrOutput) NodeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sconfigNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.NodeLabels
	}).(pulumi.StringArrayOutput)
}

// NodeTaints configures taint node manager.
func (o K8sconfigNodeConfigPtrOutput) NodeTaints() K8sconfigTaintConfigPtrOutput {
	return o.ApplyT(func(v *K8sconfigNodeConfig) *K8sconfigTaintConfig {
		if v == nil {
			return nil
		}
		return v.NodeTaints
	}).(K8sconfigTaintConfigPtrOutput)
}

type K8sconfigTaintConfig struct {
	// Do not add default taints to the server node. Default is false.
	DisableDefaultsTaints *bool `pulumi:"DisableDefaultsTaints"`
	// Enable or disable taint management. Default is false.
	Enabled *bool `pulumi:"Enabled"`
	// Taints are used to taint the node with key=value:effect. Default is server node is tainted with a couple of taints if number of agents nodes more than 0. But only if disable-default-taints set to false.
	Taints []string `pulumi:"Taints"`
}

// K8sconfigTaintConfigInput is an input type that accepts K8sconfigTaintConfigArgs and K8sconfigTaintConfigOutput values.
// You can construct a concrete instance of `K8sconfigTaintConfigInput` via:
//
//	K8sconfigTaintConfigArgs{...}
type K8sconfigTaintConfigInput interface {
	pulumi.Input

	ToK8sconfigTaintConfigOutput() K8sconfigTaintConfigOutput
	ToK8sconfigTaintConfigOutputWithContext(context.Context) K8sconfigTaintConfigOutput
}

type K8sconfigTaintConfigArgs struct {
	// Do not add default taints to the server node. Default is false.
	DisableDefaultsTaints pulumi.BoolPtrInput `pulumi:"DisableDefaultsTaints"`
	// Enable or disable taint management. Default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// Taints are used to taint the node with key=value:effect. Default is server node is tainted with a couple of taints if number of agents nodes more than 0. But only if disable-default-taints set to false.
	Taints pulumi.StringArrayInput `pulumi:"Taints"`
}

func (K8sconfigTaintConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigTaintConfig)(nil)).Elem()
}

func (i K8sconfigTaintConfigArgs) ToK8sconfigTaintConfigOutput() K8sconfigTaintConfigOutput {
	return i.ToK8sconfigTaintConfigOutputWithContext(context.Background())
}

func (i K8sconfigTaintConfigArgs) ToK8sconfigTaintConfigOutputWithContext(ctx context.Context) K8sconfigTaintConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigTaintConfigOutput)
}

func (i K8sconfigTaintConfigArgs) ToK8sconfigTaintConfigPtrOutput() K8sconfigTaintConfigPtrOutput {
	return i.ToK8sconfigTaintConfigPtrOutputWithContext(context.Background())
}

func (i K8sconfigTaintConfigArgs) ToK8sconfigTaintConfigPtrOutputWithContext(ctx context.Context) K8sconfigTaintConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigTaintConfigOutput).ToK8sconfigTaintConfigPtrOutputWithContext(ctx)
}

// K8sconfigTaintConfigPtrInput is an input type that accepts K8sconfigTaintConfigArgs, K8sconfigTaintConfigPtr and K8sconfigTaintConfigPtrOutput values.
// You can construct a concrete instance of `K8sconfigTaintConfigPtrInput` via:
//
//	        K8sconfigTaintConfigArgs{...}
//
//	or:
//
//	        nil
type K8sconfigTaintConfigPtrInput interface {
	pulumi.Input

	ToK8sconfigTaintConfigPtrOutput() K8sconfigTaintConfigPtrOutput
	ToK8sconfigTaintConfigPtrOutputWithContext(context.Context) K8sconfigTaintConfigPtrOutput
}

type k8sconfigTaintConfigPtrType K8sconfigTaintConfigArgs

func K8sconfigTaintConfigPtr(v *K8sconfigTaintConfigArgs) K8sconfigTaintConfigPtrInput {
	return (*k8sconfigTaintConfigPtrType)(v)
}

func (*k8sconfigTaintConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigTaintConfig)(nil)).Elem()
}

func (i *k8sconfigTaintConfigPtrType) ToK8sconfigTaintConfigPtrOutput() K8sconfigTaintConfigPtrOutput {
	return i.ToK8sconfigTaintConfigPtrOutputWithContext(context.Background())
}

func (i *k8sconfigTaintConfigPtrType) ToK8sconfigTaintConfigPtrOutputWithContext(ctx context.Context) K8sconfigTaintConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sconfigTaintConfigPtrOutput)
}

type K8sconfigTaintConfigOutput struct{ *pulumi.OutputState }

func (K8sconfigTaintConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sconfigTaintConfig)(nil)).Elem()
}

func (o K8sconfigTaintConfigOutput) ToK8sconfigTaintConfigOutput() K8sconfigTaintConfigOutput {
	return o
}

func (o K8sconfigTaintConfigOutput) ToK8sconfigTaintConfigOutputWithContext(ctx context.Context) K8sconfigTaintConfigOutput {
	return o
}

func (o K8sconfigTaintConfigOutput) ToK8sconfigTaintConfigPtrOutput() K8sconfigTaintConfigPtrOutput {
	return o.ToK8sconfigTaintConfigPtrOutputWithContext(context.Background())
}

func (o K8sconfigTaintConfigOutput) ToK8sconfigTaintConfigPtrOutputWithContext(ctx context.Context) K8sconfigTaintConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sconfigTaintConfig) *K8sconfigTaintConfig {
		return &v
	}).(K8sconfigTaintConfigPtrOutput)
}

// Do not add default taints to the server node. Default is false.
func (o K8sconfigTaintConfigOutput) DisableDefaultsTaints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sconfigTaintConfig) *bool { return v.DisableDefaultsTaints }).(pulumi.BoolPtrOutput)
}

// Enable or disable taint management. Default is false.
func (o K8sconfigTaintConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v K8sconfigTaintConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Taints are used to taint the node with key=value:effect. Default is server node is tainted with a couple of taints if number of agents nodes more than 0. But only if disable-default-taints set to false.
func (o K8sconfigTaintConfigOutput) Taints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sconfigTaintConfig) []string { return v.Taints }).(pulumi.StringArrayOutput)
}

type K8sconfigTaintConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sconfigTaintConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sconfigTaintConfig)(nil)).Elem()
}

func (o K8sconfigTaintConfigPtrOutput) ToK8sconfigTaintConfigPtrOutput() K8sconfigTaintConfigPtrOutput {
	return o
}

func (o K8sconfigTaintConfigPtrOutput) ToK8sconfigTaintConfigPtrOutputWithContext(ctx context.Context) K8sconfigTaintConfigPtrOutput {
	return o
}

func (o K8sconfigTaintConfigPtrOutput) Elem() K8sconfigTaintConfigOutput {
	return o.ApplyT(func(v *K8sconfigTaintConfig) K8sconfigTaintConfig {
		if v != nil {
			return *v
		}
		var ret K8sconfigTaintConfig
		return ret
	}).(K8sconfigTaintConfigOutput)
}

// Do not add default taints to the server node. Default is false.
func (o K8sconfigTaintConfigPtrOutput) DisableDefaultsTaints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sconfigTaintConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableDefaultsTaints
	}).(pulumi.BoolPtrOutput)
}

// Enable or disable taint management. Default is false.
func (o K8sconfigTaintConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sconfigTaintConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Taints are used to taint the node with key=value:effect. Default is server node is tainted with a couple of taints if number of agents nodes more than 0. But only if disable-default-taints set to false.
func (o K8sconfigTaintConfigPtrOutput) Taints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sconfigTaintConfig) []string {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(pulumi.StringArrayOutput)
}

type NetworkConfig struct {
	// CIDR of private network. Default is 10.20.0.0/16
	CIDR *string `pulumi:"CIDR"`
	// Enabled of not. Default is false.
	Enabled *bool `pulumi:"Enabled"`
	// Network zone. Default is eu-central.
	Zone *string `pulumi:"Zone"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

type NetworkConfigArgs struct {
	// CIDR of private network. Default is 10.20.0.0/16
	CIDR pulumi.StringPtrInput `pulumi:"CIDR"`
	// Enabled of not. Default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// Network zone. Default is eu-central.
	Zone pulumi.StringPtrInput `pulumi:"Zone"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// CIDR of private network. Default is 10.20.0.0/16
func (o NetworkConfigOutput) CIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.CIDR }).(pulumi.StringPtrOutput)
}

// Enabled of not. Default is false.
func (o NetworkConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Network zone. Default is eu-central.
func (o NetworkConfigOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// CIDR of private network. Default is 10.20.0.0/16
func (o NetworkConfigPtrOutput) CIDR() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.CIDR
	}).(pulumi.StringPtrOutput)
}

// Enabled of not. Default is false.
func (o NetworkConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Network zone. Default is eu-central.
func (o NetworkConfigPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type Servers struct {
	InternalIP *string `pulumi:"internalIP"`
	Ip         *string `pulumi:"ip"`
	Name       *string `pulumi:"name"`
	User       *string `pulumi:"user"`
}

type ServersOutput struct{ *pulumi.OutputState }

func (ServersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servers)(nil)).Elem()
}

func (o ServersOutput) ToServersOutput() ServersOutput {
	return o
}

func (o ServersOutput) ToServersOutputWithContext(ctx context.Context) ServersOutput {
	return o
}

func (o ServersOutput) InternalIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servers) *string { return v.InternalIP }).(pulumi.StringPtrOutput)
}

func (o ServersOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servers) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o ServersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servers) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ServersOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servers) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServersArrayOutput struct{ *pulumi.OutputState }

func (ServersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servers)(nil)).Elem()
}

func (o ServersArrayOutput) ToServersArrayOutput() ServersArrayOutput {
	return o
}

func (o ServersArrayOutput) ToServersArrayOutputWithContext(ctx context.Context) ServersArrayOutput {
	return o
}

func (o ServersArrayOutput) Index(i pulumi.IntInput) ServersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servers {
		return vs[0].([]Servers)[vs[1].(int)]
	}).(ServersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonsConfigInput)(nil)).Elem(), AddonsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonsConfigPtrInput)(nil)).Elem(), AddonsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditAuditLogConfigInput)(nil)).Elem(), AuditAuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditAuditLogConfigPtrInput)(nil)).Elem(), AuditAuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcmConfigInput)(nil)).Elem(), CcmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcmConfigPtrInput)(nil)).Elem(), CcmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigConfigInput)(nil)).Elem(), ConfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigConfigPtrInput)(nil)).Elem(), ConfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigDefaultConfigInput)(nil)).Elem(), ConfigDefaultConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigDefaultConfigPtrInput)(nil)).Elem(), ConfigDefaultConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigFirewallConfigInput)(nil)).Elem(), ConfigFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigFirewallConfigPtrInput)(nil)).Elem(), ConfigFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNetworkConfigInput)(nil)).Elem(), ConfigNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNetworkConfigPtrInput)(nil)).Elem(), ConfigNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodeConfigInput)(nil)).Elem(), ConfigNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodeConfigPtrInput)(nil)).Elem(), ConfigNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodeConfigArrayInput)(nil)).Elem(), ConfigNodeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodepoolConfigInput)(nil)).Elem(), ConfigNodepoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodepoolConfigArrayInput)(nil)).Elem(), ConfigNodepoolConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodepoolsConfigInput)(nil)).Elem(), ConfigNodepoolsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigNodepoolsConfigPtrInput)(nil)).Elem(), ConfigNodepoolsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigServerConfigInput)(nil)).Elem(), ConfigServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigServerConfigPtrInput)(nil)).Elem(), ConfigServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallConfigInput)(nil)).Elem(), FirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallConfigPtrInput)(nil)).Elem(), FirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleConfigInput)(nil)).Elem(), FirewallRuleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleConfigArrayInput)(nil)).Elem(), FirewallRuleConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSSHConfigInput)(nil)).Elem(), FirewallSSHConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSSHConfigPtrInput)(nil)).Elem(), FirewallSSHConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmConfigInput)(nil)).Elem(), HelmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmConfigPtrInput)(nil)).Elem(), HelmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3sConfigInput)(nil)).Elem(), K3sConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3sConfigPtrInput)(nil)).Elem(), K3sConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3sK3sConfigInput)(nil)).Elem(), K3sK3sConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3sK3sConfigPtrInput)(nil)).Elem(), K3sK3sConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3supgraderConfigInput)(nil)).Elem(), K3supgraderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K3supgraderConfigPtrInput)(nil)).Elem(), K3supgraderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigBasicFirewallConfigInput)(nil)).Elem(), K8sconfigBasicFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigBasicFirewallConfigPtrInput)(nil)).Elem(), K8sconfigBasicFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigConfigInput)(nil)).Elem(), K8sconfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigConfigPtrInput)(nil)).Elem(), K8sconfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigHetnzerBasicFirewallConfigInput)(nil)).Elem(), K8sconfigHetnzerBasicFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigHetnzerBasicFirewallConfigPtrInput)(nil)).Elem(), K8sconfigHetnzerBasicFirewallConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigK8SEndpointConfigInput)(nil)).Elem(), K8sconfigK8SEndpointConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigK8SEndpointConfigPtrInput)(nil)).Elem(), K8sconfigK8SEndpointConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigNodeConfigInput)(nil)).Elem(), K8sconfigNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigNodeConfigPtrInput)(nil)).Elem(), K8sconfigNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigTaintConfigInput)(nil)).Elem(), K8sconfigTaintConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sconfigTaintConfigPtrInput)(nil)).Elem(), K8sconfigTaintConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterOutputType(AddonsConfigOutput{})
	pulumi.RegisterOutputType(AddonsConfigPtrOutput{})
	pulumi.RegisterOutputType(AuditAuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditAuditLogConfigPtrOutput{})
	pulumi.RegisterOutputType(CcmConfigOutput{})
	pulumi.RegisterOutputType(CcmConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigConfigOutput{})
	pulumi.RegisterOutputType(ConfigConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigDefaultConfigOutput{})
	pulumi.RegisterOutputType(ConfigDefaultConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigFirewallConfigOutput{})
	pulumi.RegisterOutputType(ConfigFirewallConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigNetworkConfigOutput{})
	pulumi.RegisterOutputType(ConfigNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigNodeConfigOutput{})
	pulumi.RegisterOutputType(ConfigNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigNodeConfigArrayOutput{})
	pulumi.RegisterOutputType(ConfigNodepoolConfigOutput{})
	pulumi.RegisterOutputType(ConfigNodepoolConfigArrayOutput{})
	pulumi.RegisterOutputType(ConfigNodepoolsConfigOutput{})
	pulumi.RegisterOutputType(ConfigNodepoolsConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigServerConfigOutput{})
	pulumi.RegisterOutputType(ConfigServerConfigPtrOutput{})
	pulumi.RegisterOutputType(FirewallConfigOutput{})
	pulumi.RegisterOutputType(FirewallConfigPtrOutput{})
	pulumi.RegisterOutputType(FirewallRuleConfigOutput{})
	pulumi.RegisterOutputType(FirewallRuleConfigArrayOutput{})
	pulumi.RegisterOutputType(FirewallSSHConfigOutput{})
	pulumi.RegisterOutputType(FirewallSSHConfigPtrOutput{})
	pulumi.RegisterOutputType(HelmConfigOutput{})
	pulumi.RegisterOutputType(HelmConfigPtrOutput{})
	pulumi.RegisterOutputType(K3sConfigOutput{})
	pulumi.RegisterOutputType(K3sConfigPtrOutput{})
	pulumi.RegisterOutputType(K3sK3sConfigOutput{})
	pulumi.RegisterOutputType(K3sK3sConfigPtrOutput{})
	pulumi.RegisterOutputType(K3supgraderConfigOutput{})
	pulumi.RegisterOutputType(K3supgraderConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigBasicFirewallConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigBasicFirewallConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigHetnzerBasicFirewallConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigHetnzerBasicFirewallConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigK8SEndpointConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigK8SEndpointConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigNodeConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sconfigTaintConfigOutput{})
	pulumi.RegisterOutputType(K8sconfigTaintConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(ServersOutput{})
	pulumi.RegisterOutputType(ServersArrayOutput{})
}
