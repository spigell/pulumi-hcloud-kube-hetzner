name: The component binary release

on:
  push:
    tags:
      - '*'

jobs:
  unit-tests:
    name: "Release component binary"
    runs-on: ubuntu-latest
    if: github.event.base_ref == 'refs/heads/feature/pulumi-component'
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - uses: actions/checkout@v3
      - name: Setup Go âœ¨
        uses: actions/setup-go@v4
        with:
          cache: false
          go-version-file: go.mod
      - name: Wait for tests on main
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: main
          running-workflow-name: "The cluster deployment for examples for long-living branches"
          repo-token: ${{ github.token }}
          wait-interval: 10
      - name: Wait unit for tests on main
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: main
          running-workflow-name: "Run tests and linter for all branches"
          repo-token: ${{ github.token }}
          wait-interval: 10
      - name: Check if pro
        run: make generate_schema
        working-directory: pulumi-component
      - name: Release component binary
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
